
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000004b0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800068  00800068  0000054c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001548  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a27  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1d  00000000  00000000  000026cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  000033ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085d  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099c  00000000  00000000  000040dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00004a79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_10>
  2c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  8a:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif // Eight_Bit_Mode	
	
	LCD_Send_A_Command(LCD_ENTRY_MODE);
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_lcd_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_lcd_kick+0x10>
  a2:	00 00       	nop
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_Send_A_Command>:
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	9c 2f       	mov	r25, r28
  b6:	90 7f       	andi	r25, 0xF0	; 240
  b8:	89 2b       	or	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	89 7f       	andi	r24, 0xF9	; 249
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  c6:	87 ea       	ldi	r24, 0xA7	; 167
  c8:	91 e6       	ldi	r25, 0x61	; 97
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_Send_A_Command+0x1e>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_Send_A_Command+0x24>
  d0:	00 00       	nop
  d2:	2b b3       	in	r18, 0x1b	; 27
  d4:	30 e1       	ldi	r19, 0x10	; 16
  d6:	c3 9f       	mul	r28, r19
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	92 2f       	mov	r25, r18
  de:	9f 70       	andi	r25, 0x0F	; 15
  e0:	89 2b       	or	r24, r25
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	89 7f       	andi	r24, 0xF9	; 249
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_GOTO_XY>:
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	c8 2f       	mov	r28, r24
  f8:	d6 2f       	mov	r29, r22
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	31 f4       	brne	.+12     	; 0x10a <LCD_GOTO_XY+0x18>
  fe:	60 31       	cpi	r22, 0x10	; 16
 100:	20 f4       	brcc	.+8      	; 0x10a <LCD_GOTO_XY+0x18>
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	86 0f       	add	r24, r22
 106:	0e 94 56 00 	call	0xac	; 0xac <LCD_Send_A_Command>
 10a:	c2 30       	cpi	r28, 0x02	; 2
 10c:	31 f4       	brne	.+12     	; 0x11a <LCD_GOTO_XY+0x28>
 10e:	d0 31       	cpi	r29, 0x10	; 16
 110:	20 f4       	brcc	.+8      	; 0x11a <LCD_GOTO_XY+0x28>
 112:	80 ec       	ldi	r24, 0xC0	; 192
 114:	8d 0f       	add	r24, r29
 116:	0e 94 56 00 	call	0xac	; 0xac <LCD_Send_A_Command>
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <LCD_Send_A_Character>:
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif	
}
void LCD_Send_A_Character(unsigned char character){//writes a character to the LCD display.
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	
    #ifdef Four_Bit_Mode
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	8f 70       	andi	r24, 0x0F	; 15
 128:	9c 2f       	mov	r25, r28
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	89 2b       	or	r24, r25
 12e:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
 130:	88 b3       	in	r24, 0x18	; 24
 132:	82 60       	ori	r24, 0x02	; 2
 134:	88 bb       	out	0x18, r24	; 24
	LCD_Control &= ~(1<<RW_SWITCH);//turn RW off so you can write.
 136:	88 b3       	in	r24, 0x18	; 24
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 13c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 140:	2b b3       	in	r18, 0x1b	; 27
 142:	30 e1       	ldi	r19, 0x10	; 16
 144:	c3 9f       	mul	r28, r19
 146:	c0 01       	movw	r24, r0
 148:	11 24       	eor	r1, r1
 14a:	92 2f       	mov	r25, r18
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	89 2b       	or	r24, r25
 150:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
 152:	88 b3       	in	r24, 0x18	; 24
 154:	82 60       	ori	r24, 0x02	; 2
 156:	88 bb       	out	0x18, r24	; 24
	LCD_Control &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 15e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
	}
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <Compare_Func>:

extern PWM_Over_Flow_Number;
extern PWM_Compare_Number;

	void Compare_Func(void){
		Toggle_Bit(PORTB,0);
 166:	98 b3       	in	r25, 0x18	; 24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	89 27       	eor	r24, r25
 16c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	80 e7       	ldi	r24, 0x70	; 112
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <Compare_Func+0xe>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <Compare_Func+0x18>
 17e:	00 00       	nop
		_delay_ms(100);	
		PORTA =PWM_Compare_Number;
 180:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <PWM_Compare_Number>
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret

00000188 <Over_Flow_Func>:
	}
	void Over_Flow_Func(void){
		Toggle_Bit(PORTB,1);
 188:	98 b3       	in	r25, 0x18	; 24
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	89 27       	eor	r24, r25
 18e:	88 bb       	out	0x18, r24	; 24
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	80 e7       	ldi	r24, 0x70	; 112
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <Over_Flow_Func+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <Over_Flow_Func+0x18>
 1a0:	00 00       	nop
		_delay_ms(100);
		PORTC =PWM_Over_Flow_Number;
 1a2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <PWM_Over_Flow_Number>
 1a6:	85 bb       	out	0x15, r24	; 21
 1a8:	08 95       	ret

000001aa <main>:
	}

	int main(void)
	{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <main+0x6>
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <main+0x8>
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <main+0xa>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
		DDRA =0xFF;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	8a bb       	out	0x1a, r24	; 26
		DDRB=0xFF;
 1bc:	87 bb       	out	0x17, r24	; 23
		DDRC=0xFF;
 1be:	84 bb       	out	0x14, r24	; 20
		DDRD=0xFF;		
 1c0:	81 bb       	out	0x11, r24	; 17

		volatile uint8_t value;
		PWM0_GetCompare(&value);
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <PWM0_GetCompare>
		PORTD=value;
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	82 bb       	out	0x12, r24	; 18
		
		sei();
 1ce:	78 94       	sei
		PWM0_CALLBACK_CompareMatch_INTERRUPT(Compare_Func);
 1d0:	83 eb       	ldi	r24, 0xB3	; 179
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <PWM0_CALLBACK_CompareMatch_INTERRUPT>
		PWM0_CALLBACK_Overflow_INTERRUPT(Over_Flow_Func);
 1d8:	84 ec       	ldi	r24, 0xC4	; 196
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <PWM0_CALLBACK_Overflow_INTERRUPT>
		PWM_t Config={Phase_Coreect_PWM,TOIE_ENABLE,OCIE_ENABLE,PRESCALING_CLK8,PWM_Non_INVERTING};
 1e0:	85 e0       	ldi	r24, 0x05	; 5
 1e2:	e3 e6       	ldi	r30, 0x63	; 99
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	de 01       	movw	r26, r28
 1e8:	12 96       	adiw	r26, 0x02	; 2
 1ea:	01 90       	ld	r0, Z+
 1ec:	0d 92       	st	X+, r0
 1ee:	8a 95       	dec	r24
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x40>
		PWM0_SetCompare(0x7F);	
 1f2:	8f e7       	ldi	r24, 0x7F	; 127
 1f4:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM0_SetCompare>
		PWM0_Init(&Config);
 1f8:	ce 01       	movw	r24, r28
 1fa:	02 96       	adiw	r24, 0x02	; 2
 1fc:	0e 94 01 01 	call	0x202	; 0x202 <PWM0_Init>
 200:	ff cf       	rjmp	.-2      	; 0x200 <main+0x56>

00000202 <PWM0_Init>:

	*TicksNumber=PWM_Over_Flow_Number;
}

void PWM0_SetOverflow(uint8_t TicksNumber){
PWM_Over_Flow_Number=TicksNumber;
 202:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <PWM_Global_configuartion+0x1>
 206:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <PWM_Global_configuartion>
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	80 34       	cpi	r24, 0x40	; 64
 210:	11 f0       	breq	.+4      	; 0x216 <PWM0_Init+0x14>
 212:	88 30       	cpi	r24, 0x08	; 8
 214:	79 f4       	brne	.+30     	; 0x234 <PWM0_Init+0x32>
 216:	80 34       	cpi	r24, 0x40	; 64
 218:	39 f4       	brne	.+14     	; 0x228 <PWM0_Init+0x26>
 21a:	83 b7       	in	r24, 0x33	; 51
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	83 bf       	out	0x33, r24	; 51
 220:	83 b7       	in	r24, 0x33	; 51
 222:	88 60       	ori	r24, 0x08	; 8
 224:	83 bf       	out	0x33, r24	; 51
 226:	06 c0       	rjmp	.+12     	; 0x234 <PWM0_Init+0x32>
 228:	83 b7       	in	r24, 0x33	; 51
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	83 bf       	out	0x33, r24	; 51
 22e:	83 b7       	in	r24, 0x33	; 51
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	83 bf       	out	0x33, r24	; 51
 234:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <PWM_Global_configuartion>
 238:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <PWM_Global_configuartion+0x1>
 23c:	83 81       	ldd	r24, Z+3	; 0x03
 23e:	88 30       	cpi	r24, 0x08	; 8
 240:	18 f4       	brcc	.+6      	; 0x248 <PWM0_Init+0x46>
 242:	93 b7       	in	r25, 0x33	; 51
 244:	89 2b       	or	r24, r25
 246:	83 bf       	out	0x33, r24	; 51
 248:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <PWM_Global_configuartion>
 24c:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <PWM_Global_configuartion+0x1>
 250:	82 81       	ldd	r24, Z+2	; 0x02
 252:	88 23       	and	r24, r24
 254:	11 f0       	breq	.+4      	; 0x25a <PWM0_Init+0x58>
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	19 f4       	brne	.+6      	; 0x260 <PWM0_Init+0x5e>
 25a:	99 b7       	in	r25, 0x39	; 57
 25c:	89 2b       	or	r24, r25
 25e:	89 bf       	out	0x39, r24	; 57
 260:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <PWM_Global_configuartion>
 264:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <PWM_Global_configuartion+0x1>
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	18 f4       	brcc	.+6      	; 0x274 <PWM0_Init+0x72>
 26e:	99 b7       	in	r25, 0x39	; 57
 270:	89 2b       	or	r24, r25
 272:	89 bf       	out	0x39, r24	; 57
 274:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <PWM_Global_configuartion>
 278:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <PWM_Global_configuartion+0x1>
 27c:	84 81       	ldd	r24, Z+4	; 0x04
 27e:	80 33       	cpi	r24, 0x30	; 48
 280:	11 f0       	breq	.+4      	; 0x286 <PWM0_Init+0x84>
 282:	80 31       	cpi	r24, 0x10	; 16
 284:	79 f4       	brne	.+30     	; 0x2a4 <PWM0_Init+0xa2>
 286:	80 33       	cpi	r24, 0x30	; 48
 288:	39 f4       	brne	.+14     	; 0x298 <PWM0_Init+0x96>
 28a:	83 b7       	in	r24, 0x33	; 51
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	83 bf       	out	0x33, r24	; 51
 290:	83 b7       	in	r24, 0x33	; 51
 292:	80 62       	ori	r24, 0x20	; 32
 294:	83 bf       	out	0x33, r24	; 51
 296:	08 95       	ret
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	8f 7e       	andi	r24, 0xEF	; 239
 29c:	83 bf       	out	0x33, r24	; 51
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	83 bf       	out	0x33, r24	; 51
 2a4:	08 95       	ret

000002a6 <PWM0_GetCompare>:
 2a6:	2c b7       	in	r18, 0x3c	; 60
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
 2ac:	08 95       	ret

000002ae <PWM0_SetCompare>:
 2ae:	8c bf       	out	0x3c, r24	; 60
 2b0:	08 95       	ret

000002b2 <PWM0_CALLBACK_Overflow_INTERRUPT>:
}


void PWM0_CALLBACK_Overflow_INTERRUPT(Ptr_Func callback){
	PWM_CALLBACK_OVER_FLOW=callback;
 2b2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <PWM_CALLBACK_OVER_FLOW+0x1>
 2b6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <PWM_CALLBACK_OVER_FLOW>
 2ba:	08 95       	ret

000002bc <PWM0_CALLBACK_CompareMatch_INTERRUPT>:
	}
	
void PWM0_CALLBACK_CompareMatch_INTERRUPT(Ptr_Func callback){
	PWM_CALLBACK_COMPARE=callback;
 2bc:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <PWM_CALLBACK_COMPARE+0x1>
 2c0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <PWM_CALLBACK_COMPARE>
 2c4:	08 95       	ret

000002c6 <__vector_10>:
}

ISR(TIMER0_COMP_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	PWM_Compare_Number++;
 2e8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <PWM_Compare_Number>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <PWM_Compare_Number>
	PWM_CALLBACK_COMPARE();
 2f2:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <PWM_CALLBACK_COMPARE>
 2f6:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <PWM_CALLBACK_COMPARE+0x1>
 2fa:	09 95       	icall
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	PWM_Over_Flow_Number++;
 340:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <PWM_Over_Flow_Number>
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <PWM_Over_Flow_Number>
	PWM_CALLBACK_OVER_FLOW();
 34a:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <PWM_CALLBACK_OVER_FLOW>
 34e:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <PWM_CALLBACK_OVER_FLOW+0x1>
 352:	09 95       	icall
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <Send_NoBlock>:

void UART_Receive_String_Asyn(void){
	if (flag_receive ==1){
		flag_receive=0;
		RX_STR=data;
		UartRX_Interrupt_Enable();
 376:	8c b9       	out	0x0c, r24	; 12
 378:	08 95       	ret

0000037a <Receive_NoBlock>:
 37a:	8c b1       	in	r24, 0x0c	; 12
 37c:	08 95       	ret

0000037e <UartRX_Interrupt_Disable>:
 37e:	8a b1       	in	r24, 0x0a	; 10
 380:	8f 77       	andi	r24, 0x7F	; 127
 382:	8a b9       	out	0x0a, r24	; 10
 384:	08 95       	ret

00000386 <__vector_15>:
}

//if UDR Transimeted then flag will be on

ISR(USART_TXC_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	// USART transmission complete interrupt handler
	// Perform some additional processing or initiate another transmission
	static uint8_t i =1;
	if (TX_STR[i] !=0)
 3a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ac:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <TX_STR>
 3b0:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <TX_STR+0x1>
 3b4:	e8 0f       	add	r30, r24
 3b6:	f1 1d       	adc	r31, r1
 3b8:	80 81       	ld	r24, Z
 3ba:	88 23       	and	r24, r24
 3bc:	41 f0       	breq	.+16     	; 0x3ce <__vector_15+0x48>
	{
		Send_NoBlock(TX_STR[i]);
 3be:	0e 94 bb 01 	call	0x376	; 0x376 <Send_NoBlock>
		i++;
 3c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <__vector_15+0x52>
	}
	else{
		i=1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		flag_send=1;
 3d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <flag_send>
	}
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_13>:

ISR(USART_RXC_vect){
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	ef 93       	push	r30
 41e:	ff 93       	push	r31
	cli();
 420:	f8 94       	cli
	static uint8_t i =0;
	RX_STR[i] =Receive_NoBlock();
 422:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 426:	c0 91 69 00 	lds	r28, 0x0069	; 0x800069 <RX_STR>
 42a:	d0 91 6a 00 	lds	r29, 0x006A	; 0x80006a <RX_STR+0x1>
 42e:	c8 0f       	add	r28, r24
 430:	d1 1d       	adc	r29, r1
 432:	0e 94 bd 01 	call	0x37a	; 0x37a <Receive_NoBlock>
 436:	88 83       	st	Y, r24
	LCD_GOTO_XY(2,i);
 438:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_GOTO_XY>
	LCD_Send_A_Character(RX_STR[i]);
 442:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 446:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <RX_STR>
 44a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <RX_STR+0x1>
 44e:	e8 0f       	add	r30, r24
 450:	f1 1d       	adc	r31, r1
 452:	80 81       	ld	r24, Z
 454:	0e 94 90 00 	call	0x120	; 0x120 <LCD_Send_A_Character>
	
	if(RX_STR[i] == Default_Stop){
 458:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 45c:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <RX_STR>
 460:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <RX_STR+0x1>
 464:	e8 0f       	add	r30, r24
 466:	f1 1d       	adc	r31, r1
 468:	80 81       	ld	r24, Z
 46a:	8d 30       	cpi	r24, 0x0D	; 13
 46c:	31 f4       	brne	.+12     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
		RX_STR[i] = '\0';
 46e:	10 82       	st	Z, r1
		flag_receive=1    ;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag_receive>
		UartRX_Interrupt_Disable();
 476:	0e 94 bf 01 	call	0x37e	; 0x37e <UartRX_Interrupt_Disable>
		
	}
	i++;
 47a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
	sei();
 484:	78 94       	sei
}
 486:	ff 91       	pop	r31
 488:	ef 91       	pop	r30
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
