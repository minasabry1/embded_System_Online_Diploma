
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065f  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a1  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  000013ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Spi_Master_Init>:
		Bit 4 – MSTR: Master/Slave Select
		This bit selects Master SPI mode when written to one, and Slave SPI mode when written logic zero.
		*/
		
		//// Set MOSI, SCK and SS as Output Pins
	DDRB = (1<<SS)|(1<<MOSI)|(1<<SCK);
  6c:	80 eb       	ldi	r24, 0xB0	; 176
  6e:	87 bb       	out	0x17, r24	; 23
		/* Set MISO input */
		DDRB &= ~(1<<MISO);
  70:	87 b3       	in	r24, 0x17	; 23
  72:	8f 7b       	andi	r24, 0xBF	; 191
  74:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, Master mode, Shift Clock = CLK /16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); 
  76:	81 e5       	ldi	r24, 0x51	; 81
  78:	8d b9       	out	0x0d, r24	; 13
  7a:	08 95       	ret

0000007c <Spi_Master_Transmiti>:
}

unsigned char Spi_Master_Transmiti(unsigned char cdata){
	PORTB &= ~(1 << SS);
  7c:	98 b3       	in	r25, 0x18	; 24
  7e:	9f 7e       	andi	r25, 0xEF	; 239
  80:	98 bb       	out	0x18, r25	; 24
	SPDR =cdata;	// Start transmission
  82:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete ..IF 0 Them still Transmit Data
  84:	77 9b       	sbis	0x0e, 7	; 14
  86:	fe cf       	rjmp	.-4      	; 0x84 <Spi_Master_Transmiti+0x8>
	return SPDR;	// return the received data
  88:	8f b1       	in	r24, 0x0f	; 15
}	
  8a:	08 95       	ret

0000008c <main>:
int main(void)
{
	Spi_Master_Init();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <Spi_Master_Init>
	DDRA=0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
	unsigned char data;
	
	for (data=0;data <=255;data++)
  94:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e3       	ldi	r18, 0x3F	; 63
  98:	8d e0       	ldi	r24, 0x0D	; 13
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x10>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1a>
  a6:	00 00       	nop
	{
		_delay_ms(1000);
		PORTA=Spi_Master_Transmiti(data);
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <Spi_Master_Transmiti>
  ae:	8b bb       	out	0x1b, r24	; 27
{
	Spi_Master_Init();
	DDRA=0xFF;
	unsigned char data;
	
	for (data=0;data <=255;data++)
  b0:	cf 5f       	subi	r28, 0xFF	; 255
  b2:	f1 cf       	rjmp	.-30     	; 0x96 <main+0xa>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
