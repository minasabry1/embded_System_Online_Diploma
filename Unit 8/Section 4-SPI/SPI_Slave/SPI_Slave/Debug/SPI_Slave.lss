
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  000007ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  000013f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Spi_Slave_Init>:
		Bit 4 – MSTR: Master/Slave Select
		This bit selects Master SPI mode when written to one, and Slave SPI mode when written logic zero.
		*/
		
		//// Set MOSI, SCK and SS as Output Pins
	DDRB = (1<<MISO);
  6c:	90 e4       	ldi	r25, 0x40	; 64
  6e:	97 bb       	out	0x17, r25	; 23
	
		/* Set MOSI, SCK and SS input*/
		DDRB &= ~(1<<MOSI) & ~(1<<SCK) & ~(1<<SS);
  70:	87 b3       	in	r24, 0x17	; 23
  72:	8f 74       	andi	r24, 0x4F	; 79
  74:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, Master mode, Shift Clock = CLK /16
	SPCR = (1<<SPE); 
  76:	9d b9       	out	0x0d, r25	; 13
  78:	08 95       	ret

0000007a <Spi_Slave_Recieve>:
}

unsigned char Spi_Slave_Recieve(unsigned char cdata){
	SPDR =cdata;	// Start transmission
  7a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete ..IF 0 Them still Transmit Data
  7c:	77 9b       	sbis	0x0e, 7	; 14
  7e:	fe cf       	rjmp	.-4      	; 0x7c <Spi_Slave_Recieve+0x2>
	return SPDR;	// return the received data
  80:	8f b1       	in	r24, 0x0f	; 15
}	
  82:	08 95       	ret

00000084 <main>:
int main(void)
{
	Spi_Slave_Init();
  84:	0e 94 36 00 	call	0x6c	; 0x6c <Spi_Slave_Init>
	DDRA=0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	unsigned char data;
	
	for (data=255;data >=0;data--)
  8c:	cf ef       	ldi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f e3       	ldi	r18, 0x3F	; 63
  90:	8d e0       	ldi	r24, 0x0D	; 13
  92:	93 e0       	ldi	r25, 0x03	; 3
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x10>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1a>
  9e:	00 00       	nop
	{
		_delay_ms(1000);
		PORTA=Spi_Slave_Recieve(data);
  a0:	8c 2f       	mov	r24, r28
  a2:	0e 94 3d 00 	call	0x7a	; 0x7a <Spi_Slave_Recieve>
  a6:	8b bb       	out	0x1b, r24	; 27
{
	Spi_Slave_Init();
	DDRA=0xFF;
	unsigned char data;
	
	for (data=255;data >=0;data--)
  a8:	c1 50       	subi	r28, 0x01	; 1
  aa:	f1 cf       	rjmp	.-30     	; 0x8e <main+0xa>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
