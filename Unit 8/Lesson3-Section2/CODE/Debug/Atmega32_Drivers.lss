
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000472  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000472  00000506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  00800086  00800086  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a7  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091c  00000000  00000000  00001767  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8e  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00002b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ac  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3e       	cpi	r26, 0xEF	; 239
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 01 	call	0x242	; 0x242 <main>
  8a:	0c 94 37 02 	jmp	0x46e	; 0x46e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
}
void LCD_lcd_kick (void){//sends a pulse to the EN pin of the LCD to initiate a data transfer.
	//Enable read at Falling(H>>L)
	LCD_Control &= ~(1<<Enable_Switch);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_lcd_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_lcd_kick+0x10>
  a2:	00 00       	nop
	_delay_ms(50);
	 LCD_Control |= (1<<Enable_Switch);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_check_lcd_isbusy>:



void LCD_check_lcd_isbusy(void){//checks whether the LCD is busy processing a command or data transfer.
	// initializes the LCD display with the required settings.
	LCD_Port_Direction &= ~(0xFF<<DATA_shift); //DDRA>>(INPUT)Read Mode
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	8a bb       	out	0x1a, r24	; 26
	LCD_Control |=(1<<RW_SWITCH); //RW ON
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
	LCD_Control &=~(1<<RS_SWITCH); //RS OFF
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	88 bb       	out	0x18, r24	; 24
    LCD_lcd_kick(); //Enable
  be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		#ifdef Eight_Bit_Mode
		LCD_Port_Direction |=  (0xFF<<DATA_shift);
		#endif
		
		#ifdef Four_Bit_Mode
		LCD_Port_Direction |=  (0xF0<<DATA_shift);
  c2:	8a b3       	in	r24, 0x1a	; 26
  c4:	8a bb       	out	0x1a, r24	; 26
		#endif
	//DDRA>>Output Mode
	LCD_Control &=~(1<<RW_SWITCH);//Rest
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	83 ed       	ldi	r24, 0xD3	; 211
  ce:	90 e3       	ldi	r25, 0x30	; 48
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_check_lcd_isbusy+0x24>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_check_lcd_isbusy+0x2a>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <LCD_Send_A_Command>:
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.


}
void LCD_Send_A_Command(unsigned char command){//sends a command to the LCD display.
  da:	cf 93       	push	r28
  dc:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	#ifdef Four_Bit_Mode
		//LCD_check_lcd_isbusy();
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	9c 2f       	mov	r25, r28
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	89 2b       	or	r24, r25
  e8:	8b bb       	out	0x1b, r24	; 27
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	89 7f       	andi	r24, 0xF9	; 249
  ee:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick ();
  f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  f4:	87 ea       	ldi	r24, 0xA7	; 167
  f6:	91 e6       	ldi	r25, 0x61	; 97
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_Send_A_Command+0x1e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Send_A_Command+0x24>
  fe:	00 00       	nop
		_delay_ms(100);
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
 100:	2b b3       	in	r18, 0x1b	; 27
 102:	30 e1       	ldi	r19, 0x10	; 16
 104:	c3 9f       	mul	r28, r19
 106:	c0 01       	movw	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	92 2f       	mov	r25, r18
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 2b       	or	r24, r25
 110:	8b bb       	out	0x1b, r24	; 27
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
 112:	88 b3       	in	r24, 0x18	; 24
 114:	89 7f       	andi	r24, 0xF9	; 249
 116:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
 118:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif	
}
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <LCD_clear_screen>:
 *  Author: minas
 */ 
#include "LCD.h"
void LCD_clear_screen (){//clears the LCD screen.
	
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
 126:	08 95       	ret

00000128 <LCD_GOTO_XY>:
	LCD_Control &= ~(1<<Enable_Switch);
	_delay_ms(50);
	 LCD_Control |= (1<<Enable_Switch);
		
}
void LCD_GOTO_XY(unsigned char line, unsigned char position){// positions the cursor at the specified line and position on the LCD screen.
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	c8 2f       	mov	r28, r24
 12e:	d6 2f       	mov	r29, r22
	if (line == 1)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	31 f4       	brne	.+12     	; 0x140 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 134:	60 31       	cpi	r22, 0x10	; 16
 136:	20 f4       	brcc	.+8      	; 0x140 <LCD_GOTO_XY+0x18>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW+position);
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	86 0f       	add	r24, r22
 13c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
		}
	}
	if (line == 2)
 140:	c2 30       	cpi	r28, 0x02	; 2
 142:	31 f4       	brne	.+12     	; 0x150 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 144:	d0 31       	cpi	r29, 0x10	; 16
 146:	20 f4       	brcc	.+8      	; 0x150 <LCD_GOTO_XY+0x28>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW+position);
 148:	80 ec       	ldi	r24, 0xC0	; 192
 14a:	8d 0f       	add	r24, r29
 14c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
		}
	}
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <LCD_init>:
 156:	87 e8       	ldi	r24, 0x87	; 135
 158:	93 e1       	ldi	r25, 0x13	; 19
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_init+0x4>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_init+0xa>
 160:	00 00       	nop
	_delay_ms(50);
}

void LCD_init(void){//initializes the LCD display with the required settings.
	_delay_ms(20);
	LCD_check_lcd_isbusy();
 162:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
	LCD_Control_Direction |= (1<<Enable_Switch | 1<<RW_SWITCH | 1<<RS_SWITCH);//DDRB>>OUTPUT (Enable,RS,RW)
 166:	87 b3       	in	r24, 0x17	; 23
 168:	8e 60       	ori	r24, 0x0E	; 14
 16a:	87 bb       	out	0x17, r24	; 23
	LCD_Control &= ~((1<<Enable_Switch | 1<<RS_SWITCH | 1<<RW_SWITCH));//PortB
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	81 7f       	andi	r24, 0xF1	; 241
 170:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 172:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
 176:	85 ea       	ldi	r24, 0xA5	; 165
 178:	9e e0       	ldi	r25, 0x0E	; 14
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_init+0x24>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_init+0x2a>
 180:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 182:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
	
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
    #endif // Eight_Bit_Mode

	#ifdef Four_Bit_Mode
	LCD_Port_Direction |=  (0xF0<<DATA_shift);
 186:	8a b3       	in	r24, 0x1a	; 26
 188:	8a bb       	out	0x1a, r24	; 26
	LCD_Send_A_Command(0x02);
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
	#endif // Eight_Bit_Mode	
	
	LCD_Send_A_Command(LCD_ENTRY_MODE);
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
 1a8:	08 95       	ret

000001aa <LCD_Send_A_Character>:
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif	
}
void LCD_Send_A_Character(unsigned char character){//writes a character to the LCD display.
 1aa:	cf 93       	push	r28
 1ac:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	
    #ifdef Four_Bit_Mode
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	9c 2f       	mov	r25, r28
 1b4:	90 7f       	andi	r25, 0xF0	; 240
 1b6:	89 2b       	or	r24, r25
 1b8:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	88 bb       	out	0x18, r24	; 24
	LCD_Control &= ~(1<<RW_SWITCH);//turn RW off so you can write.
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 1ca:	2b b3       	in	r18, 0x1b	; 27
 1cc:	30 e1       	ldi	r19, 0x10	; 16
 1ce:	c3 9f       	mul	r28, r19
 1d0:	c0 01       	movw	r24, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	92 2f       	mov	r25, r18
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	89 2b       	or	r24, r25
 1da:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	88 bb       	out	0x18, r24	; 24
	LCD_Control &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
	}
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <LCD_Send_A_String>:

void LCD_Send_A_String(char* string){//: writes a string of characters to the LCD display.
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	8c 01       	movw	r16, r24

	int count = 0;
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){// if became at end will be =0
 1fe:	18 c0       	rjmp	.+48     	; 0x230 <LCD_Send_A_String+0x40>
		count++;
 200:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_A_Character(*string++);
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
		if (count == 16)
 20a:	c0 31       	cpi	r28, 0x10	; 16
 20c:	d1 05       	cpc	r29, r1
 20e:	29 f4       	brne	.+10     	; 0x21a <LCD_Send_A_String+0x2a>
		{
			LCD_GOTO_XY(2,0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
 218:	0b c0       	rjmp	.+22     	; 0x230 <LCD_Send_A_String+0x40>
		}
		else if (count == 31)
 21a:	cf 31       	cpi	r28, 0x1F	; 31
 21c:	d1 05       	cpc	r29, r1
 21e:	41 f4       	brne	.+16     	; 0x230 <LCD_Send_A_String+0x40>
		{
			LCD_clear_screen();
 220:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
			LCD_GOTO_XY(0,0);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
			count = 0;
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
	}

void LCD_Send_A_String(char* string){//: writes a string of characters to the LCD display.

	int count = 0;
	while (*string > 0){// if became at end will be =0
 230:	f8 01       	movw	r30, r16
 232:	80 81       	ld	r24, Z
 234:	81 11       	cpse	r24, r1
 236:	e4 cf       	rjmp	.-56     	; 0x200 <LCD_Send_A_String+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(0,0);
			count = 0;
		}
	}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <main>:
int main(void)	
{	
uint8_t counter='0' ;
	uint8_t x;
 	uint32_t num; 
	LCD_clear_screen();
 242:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
	LCD_init();
 246:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_init>
	Uart_init();
 24a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Uart_init>
	LCD_GOTO_XY(1,2);
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
	LCD_Send_A_String("UART TR Ready");
 256:	83 e6       	ldi	r24, 0x63	; 99
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
//  Uart_Send32(999);
//UART_Send_String(" Sabry WECLOME :)");
//Async. Dont need while or for loop.

//Cant Send Done because while interrupt working also cpu working and trying send done. 
Uart_Send_String_Asyn("Mina Welcome");
 25e:	81 e7       	ldi	r24, 0x71	; 113
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Uart_Send_String_Asyn>
 266:	2f e3       	ldi	r18, 0x3F	; 63
 268:	8d e0       	ldi	r24, 0x0D	; 13
 26a:	93 e0       	ldi	r25, 0x03	; 3
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x2a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x34>
 276:	00 00       	nop
_delay_ms(1000);
Uart_Send_String_Asyn("Done===");
 278:	8e e7       	ldi	r24, 0x7E	; 126
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Uart_Send_String_Asyn>
 UART_Receive_String_Asyn();
 280:	0e 94 95 01 	call	0x32a	; 0x32a <UART_Receive_String_Asyn>
	for(j = 0 ; j < 255 ;   j++);
}

int main(void)	
{	
uint8_t counter='0' ;
 284:	c0 e3       	ldi	r28, 0x30	; 48
	
	
	  
	   
		//LCD_Send_A_String("							");
		LCD_GOTO_XY(1,0);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
		LCD_Send_A_Character(counter);
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
		counter++;
 294:	cf 5f       	subi	r28, 0xFF	; 255
		if(counter ==':')
 296:	ca 33       	cpi	r28, 0x3A	; 58
 298:	09 f4       	brne	.+2      	; 0x29c <main+0x5a>
 		{
 			counter='0';
 29a:	c0 e3       	ldi	r28, 0x30	; 48
 29c:	2f e7       	ldi	r18, 0x7F	; 127
 29e:	8a e1       	ldi	r24, 0x1A	; 26
 2a0:	96 e0       	ldi	r25, 0x06	; 6
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x60>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x6a>
 2ac:	00 00       	nop
 2ae:	eb cf       	rjmp	.-42     	; 0x286 <main+0x44>

000002b0 <Uart_init>:
void UartTX_Interrupt_Enable(void){
    sei();
	Set_Bit(UCSRB,TXCIE);	
}
void UartTX_Interrupt_Disable(void){
	Reset_Bit(UCSRB,TXCIE);
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	89 b9       	out	0x09, r24	; 9
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	8d 7f       	andi	r24, 0xFD	; 253
 2b8:	8b b9       	out	0x0b, r24	; 11
 2ba:	80 b5       	in	r24, 0x20	; 32
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	80 bd       	out	0x20, r24	; 32
 2c0:	80 b5       	in	r24, 0x20	; 32
 2c2:	82 60       	ori	r24, 0x02	; 2
 2c4:	80 bd       	out	0x20, r24	; 32
 2c6:	8a b1       	in	r24, 0x0a	; 10
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	8a b9       	out	0x0a, r24	; 10
 2cc:	8a b1       	in	r24, 0x0a	; 10
 2ce:	88 60       	ori	r24, 0x08	; 8
 2d0:	8a b9       	out	0x0a, r24	; 10
 2d2:	8a b1       	in	r24, 0x0a	; 10
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	8a b9       	out	0x0a, r24	; 10
 2d8:	08 95       	ret

000002da <Send_NoBlock>:
 2da:	8c b9       	out	0x0c, r24	; 12
 2dc:	08 95       	ret

000002de <Receive_NoBlock>:
 2de:	8c b1       	in	r24, 0x0c	; 12
 2e0:	08 95       	ret

000002e2 <UartRX_Interrupt_Enable>:
 2e2:	78 94       	sei
 2e4:	8a b1       	in	r24, 0x0a	; 10
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	8a b9       	out	0x0a, r24	; 10
 2ea:	08 95       	ret

000002ec <UartRX_Interrupt_Disable>:
 2ec:	8a b1       	in	r24, 0x0a	; 10
 2ee:	8f 77       	andi	r24, 0x7F	; 127
 2f0:	8a b9       	out	0x0a, r24	; 10
 2f2:	08 95       	ret

000002f4 <UartTX_Interrupt_Enable>:
 2f4:	78 94       	sei
 2f6:	8a b1       	in	r24, 0x0a	; 10
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	8a b9       	out	0x0a, r24	; 10
 2fc:	08 95       	ret

000002fe <Uart_Send_String_Asyn>:
}


//if flag=1 then TX_Interrupt will be enabled and but first element of recieved array at UDR and go to the ISR then flag turn off.
void Uart_Send_String_Asyn(uint8_t* str){
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	9c 01       	movw	r18, r24
	if (flag_send ==1){
 304:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <flag_send>
 308:	91 30       	cpi	r25, 0x01	; 1
 30a:	61 f4       	brne	.+24     	; 0x324 <Uart_Send_String_Asyn+0x26>
 30c:	e9 01       	movw	r28, r18
		TX_STR=str;		
 30e:	30 93 8a 00 	sts	0x008A, r19	; 0x80008a <TX_STR+0x1>
 312:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <TX_STR>
		UartTX_Interrupt_Enable();
 316:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <UartTX_Interrupt_Enable>
		Send_NoBlock(str[0]);
 31a:	88 81       	ld	r24, Y
 31c:	0e 94 6d 01 	call	0x2da	; 0x2da <Send_NoBlock>

	    flag_send=0;
 320:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag_send>

	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <UART_Receive_String_Asyn>:

void UART_Receive_String_Asyn(void){
	if (flag_receive ==1){
 32a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag_receive>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	51 f4       	brne	.+20     	; 0x346 <UART_Receive_String_Asyn+0x1c>
		flag_receive=0;
 332:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag_receive>
		RX_STR=data;
 336:	8b e8       	ldi	r24, 0x8B	; 139
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <RX_STR+0x1>
 33e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <RX_STR>
		UartRX_Interrupt_Enable();
 342:	0e 94 71 01 	call	0x2e2	; 0x2e2 <UartRX_Interrupt_Enable>
 346:	08 95       	ret

00000348 <__vector_15>:
}

//if UDR Transimeted then flag will be on

ISR(USART_TXC_vect)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	2f 93       	push	r18
 354:	3f 93       	push	r19
 356:	4f 93       	push	r20
 358:	5f 93       	push	r21
 35a:	6f 93       	push	r22
 35c:	7f 93       	push	r23
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
	// USART transmission complete interrupt handler
	// Perform some additional processing or initiate another transmission
	static uint8_t i =1;
	if (TX_STR[i] !=0)
 36a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 36e:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <TX_STR>
 372:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <TX_STR+0x1>
 376:	e8 0f       	add	r30, r24
 378:	f1 1d       	adc	r31, r1
 37a:	80 81       	ld	r24, Z
 37c:	88 23       	and	r24, r24
 37e:	41 f0       	breq	.+16     	; 0x390 <__vector_15+0x48>
	{
		Send_NoBlock(TX_STR[i]);
 380:	0e 94 6d 01 	call	0x2da	; 0x2da <Send_NoBlock>
		i++;
 384:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 388:	8f 5f       	subi	r24, 0xFF	; 255
 38a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 38e:	05 c0       	rjmp	.+10     	; 0x39a <__vector_15+0x52>
	}
	else{
		i=1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		flag_send=1;
 396:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <flag_send>
	}
}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_13>:

ISR(USART_RXC_vect){
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	cli();
 3e2:	f8 94       	cli
	static uint8_t i =0;
	RX_STR[i] =Receive_NoBlock();
 3e4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 3e8:	c0 91 87 00 	lds	r28, 0x0087	; 0x800087 <RX_STR>
 3ec:	d0 91 88 00 	lds	r29, 0x0088	; 0x800088 <RX_STR+0x1>
 3f0:	c8 0f       	add	r28, r24
 3f2:	d1 1d       	adc	r29, r1
 3f4:	0e 94 6f 01 	call	0x2de	; 0x2de <Receive_NoBlock>
 3f8:	88 83       	st	Y, r24
	LCD_GOTO_XY(2,i);
 3fa:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__data_end>
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
	LCD_Send_A_Character(RX_STR[i]);
 404:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 408:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <RX_STR>
 40c:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <RX_STR+0x1>
 410:	e8 0f       	add	r30, r24
 412:	f1 1d       	adc	r31, r1
 414:	80 81       	ld	r24, Z
 416:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
	
	if(RX_STR[i] == Default_Stop){
 41a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 41e:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <RX_STR>
 422:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <RX_STR+0x1>
 426:	e8 0f       	add	r30, r24
 428:	f1 1d       	adc	r31, r1
 42a:	80 81       	ld	r24, Z
 42c:	8d 30       	cpi	r24, 0x0D	; 13
 42e:	31 f4       	brne	.+12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		RX_STR[i] = '\0';
 430:	10 82       	st	Z, r1
		flag_receive=1    ;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag_receive>
		UartRX_Interrupt_Disable();
 438:	0e 94 76 01 	call	0x2ec	; 0x2ec <UartRX_Interrupt_Disable>
		
	}
	i++;
 43c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 440:	8f 5f       	subi	r24, 0xFF	; 255
 442:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
	sei();
 446:	78 94       	sei
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <_exit>:
 46e:	f8 94       	cli

00000470 <__stop_program>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stop_program>
