/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

typedef volatile unsigned int vuint32_t ;
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
// register address
//AFIO
#define AFIO_BASE 0x40010000
#define AFIO_EXTICR1 *(volatile uint32_t *)(GPIOA_BASE + 0x08)

//EXTI
#define EXTI_BASE 0x40010400
#define EXTI_IMR *(volatile uint32_t *)(EXTI_BASE + 0x00)
#define EXTI_RTSR *(volatile uint32_t *)(EXTI_BASE + 0x08)
#define EXTI_PR *(volatile uint32_t *)(EXTI_BASE + 0x14)
//NVIC
#define NVIC_ISER0 *(volatile uint32_t *)(0xE000E100)

//GPIOA
#define GPIOA_BASE 0x40010800
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_CRL *(volatile uint32_t *)(GPIOA_BASE + 0x00)
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)
#define GPIOA13 (1UL<<13)
//RCC
#define RCC_BASE 0x40021000
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_BASE + 0x18)
#define RCC_CFGR *(volatile uint32_t *)(RCC_BASE + 0x04)
#define RCC_CR *(volatile uint32_t *)(RCC_BASE + 0x00)
#define RCC_IOPAEN 1<<2 //Offset name of RCC_APB2ENR register
/*Bit 2 IOPAEN: IO port A clock enable
Set and cleared by software.
0: IO port A clock disabled
1: IO port A clock enabled

it is important for GPIOA. The GPIOA peripheral is connected to the APB2 bus,
and therefore its clock must be enabled in order to use it.The RCC_APB2ENR register is used to control the clock for GPIOA.
 If the clock for GPIOA is not enabled, you will not be able to read or write data to the GPIOA port,
 and the port will not function as expected.To use GPIOA,
 you need to set the appropriate bit in the RCC_APB2ENR register to 1, which will enable the clock for the GPIOA peripheral.
 lazm ya3ne a5le l RCC_IOPAEN enable 3l4an a5le kol l matwsl b APB2 periphales enabled
 */
void clock_Init(){
	//Enable clock IOPA EN
	RCC_APB2ENR |=RCC_IOPAEN;
	//Enable clock AFIO EN
	RCC_APB2ENR |=(1<<0);
}
void GPIOA_INIT(){
	//Init GPIOA pin13
	GPIOA_CRH &= 0xFF0FFFFF;
	GPIOA_CRH |= 0x00200000;
	//Pin A0:01: Floating input (reset state)
	GPIOA_CRL |=(1<<2);


}
void EXTI0_IRQHandler(void){
	//here IRQ is happened and EXTI0 >>>PortA pin0 rising edge
	//toggle led pin13 A 13
	GPIOA_ODR ^=(1<<13);
	//clear pending request for line 0
	EXTI_PR |=(1<<0);0

}
int main(void)
{
	clock_Init();
	GPIOA_INIT();
	//Enable EXTI line 0
	EXTI_IMR |=(1<<0);
	//enable rising trigger line 0
	EXTI_RTSR |=(1<<0);
	//EXTI0 X Configuration (x=0) 0000: PA[x] pin
	AFIO_EXTICR1 =0;
	//Enable NVIc=6 IRQ >>EXRI0
	NVIC_ISER0 |=(1<<6);
	while(1);

}
