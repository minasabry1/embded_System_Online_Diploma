
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00001166  000011fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  0080014a  0080014a  000012e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002986  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e7c  00000000  00000000  00003fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000191a  00000000  00000000  00004e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000730  00000000  00000000  00006770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cbc  00000000  00000000  00006ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001602  00000000  00000000  00007b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000915e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_10>
      2c:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 02 	call	0x4ae	; 0x4ae <main>
      8a:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
}
void LCD_lcd_kick (void){//sends a pulse to the EN pin of the LCD to initiate a data transfer.
	//Enable read at Falling(H>>L)
	LCD_Control &= ~(1<<Enable_Switch);
      92:	88 b3       	in	r24, 0x18	; 24
      94:	8f 77       	andi	r24, 0x7F	; 127
      96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      98:	83 ed       	ldi	r24, 0xD3	; 211
      9a:	90 e3       	ldi	r25, 0x30	; 48
      9c:	01 97       	sbiw	r24, 0x01	; 1
      9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_lcd_kick+0xa>
      a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_lcd_kick+0x10>
      a2:	00 00       	nop
	_delay_ms(50);
	 LCD_Control |= (1<<Enable_Switch);
      a4:	88 b3       	in	r24, 0x18	; 24
      a6:	80 68       	ori	r24, 0x80	; 128
      a8:	88 bb       	out	0x18, r24	; 24
      aa:	08 95       	ret

000000ac <LCD_check_lcd_isbusy>:



void LCD_check_lcd_isbusy(void){//checks whether the LCD is busy processing a command or data transfer.
	// initializes the LCD display with the required settings.
	LCD_Port_Direction &= ~(0xFF<<DATA_shift); //DDRA>>(INPUT)Read Mode
      ac:	8a b3       	in	r24, 0x1a	; 26
      ae:	8f 70       	andi	r24, 0x0F	; 15
      b0:	8a bb       	out	0x1a, r24	; 26
	LCD_Control |=(1<<RW_SWITCH); //RW ON
      b2:	88 b3       	in	r24, 0x18	; 24
      b4:	80 64       	ori	r24, 0x40	; 64
      b6:	88 bb       	out	0x18, r24	; 24
	LCD_Control &=~(1<<RS_SWITCH); //RS OFF
      b8:	88 b3       	in	r24, 0x18	; 24
      ba:	8f 7d       	andi	r24, 0xDF	; 223
      bc:	88 bb       	out	0x18, r24	; 24
    LCD_lcd_kick(); //Enable
      be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		#ifdef Eight_Bit_Mode
		LCD_Port_Direction |=  (0xFF<<DATA_shift);
		#endif
		
		#ifdef Four_Bit_Mode
		LCD_Port_Direction |=  (0xF0<<DATA_shift);
      c2:	8a b3       	in	r24, 0x1a	; 26
      c4:	8a bb       	out	0x1a, r24	; 26
		#endif
	//DDRA>>Output Mode
	LCD_Control &=~(1<<RW_SWITCH);//Rest
      c6:	88 b3       	in	r24, 0x18	; 24
      c8:	8f 7b       	andi	r24, 0xBF	; 191
      ca:	88 bb       	out	0x18, r24	; 24
      cc:	83 ed       	ldi	r24, 0xD3	; 211
      ce:	90 e3       	ldi	r25, 0x30	; 48
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_check_lcd_isbusy+0x24>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_check_lcd_isbusy+0x2a>
      d6:	00 00       	nop
      d8:	08 95       	ret

000000da <LCD_Send_A_Command>:
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.


}
void LCD_Send_A_Command(unsigned char command){//sends a command to the LCD display.
      da:	cf 93       	push	r28
      dc:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	#ifdef Four_Bit_Mode
		//LCD_check_lcd_isbusy();
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
      de:	8b b3       	in	r24, 0x1b	; 27
      e0:	8f 70       	andi	r24, 0x0F	; 15
      e2:	9c 2f       	mov	r25, r28
      e4:	90 7f       	andi	r25, 0xF0	; 240
      e6:	89 2b       	or	r24, r25
      e8:	8b bb       	out	0x1b, r24	; 27
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
      ea:	88 b3       	in	r24, 0x18	; 24
      ec:	8f 79       	andi	r24, 0x9F	; 159
      ee:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick ();
      f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
      f4:	87 ea       	ldi	r24, 0xA7	; 167
      f6:	91 e6       	ldi	r25, 0x61	; 97
      f8:	01 97       	sbiw	r24, 0x01	; 1
      fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_Send_A_Command+0x1e>
      fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Send_A_Command+0x24>
      fe:	00 00       	nop
		_delay_ms(100);
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
     100:	2b b3       	in	r18, 0x1b	; 27
     102:	30 e1       	ldi	r19, 0x10	; 16
     104:	c3 9f       	mul	r28, r19
     106:	c0 01       	movw	r24, r0
     108:	11 24       	eor	r1, r1
     10a:	92 2f       	mov	r25, r18
     10c:	9f 70       	andi	r25, 0x0F	; 15
     10e:	89 2b       	or	r24, r25
     110:	8b bb       	out	0x1b, r24	; 27
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
     112:	88 b3       	in	r24, 0x18	; 24
     114:	8f 79       	andi	r24, 0x9F	; 159
     116:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
     118:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif	
}
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <LCD_clear_screen>:
 *  Author: minas
 */ 
#include "LCD.h"
void LCD_clear_screen (){//clears the LCD screen.
	
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
     126:	08 95       	ret

00000128 <LCD_GOTO_XY>:
	LCD_Control &= ~(1<<Enable_Switch);
	_delay_ms(50);
	 LCD_Control |= (1<<Enable_Switch);
		
}
void LCD_GOTO_XY(unsigned char line, unsigned char position){// positions the cursor at the specified line and position on the LCD screen.
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	c8 2f       	mov	r28, r24
     12e:	d6 2f       	mov	r29, r22
	if (line == 1)
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	31 f4       	brne	.+12     	; 0x140 <LCD_GOTO_XY+0x18>
	{
		if (position < 32 && position >= 0)
     134:	60 32       	cpi	r22, 0x20	; 32
     136:	20 f4       	brcc	.+8      	; 0x140 <LCD_GOTO_XY+0x18>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW+position);
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 0f       	add	r24, r22
     13c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
		}
	}
	if (line == 2)
     140:	c2 30       	cpi	r28, 0x02	; 2
     142:	31 f4       	brne	.+12     	; 0x150 <LCD_GOTO_XY+0x28>
	{
		if (position < 32 && position >= 0)
     144:	d0 32       	cpi	r29, 0x20	; 32
     146:	20 f4       	brcc	.+8      	; 0x150 <LCD_GOTO_XY+0x28>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW+position);
     148:	80 ec       	ldi	r24, 0xC0	; 192
     14a:	8d 0f       	add	r24, r29
     14c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
		}
	}
}
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <LCD_init>:
     156:	87 e8       	ldi	r24, 0x87	; 135
     158:	93 e1       	ldi	r25, 0x13	; 19
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_init+0x4>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_init+0xa>
     160:	00 00       	nop
	_delay_ms(50);
}

void LCD_init(void){//initializes the LCD display with the required settings.
	_delay_ms(20);
	LCD_check_lcd_isbusy();
     162:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
	LCD_Control_Direction |= (1<<Enable_Switch | 1<<RW_SWITCH | 1<<RS_SWITCH);//DDRB>>OUTPUT (Enable,RS,RW)
     166:	87 b3       	in	r24, 0x17	; 23
     168:	80 6e       	ori	r24, 0xE0	; 224
     16a:	87 bb       	out	0x17, r24	; 23
	LCD_Control &= ~((1<<Enable_Switch | 1<<RS_SWITCH | 1<<RW_SWITCH));//PortB
     16c:	88 b3       	in	r24, 0x18	; 24
     16e:	8f 71       	andi	r24, 0x1F	; 31
     170:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
     172:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
     176:	85 ea       	ldi	r24, 0xA5	; 165
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_init+0x24>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_init+0x2a>
     180:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
     182:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
	
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
    #endif // Eight_Bit_Mode

	#ifdef Four_Bit_Mode
	LCD_Port_Direction |=  (0xF0<<DATA_shift);
     186:	8a b3       	in	r24, 0x1a	; 26
     188:	8a bb       	out	0x1a, r24	; 26
	LCD_Send_A_Command(0x02);
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
     190:	88 e2       	ldi	r24, 0x28	; 40
     192:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
	#endif // Eight_Bit_Mode	
	
	LCD_Send_A_Command(LCD_ENTRY_MODE);
     196:	86 e0       	ldi	r24, 0x06	; 6
     198:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
     19c:	80 e8       	ldi	r24, 0x80	; 128
     19e:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.
     1a2:	8f e0       	ldi	r24, 0x0F	; 15
     1a4:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Send_A_Command>
     1a8:	08 95       	ret

000001aa <LCD_Send_A_Character>:
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif	
}
void LCD_Send_A_Character(unsigned char character){//writes a character to the LCD display.
     1aa:	cf 93       	push	r28
     1ac:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	
    #ifdef Four_Bit_Mode
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
     1ae:	8b b3       	in	r24, 0x1b	; 27
     1b0:	8f 70       	andi	r24, 0x0F	; 15
     1b2:	9c 2f       	mov	r25, r28
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	89 2b       	or	r24, r25
     1b8:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
     1ba:	88 b3       	in	r24, 0x18	; 24
     1bc:	80 62       	ori	r24, 0x20	; 32
     1be:	88 bb       	out	0x18, r24	; 24
	LCD_Control &= ~(1<<RW_SWITCH);//turn RW off so you can write.
     1c0:	88 b3       	in	r24, 0x18	; 24
     1c2:	8f 7b       	andi	r24, 0xBF	; 191
     1c4:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
     1c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
     1ca:	2b b3       	in	r18, 0x1b	; 27
     1cc:	30 e1       	ldi	r19, 0x10	; 16
     1ce:	c3 9f       	mul	r28, r19
     1d0:	c0 01       	movw	r24, r0
     1d2:	11 24       	eor	r1, r1
     1d4:	92 2f       	mov	r25, r18
     1d6:	9f 70       	andi	r25, 0x0F	; 15
     1d8:	89 2b       	or	r24, r25
     1da:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
     1dc:	88 b3       	in	r24, 0x18	; 24
     1de:	80 62       	ori	r24, 0x20	; 32
     1e0:	88 bb       	out	0x18, r24	; 24
	LCD_Control &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
     1e2:	88 b3       	in	r24, 0x18	; 24
     1e4:	8f 7b       	andi	r24, 0xBF	; 191
     1e6:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
     1e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
	}
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <LCD_Send_A_String>:

void LCD_Send_A_String(char* string){//: writes a string of characters to the LCD display.
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	8c 01       	movw	r16, r24

	int count = 0;
     1fa:	c0 e0       	ldi	r28, 0x00	; 0
     1fc:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){// if became at end will be =0
     1fe:	18 c0       	rjmp	.+48     	; 0x230 <LCD_Send_A_String+0x40>
		count++;
     200:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_A_Character(*string++);
     202:	0f 5f       	subi	r16, 0xFF	; 255
     204:	1f 4f       	sbci	r17, 0xFF	; 255
     206:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
		if (count == 32)
     20a:	c0 32       	cpi	r28, 0x20	; 32
     20c:	d1 05       	cpc	r29, r1
     20e:	29 f4       	brne	.+10     	; 0x21a <LCD_Send_A_String+0x2a>
		{
			LCD_GOTO_XY(2,0);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
     218:	0b c0       	rjmp	.+22     	; 0x230 <LCD_Send_A_String+0x40>
		}
		else if (count == 31)
     21a:	cf 31       	cpi	r28, 0x1F	; 31
     21c:	d1 05       	cpc	r29, r1
     21e:	41 f4       	brne	.+16     	; 0x230 <LCD_Send_A_String+0x40>
		{
			LCD_clear_screen();
     220:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
			LCD_GOTO_XY(0,0);
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
			count = 0;
     22c:	c0 e0       	ldi	r28, 0x00	; 0
     22e:	d0 e0       	ldi	r29, 0x00	; 0
	}

void LCD_Send_A_String(char* string){//: writes a string of characters to the LCD display.

	int count = 0;
	while (*string > 0){// if became at end will be =0
     230:	f8 01       	movw	r30, r16
     232:	80 81       	ld	r24, Z
     234:	81 11       	cpse	r24, r1
     236:	e4 cf       	rjmp	.-56     	; 0x200 <LCD_Send_A_String+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(0,0);
			count = 0;
		}
	}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	08 95       	ret

00000242 <Recieve_Password>:

void change_Pass(void){
	for(uint8_t i=0;i<5;i++){
		array_password[i]=New_password[i];
}
}
     242:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <i.2302>
     246:	fc 01       	movw	r30, r24
     248:	e2 0f       	add	r30, r18
     24a:	f1 1d       	adc	r31, r1
     24c:	60 83       	st	Z, r22
     24e:	e7 ea       	ldi	r30, 0xA7	; 167
     250:	f1 e6       	ldi	r31, 0x61	; 97
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <Recieve_Password+0x10>
     256:	00 c0       	rjmp	.+0      	; 0x258 <Recieve_Password+0x16>
     258:	00 00       	nop
     25a:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <i.2302>
     25e:	fc 01       	movw	r30, r24
     260:	e2 0f       	add	r30, r18
     262:	f1 1d       	adc	r31, r1
     264:	80 81       	ld	r24, Z
     266:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
     26a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <i.2302>
     26e:	8f 5f       	subi	r24, 0xFF	; 255
     270:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <i.2302>
     274:	08 95       	ret

00000276 <delay>:
     276:	9c 01       	movw	r18, r24
     278:	a2 e4       	ldi	r26, 0x42	; 66
     27a:	bf e0       	ldi	r27, 0x0F	; 15
     27c:	0e 94 b8 05 	call	0xb70	; 0xb70 <__umulhisi3>
     280:	dc 01       	movw	r26, r24
     282:	cb 01       	movw	r24, r22
     284:	68 94       	set
     286:	12 f8       	bld	r1, 2
     288:	b6 95       	lsr	r27
     28a:	a7 95       	ror	r26
     28c:	97 95       	ror	r25
     28e:	87 95       	ror	r24
     290:	16 94       	lsr	r1
     292:	d1 f7       	brne	.-12     	; 0x288 <delay+0x12>
     294:	bc 01       	movw	r22, r24
     296:	12 be       	out	0x32, r1	; 50
     298:	0b c0       	rjmp	.+22     	; 0x2b0 <delay+0x3a>
     29a:	08 b6       	in	r0, 0x38	; 56
     29c:	00 fe       	sbrs	r0, 0
     29e:	05 c0       	rjmp	.+10     	; 0x2aa <delay+0x34>
     2a0:	88 b7       	in	r24, 0x38	; 56
     2a2:	81 60       	ori	r24, 0x01	; 1
     2a4:	88 bf       	out	0x38, r24	; 56
     2a6:	61 50       	subi	r22, 0x01	; 1
     2a8:	71 09       	sbc	r23, r1
     2aa:	61 15       	cp	r22, r1
     2ac:	71 05       	cpc	r23, r1
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <delay+0x40>
     2b0:	61 15       	cp	r22, r1
     2b2:	71 05       	cpc	r23, r1
     2b4:	91 f7       	brne	.-28     	; 0x29a <delay+0x24>
     2b6:	08 95       	ret

000002b8 <rotate_servo>:
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <rotate_servo+0x6>
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	71 f4       	brne	.+28     	; 0x2e4 <rotate_servo+0x2c>
     2c8:	88 e0       	ldi	r24, 0x08	; 8
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	8a 83       	std	Y+2, r24	; 0x02
     2d0:	80 e3       	ldi	r24, 0x30	; 48
     2d2:	8b 83       	std	Y+3, r24	; 0x03
     2d4:	8b e4       	ldi	r24, 0x4B	; 75
     2d6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <PWM0_SetCompare>
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 b8 04 	call	0x970	; 0x970 <PWM0_Init>
     2e2:	0d c0       	rjmp	.+26     	; 0x2fe <rotate_servo+0x46>
     2e4:	88 e0       	ldi	r24, 0x08	; 8
     2e6:	89 83       	std	Y+1, r24	; 0x01
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	8a 83       	std	Y+2, r24	; 0x02
     2ec:	80 e3       	ldi	r24, 0x30	; 48
     2ee:	8b 83       	std	Y+3, r24	; 0x03
     2f0:	8b e9       	ldi	r24, 0x9B	; 155
     2f2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <PWM0_SetCompare>
     2f6:	ce 01       	movw	r24, r28
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	0e 94 b8 04 	call	0x970	; 0x970 <PWM0_Init>
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <alram>:
     30a:	83 30       	cpi	r24, 0x03	; 3
     30c:	61 f5       	brne	.+88     	; 0x366 <alram+0x5c>
     30e:	27 c0       	rjmp	.+78     	; 0x35e <alram+0x54>
     310:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
     31c:	88 e6       	ldi	r24, 0x68	; 104
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
     324:	87 b3       	in	r24, 0x17	; 23
     326:	81 60       	ori	r24, 0x01	; 1
     328:	87 bb       	out	0x17, r24	; 23
     32a:	88 b3       	in	r24, 0x18	; 24
     32c:	81 60       	ori	r24, 0x01	; 1
     32e:	88 bb       	out	0x18, r24	; 24
     330:	2f e3       	ldi	r18, 0x3F	; 63
     332:	82 e4       	ldi	r24, 0x42	; 66
     334:	9f e0       	ldi	r25, 0x0F	; 15
     336:	21 50       	subi	r18, 0x01	; 1
     338:	80 40       	sbci	r24, 0x00	; 0
     33a:	90 40       	sbci	r25, 0x00	; 0
     33c:	e1 f7       	brne	.-8      	; 0x336 <alram+0x2c>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <alram+0x36>
     340:	00 00       	nop
     342:	88 b3       	in	r24, 0x18	; 24
     344:	8e 7f       	andi	r24, 0xFE	; 254
     346:	88 bb       	out	0x18, r24	; 24
     348:	87 ea       	ldi	r24, 0xA7	; 167
     34a:	91 e6       	ldi	r25, 0x61	; 97
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <alram+0x42>
     350:	00 c0       	rjmp	.+0      	; 0x352 <alram+0x48>
     352:	00 00       	nop
     354:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     358:	8f 5f       	subi	r24, 0xFF	; 255
     35a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
     35e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     362:	8f 30       	cpi	r24, 0x0F	; 15
     364:	a9 f6       	brne	.-86     	; 0x310 <alram+0x6>
     366:	08 95       	ret

00000368 <Compare_Password>:
     368:	dc 01       	movw	r26, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0d c0       	rjmp	.+26     	; 0x388 <Compare_Password+0x20>
     36e:	29 2f       	mov	r18, r25
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	fd 01       	movw	r30, r26
     374:	e2 0f       	add	r30, r18
     376:	f3 1f       	adc	r31, r19
     378:	50 81       	ld	r21, Z
     37a:	fb 01       	movw	r30, r22
     37c:	e2 0f       	add	r30, r18
     37e:	f3 1f       	adc	r31, r19
     380:	20 81       	ld	r18, Z
     382:	52 13       	cpse	r21, r18
     384:	05 c0       	rjmp	.+10     	; 0x390 <Compare_Password+0x28>
     386:	9f 5f       	subi	r25, 0xFF	; 255
     388:	94 17       	cp	r25, r20
     38a:	88 f3       	brcs	.-30     	; 0x36e <Compare_Password+0x6>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	01 c0       	rjmp	.+2      	; 0x392 <Compare_Password+0x2a>
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	a9 f4       	brne	.+42     	; 0x3c0 <Compare_Password+0x58>
     396:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
     3a2:	8b e7       	ldi	r24, 0x7B	; 123
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
     3aa:	2f e3       	ldi	r18, 0x3F	; 63
     3ac:	8d e0       	ldi	r24, 0x0D	; 13
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	21 50       	subi	r18, 0x01	; 1
     3b2:	80 40       	sbci	r24, 0x00	; 0
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <Compare_Password+0x48>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <Compare_Password+0x52>
     3ba:	00 00       	nop
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	08 95       	ret
     3c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3c4:	0e 94 85 01 	call	0x30a	; 0x30a <alram>
     3c8:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
     3d4:	82 e9       	ldi	r24, 0x92	; 146
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
     3dc:	87 ea       	ldi	r24, 0xA7	; 167
     3de:	91 e6       	ldi	r25, 0x61	; 97
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <Compare_Password+0x78>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <Compare_Password+0x7e>
     3e6:	00 00       	nop
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
     3f0:	88 ea       	ldi	r24, 0xA8	; 168
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
     3f8:	87 ea       	ldi	r24, 0xA7	; 167
     3fa:	91 e6       	ldi	r25, 0x61	; 97
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <Compare_Password+0x94>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	08 95       	ret

00000412 <open_door>:
     412:	cf 93       	push	r28
     414:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
     420:	89 eb       	ldi	r24, 0xB9	; 185
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rotate_servo>
     436:	c1 e0       	ldi	r28, 0x01	; 1
     438:	1f c0       	rjmp	.+62     	; 0x478 <open_door+0x66>
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 3b 01 	call	0x276	; 0x276 <delay>
     442:	1f 92       	push	r1
     444:	cf 93       	push	r28
     446:	86 ed       	ldi	r24, 0xD6	; 214
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	83 e5       	ldi	r24, 0x53	; 83
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	9f 93       	push	r25
     454:	8f 93       	push	r24
     456:	0e 94 c7 05 	call	0xb8e	; 0xb8e <sprintf>
     45a:	83 e5       	ldi	r24, 0x53	; 83
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 3b 01 	call	0x276	; 0x276 <delay>
     46a:	cf 5f       	subi	r28, 0xFF	; 255
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	c6 30       	cpi	r28, 0x06	; 6
     47a:	f8 f2       	brcs	.-66     	; 0x43a <open_door+0x28>
     47c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <PWM0_Stop>
     480:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
     48c:	89 ed       	ldi	r24, 0xD9	; 217
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rotate_servo>
     49a:	87 ea       	ldi	r24, 0xA7	; 167
     49c:	91 e6       	ldi	r25, 0x61	; 97
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <open_door+0x8c>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <open_door+0x92>
     4a4:	00 00       	nop
     4a6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <PWM0_Stop>
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <main>:


void main(void) {
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	ec 97       	sbiw	r28, 0x3c	; 60
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
	//LCD is OUTPUT
	DDRB=0xFF;
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	87 bb       	out	0x17, r24	; 23
	//LCD is OUTPUT
	DDRA=0xFF;
     4ce:	8a bb       	out	0x1a, r24	; 26
	//TX is OUTPUT
	Set_Bit(DDRD,1);
     4d0:	81 b3       	in	r24, 0x11	; 17
     4d2:	82 60       	ori	r24, 0x02	; 2
     4d4:	81 bb       	out	0x11, r24	; 17
	//RX is INPUT
	Reset_Bit(DDRD,0);
     4d6:	81 b3       	in	r24, 0x11	; 17
     4d8:	8e 7f       	andi	r24, 0xFE	; 254
     4da:	81 bb       	out	0x11, r24	; 17
	//PINS is OUTPUT TO Motor
	Set_Bit(DDRD,6);
     4dc:	81 b3       	in	r24, 0x11	; 17
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	81 bb       	out	0x11, r24	; 17

	//PINS is OUTPUT TO EEPROM
	Set_Bit(DDRB,3);
     4e2:	87 b3       	in	r24, 0x17	; 23
     4e4:	88 60       	ori	r24, 0x08	; 8
     4e6:	87 bb       	out	0x17, r24	; 23

	//PINS is OUTPUT TO BUZZER
	Set_Bit(DDRB,0);
     4e8:	87 b3       	in	r24, 0x17	; 23
     4ea:	81 60       	ori	r24, 0x01	; 1
     4ec:	87 bb       	out	0x17, r24	; 23
	uint8_t array1[10];
	uint8_t array2[10];
	uint8_t array3[20];
	uint8_t array4[20];
	
	sei(); // Enable global interrupts
     4ee:	78 94       	sei
	uint8_t key_pressed, i = 0;
	uint8_t j = 0;
	
 	Uart_init();
     4f0:	0e 94 00 05 	call	0xa00	; 0xa00 <Uart_init>
 	LCD_init();
     4f4:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_init>
	LCD_GOTO_XY(1,0);
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
	LCD_Send_A_String("Enter Password:");
     500:	84 ee       	ldi	r24, 0xE4	; 228
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
	LCD_GOTO_XY(2,0);
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
	
	//Receiving first 5 digits password from EEPROM
		for (uint8_t i=0; i < 5; i++) {
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	08 c0       	rjmp	.+16     	; 0x524 <main+0x76>
Recieve_Password(&array1,Uart_Recieve());
     514:	0e 94 19 05 	call	0xa32	; 0xa32 <Uart_Recieve>
     518:	68 2f       	mov	r22, r24
     51a:	ce 01       	movw	r24, r28
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	0e 94 21 01 	call	0x242	; 0x242 <Recieve_Password>
	LCD_GOTO_XY(1,0);
	LCD_Send_A_String("Enter Password:");
	LCD_GOTO_XY(2,0);
	
	//Receiving first 5 digits password from EEPROM
		for (uint8_t i=0; i < 5; i++) {
     522:	1f 5f       	subi	r17, 0xFF	; 255
     524:	15 30       	cpi	r17, 0x05	; 5
     526:	b0 f3       	brcs	.-20     	; 0x514 <main+0x66>
Recieve_Password(&array1,Uart_Recieve());
			}
	//Receiving Second 5 digits password from EEPROM
		LCD_clear_screen();
     528:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
		LCD_GOTO_XY(1,0);
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
		LCD_Send_A_String("Re-Enter Password:");
     534:	81 ee       	ldi	r24, 0xE1	; 225
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
		LCD_GOTO_XY(2,0);
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
		for (uint8_t i=0; i < 5; i++) {
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	14 c0       	rjmp	.+40     	; 0x570 <main+0xc2>
			array2[i] = Uart_Recieve();
     548:	e1 2e       	mov	r14, r17
     54a:	f1 2c       	mov	r15, r1
     54c:	0e 94 19 05 	call	0xa32	; 0xa32 <Uart_Recieve>
     550:	eb e0       	ldi	r30, 0x0B	; 11
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	ee 0d       	add	r30, r14
     55a:	ff 1d       	adc	r31, r15
     55c:	80 83       	st	Z, r24
     55e:	e7 ea       	ldi	r30, 0xA7	; 167
     560:	f1 e6       	ldi	r31, 0x61	; 97
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <main+0xb4>
     566:	00 c0       	rjmp	.+0      	; 0x568 <main+0xba>
     568:	00 00       	nop
			_delay_ms(100);
			LCD_Send_A_Character(array2[i]);
     56a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
	//Receiving Second 5 digits password from EEPROM
		LCD_clear_screen();
		LCD_GOTO_XY(1,0);
		LCD_Send_A_String("Re-Enter Password:");
		LCD_GOTO_XY(2,0);
		for (uint8_t i=0; i < 5; i++) {
     56e:	1f 5f       	subi	r17, 0xFF	; 255
     570:	15 30       	cpi	r17, 0x05	; 5
     572:	50 f3       	brcs	.-44     	; 0x548 <main+0x9a>
     574:	87 ea       	ldi	r24, 0xA7	; 167
     576:	91 e6       	ldi	r25, 0x61	; 97
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <main+0xca>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0xd0>
     57e:	00 00       	nop
			LCD_Send_A_Character(array2[i]);
		}
		
		
	_delay_ms(100);
	TWI_init();
     580:	0e 94 62 04 	call	0x8c4	; 0x8c4 <TWI_init>
	//Send first 5 Digits to EEPROM
	
	LCD_clear_screen();
     584:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
	char str[10];
	LCD_GOTO_XY(1,0);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
	for (uint8_t i=0; i < 5; i++,address++) {
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	1d c0       	rjmp	.+58     	; 0x5ce <main+0x120>
        EEPROM_write(address, array1[i]);
     594:	e1 e0       	ldi	r30, 0x01	; 1
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	ec 0f       	add	r30, r28
     59a:	fd 1f       	adc	r31, r29
     59c:	e1 0f       	add	r30, r17
     59e:	f1 1d       	adc	r31, r1
     5a0:	60 81       	ld	r22, Z
     5a2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <address>
     5a6:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <address+0x1>
     5aa:	0e 94 4b 04 	call	0x896	; 0x896 <EEPROM_write>
     5ae:	e3 ec       	ldi	r30, 0xC3	; 195
     5b0:	f9 e0       	ldi	r31, 0x09	; 9
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <main+0x104>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x10a>
     5b8:	00 00       	nop
	//Send first 5 Digits to EEPROM
	
	LCD_clear_screen();
	char str[10];
	LCD_GOTO_XY(1,0);
	for (uint8_t i=0; i < 5; i++,address++) {
     5ba:	1f 5f       	subi	r17, 0xFF	; 255
     5bc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <address>
     5c0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <address+0x1>
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <address+0x1>
     5ca:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <address>
     5ce:	15 30       	cpi	r17, 0x05	; 5
     5d0:	08 f3       	brcs	.-62     	; 0x594 <main+0xe6>
        EEPROM_write(address, array1[i]);
        _delay_ms(10);
	}
	
	address++;
     5d2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <address>
     5d6:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <address+0x1>
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <address+0x1>
     5e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <address>
	address2=address;
     5e4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <address2+0x1>
     5e8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <address2>
	//Send Second 5 Digits to EEPROM
	
	LCD_GOTO_XY(2,0);
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
	for (uint8_t i=0; i < 5; i++,address++) {
     5f4:	10 e0       	ldi	r17, 0x00	; 0
     5f6:	1d c0       	rjmp	.+58     	; 0x632 <main+0x184>
        EEPROM_write(address, array2[i]);
     5f8:	eb e0       	ldi	r30, 0x0B	; 11
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	ec 0f       	add	r30, r28
     5fe:	fd 1f       	adc	r31, r29
     600:	e1 0f       	add	r30, r17
     602:	f1 1d       	adc	r31, r1
     604:	60 81       	ld	r22, Z
     606:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <address>
     60a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <address+0x1>
     60e:	0e 94 4b 04 	call	0x896	; 0x896 <EEPROM_write>
     612:	83 ec       	ldi	r24, 0xC3	; 195
     614:	99 e0       	ldi	r25, 0x09	; 9
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <main+0x168>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x16e>
     61c:	00 00       	nop
	address++;
	address2=address;
	//Send Second 5 Digits to EEPROM
	
	LCD_GOTO_XY(2,0);
	for (uint8_t i=0; i < 5; i++,address++) {
     61e:	1f 5f       	subi	r17, 0xFF	; 255
     620:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <address>
     624:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <address+0x1>
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <address+0x1>
     62e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <address>
     632:	15 30       	cpi	r17, 0x05	; 5
     634:	08 f3       	brcs	.-62     	; 0x5f8 <main+0x14a>
        EEPROM_write(address, array2[i]);
        _delay_ms(10);		
	}
		//PINS is INPUT TO EEPROM
		Reset_Bit(DDRC,0);
     636:	84 b3       	in	r24, 0x14	; 20
     638:	8e 7f       	andi	r24, 0xFE	; 254
     63a:	84 bb       	out	0x14, r24	; 20
		Reset_Bit(DDRC,1);
     63c:	84 b3       	in	r24, 0x14	; 20
     63e:	8d 7f       	andi	r24, 0xFD	; 253
     640:	84 bb       	out	0x14, r24	; 20

		for (uint8_t i=0; i < 5; i++,start_address++) {
     642:	10 e0       	ldi	r17, 0x00	; 0
     644:	1f c0       	rjmp	.+62     	; 0x684 <main+0x1d6>
		array3[i]=EEPROM_read(start_address);
     646:	e1 2e       	mov	r14, r17
     648:	f1 2c       	mov	r15, r1
     64a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <start_address>
     64e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <start_address+0x1>
     652:	0e 94 59 04 	call	0x8b2	; 0x8b2 <EEPROM_read>
     656:	e5 e1       	ldi	r30, 0x15	; 21
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	ee 0d       	add	r30, r14
     660:	ff 1d       	adc	r31, r15
     662:	80 83       	st	Z, r24
     664:	e7 ea       	ldi	r30, 0xA7	; 167
     666:	f1 e6       	ldi	r31, 0x61	; 97
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <main+0x1ba>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <main+0x1c0>
     66e:	00 00       	nop
	}
		//PINS is INPUT TO EEPROM
		Reset_Bit(DDRC,0);
		Reset_Bit(DDRC,1);

		for (uint8_t i=0; i < 5; i++,start_address++) {
     670:	1f 5f       	subi	r17, 0xFF	; 255
     672:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <start_address>
     676:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <start_address+0x1>
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <start_address+0x1>
     680:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <start_address>
     684:	15 30       	cpi	r17, 0x05	; 5
     686:	f8 f2       	brcs	.-66     	; 0x646 <main+0x198>
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	1f c0       	rjmp	.+62     	; 0x6ca <main+0x21c>
	}

	
	//Send Second Password to EEPROM save to array4	
		for (uint8_t i=0; i < 5; i++,address2++) {
			array4[i]=EEPROM_read(address2);
     68c:	e1 2e       	mov	r14, r17
     68e:	f1 2c       	mov	r15, r1
     690:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <address2>
     694:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <address2+0x1>
     698:	0e 94 59 04 	call	0x8b2	; 0x8b2 <EEPROM_read>
     69c:	e9 e2       	ldi	r30, 0x29	; 41
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	ec 0f       	add	r30, r28
     6a2:	fd 1f       	adc	r31, r29
     6a4:	ee 0d       	add	r30, r14
     6a6:	ff 1d       	adc	r31, r15
     6a8:	80 83       	st	Z, r24
     6aa:	83 ec       	ldi	r24, 0xC3	; 195
     6ac:	99 e0       	ldi	r25, 0x09	; 9
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <main+0x200>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <main+0x206>
     6b4:	00 00       	nop
		_delay_ms(100);
	}

	
	//Send Second Password to EEPROM save to array4	
		for (uint8_t i=0; i < 5; i++,address2++) {
     6b6:	1f 5f       	subi	r17, 0xFF	; 255
     6b8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <address2>
     6bc:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <address2+0x1>
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <address2+0x1>
     6c6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <address2>
     6ca:	15 30       	cpi	r17, 0x05	; 5
     6cc:	f8 f2       	brcs	.-66     	; 0x68c <main+0x1de>
		
		uint8_t size = sizeof(array1) / sizeof(array1[0]);
		//Save Password At array_password.
		
		
		if(Compare_Password(array3,array4,size)==1){
     6ce:	4a e0       	ldi	r20, 0x0A	; 10
     6d0:	be 01       	movw	r22, r28
     6d2:	67 5d       	subi	r22, 0xD7	; 215
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	ce 01       	movw	r24, r28
     6d8:	45 96       	adiw	r24, 0x15	; 21
     6da:	0e 94 b4 01 	call	0x368	; 0x368 <Compare_Password>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <main+0x236>
     6e2:	cc c0       	rjmp	.+408    	; 0x87c <__stack+0x1d>
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <main+0x256>
				for(uint8_t l=0;l<5;l++){
					array_password[l]=array3[l];
     6e6:	28 2f       	mov	r18, r24
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	e5 e1       	ldi	r30, 0x15	; 21
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	ec 0f       	add	r30, r28
     6f0:	fd 1f       	adc	r31, r29
     6f2:	e2 0f       	add	r30, r18
     6f4:	f3 1f       	adc	r31, r19
     6f6:	90 81       	ld	r25, Z
     6f8:	f9 01       	movw	r30, r18
     6fa:	e3 58       	subi	r30, 0x83	; 131
     6fc:	fe 4f       	sbci	r31, 0xFE	; 254
     6fe:	90 83       	st	Z, r25
		uint8_t size = sizeof(array1) / sizeof(array1[0]);
		//Save Password At array_password.
		
		
		if(Compare_Password(array3,array4,size)==1){
				for(uint8_t l=0;l<5;l++){
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	01 c0       	rjmp	.+2      	; 0x706 <main+0x258>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	70 f3       	brcs	.-36     	; 0x6e6 <main+0x238>
     70a:	e7 ea       	ldi	r30, 0xA7	; 167
     70c:	f1 e6       	ldi	r31, 0x61	; 97
     70e:	31 97       	sbiw	r30, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <main+0x260>
     712:	00 c0       	rjmp	.+0      	; 0x714 <main+0x266>
     714:	00 00       	nop
					array_password[l]=array3[l];
				}
				_delay_ms(100);
				Uart_Send(10);
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	0e 94 15 05 	call	0xa2a	; 0xa2a <Uart_Send>
		while(1){
//Choose + or -
		LCD_clear_screen();
     71c:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
		LCD_GOTO_XY(1,0);
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
		LCD_Send_A_String("+ :Open Door");
     728:	84 ef       	ldi	r24, 0xF4	; 244
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
		LCD_GOTO_XY(2,0);
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
		LCD_Send_A_String("- :Change Password");
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
		uint8_t Step=Uart_Recieve();
     740:	0e 94 19 05 	call	0xa32	; 0xa32 <Uart_Recieve>
		
		switch (Step){
     744:	8b 32       	cpi	r24, 0x2B	; 43
     746:	19 f0       	breq	.+6      	; 0x74e <main+0x2a0>
     748:	8d 32       	cpi	r24, 0x2D	; 45
     74a:	99 f1       	breq	.+102    	; 0x7b2 <main+0x304>
     74c:	e7 cf       	rjmp	.-50     	; 0x71c <main+0x26e>
			case '+':	//Compare Passwords
				LCD_clear_screen();
     74e:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
				LCD_GOTO_XY(1,0);
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
				LCD_Send_A_String("Enter Password");
     75a:	84 e1       	ldi	r24, 0x14	; 20
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
				LCD_GOTO_XY(2,0);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
		for (uint8_t i=0; i < 5; i++) {
     76a:	f1 2c       	mov	r15, r1
     76c:	12 c0       	rjmp	.+36     	; 0x792 <main+0x2e4>
			Enter_password[i] = Uart_Recieve();
     76e:	0f 2d       	mov	r16, r15
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	0e 94 19 05 	call	0xa32	; 0xa32 <Uart_Recieve>
     776:	f8 01       	movw	r30, r16
     778:	e7 59       	subi	r30, 0x97	; 151
     77a:	fe 4f       	sbci	r31, 0xFE	; 254
     77c:	80 83       	st	Z, r24
     77e:	87 ea       	ldi	r24, 0xA7	; 167
     780:	91 e6       	ldi	r25, 0x61	; 97
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <main+0x2d4>
     786:	00 c0       	rjmp	.+0      	; 0x788 <main+0x2da>
     788:	00 00       	nop
			_delay_ms(100);
			LCD_Send_A_Character(Enter_password[i]);
     78a:	80 81       	ld	r24, Z
     78c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
			case '+':	//Compare Passwords
				LCD_clear_screen();
				LCD_GOTO_XY(1,0);
				LCD_Send_A_String("Enter Password");
				LCD_GOTO_XY(2,0);
		for (uint8_t i=0; i < 5; i++) {
     790:	f3 94       	inc	r15
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	9f 15       	cp	r25, r15
     796:	58 f7       	brcc	.-42     	; 0x76e <main+0x2c0>
			Enter_password[i] = Uart_Recieve();
			_delay_ms(100);
			LCD_Send_A_Character(Enter_password[i]);
		}
				if (Compare_Password(array_password,Enter_password,size)==1)
     798:	4a e0       	ldi	r20, 0x0A	; 10
     79a:	69 e6       	ldi	r22, 0x69	; 105
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	8d e7       	ldi	r24, 0x7D	; 125
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 b4 01 	call	0x368	; 0x368 <Compare_Password>
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	09 f0       	breq	.+2      	; 0x7ac <main+0x2fe>
     7aa:	b8 cf       	rjmp	.-144    	; 0x71c <main+0x26e>
				{
					open_door();
     7ac:	0e 94 09 02 	call	0x412	; 0x412 <open_door>
				}
				else{
					break;}	
			break;
     7b0:	b5 cf       	rjmp	.-150    	; 0x71c <main+0x26e>
			
			case '-':
			//Enter First Old Password
				LCD_clear_screen();
     7b2:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
				LCD_GOTO_XY(1,0);
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
				LCD_Send_A_String("Enter OLD Password");
     7be:	83 e2       	ldi	r24, 0x23	; 35
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
				LCD_GOTO_XY(2,0);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
				for (uint8_t i=0; i < 5; i++) {
     7ce:	f1 2c       	mov	r15, r1
     7d0:	12 c0       	rjmp	.+36     	; 0x7f6 <main+0x348>
					Enter_password[i] = Uart_Recieve();
     7d2:	0f 2d       	mov	r16, r15
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	0e 94 19 05 	call	0xa32	; 0xa32 <Uart_Recieve>
     7da:	f8 01       	movw	r30, r16
     7dc:	e7 59       	subi	r30, 0x97	; 151
     7de:	fe 4f       	sbci	r31, 0xFE	; 254
     7e0:	80 83       	st	Z, r24
     7e2:	87 ea       	ldi	r24, 0xA7	; 167
     7e4:	91 e6       	ldi	r25, 0x61	; 97
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <main+0x338>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <main+0x33e>
     7ec:	00 00       	nop
					_delay_ms(100);
					LCD_Send_A_Character(Enter_password[i]);
     7ee:	80 81       	ld	r24, Z
     7f0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
			//Enter First Old Password
				LCD_clear_screen();
				LCD_GOTO_XY(1,0);
				LCD_Send_A_String("Enter OLD Password");
				LCD_GOTO_XY(2,0);
				for (uint8_t i=0; i < 5; i++) {
     7f4:	f3 94       	inc	r15
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	9f 15       	cp	r25, r15
     7fa:	58 f7       	brcc	.-42     	; 0x7d2 <main+0x324>
					Enter_password[i] = Uart_Recieve();
					_delay_ms(100);
					LCD_Send_A_Character(Enter_password[i]);
				}			
			//Enter New Password
				LCD_clear_screen();
     7fc:	0e 94 90 00 	call	0x120	; 0x120 <LCD_clear_screen>
				LCD_GOTO_XY(1,0);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
				LCD_Send_A_String("Enter NEW Password");
     808:	86 e3       	ldi	r24, 0x36	; 54
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_Send_A_String>
				LCD_GOTO_XY(2,0);
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
				for (uint8_t i=0; i < 5; i++) {
     818:	f1 2c       	mov	r15, r1
     81a:	12 c0       	rjmp	.+36     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
					New_password[i] = Uart_Recieve();
     81c:	0f 2d       	mov	r16, r15
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	0e 94 19 05 	call	0xa32	; 0xa32 <Uart_Recieve>
     824:	f8 01       	movw	r30, r16
     826:	eb 5a       	subi	r30, 0xAB	; 171
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	80 83       	st	Z, r24
     82c:	87 ea       	ldi	r24, 0xA7	; 167
     82e:	91 e6       	ldi	r25, 0x61	; 97
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     834:	00 c0       	rjmp	.+0      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     836:	00 00       	nop
					_delay_ms(100);
					LCD_Send_A_Character(New_password[i]);
     838:	80 81       	ld	r24, Z
     83a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
			//Enter New Password
				LCD_clear_screen();
				LCD_GOTO_XY(1,0);
				LCD_Send_A_String("Enter NEW Password");
				LCD_GOTO_XY(2,0);
				for (uint8_t i=0; i < 5; i++) {
     83e:	f3 94       	inc	r15
     840:	94 e0       	ldi	r25, 0x04	; 4
     842:	9f 15       	cp	r25, r15
     844:	58 f7       	brcc	.-42     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
					New_password[i] = Uart_Recieve();
					_delay_ms(100);
					LCD_Send_A_Character(New_password[i]);
				}
				//Update array_password to New_password
				if (Compare_Password(array_password,Enter_password,size)==1)
     846:	4a e0       	ldi	r20, 0x0A	; 10
     848:	69 e6       	ldi	r22, 0x69	; 105
     84a:	71 e0       	ldi	r23, 0x01	; 1
     84c:	8d e7       	ldi	r24, 0x7D	; 125
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	0e 94 b4 01 	call	0x368	; 0x368 <Compare_Password>
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	09 f0       	breq	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	61 cf       	rjmp	.-318    	; 0x71c <main+0x26e>
     85a:	0c c0       	rjmp	.+24     	; 0x874 <__stack+0x15>
				{
				for(uint8_t i=0;i<5;i++){
					array_password[i]=New_password[i];
     85c:	82 2f       	mov	r24, r18
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	fc 01       	movw	r30, r24
     862:	eb 5a       	subi	r30, 0xAB	; 171
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	30 81       	ld	r19, Z
     868:	fc 01       	movw	r30, r24
     86a:	e3 58       	subi	r30, 0x83	; 131
     86c:	fe 4f       	sbci	r31, 0xFE	; 254
     86e:	30 83       	st	Z, r19
					LCD_Send_A_Character(New_password[i]);
				}
				//Update array_password to New_password
				if (Compare_Password(array_password,Enter_password,size)==1)
				{
				for(uint8_t i=0;i<5;i++){
     870:	2f 5f       	subi	r18, 0xFF	; 255
     872:	01 c0       	rjmp	.+2      	; 0x876 <__stack+0x17>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	25 30       	cpi	r18, 0x05	; 5
     878:	88 f3       	brcs	.-30     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     87a:	50 cf       	rjmp	.-352    	; 0x71c <main+0x26e>

				
		}
 		}
		}
     87c:	ec 96       	adiw	r28, 0x3c	; 60
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	08 95       	ret

00000896 <EEPROM_write>:
static void (*eeprom_rdy_fPtr)(void) = NULLPTR;

void EEPROM_write(const uint16_t address, const uint8_t data)
{
    /* Wait for completion of previous write */
    while (1 == Read_Bit(EECR, EEWE));
     896:	e1 99       	sbic	0x1c, 1	; 28
     898:	fe cf       	rjmp	.-4      	; 0x896 <EEPROM_write>

    /* Set up address and data registers */
    EEAR = address;
     89a:	9f bb       	out	0x1f, r25	; 31
     89c:	8e bb       	out	0x1e, r24	; 30
    EEDR = data;
     89e:	6d bb       	out	0x1d, r22	; 29

    /* disable global interrupt */
    cli();
     8a0:	f8 94       	cli

    /* Write logical one to EEMWE */
    Set_Bit(EECR, EEMWE);
     8a2:	8c b3       	in	r24, 0x1c	; 28
     8a4:	84 60       	ori	r24, 0x04	; 4
     8a6:	8c bb       	out	0x1c, r24	; 28

    /* Start EEPROM write by setting EEWE--> must be done withing four clock cycles
    *  after setting EEMWE so I use cli() and sei() 
    */
    Set_Bit(EECR, EEWE);
     8a8:	8c b3       	in	r24, 0x1c	; 28
     8aa:	82 60       	ori	r24, 0x02	; 2
     8ac:	8c bb       	out	0x1c, r24	; 28

    /* enable global interrupt */
    sei();
     8ae:	78 94       	sei
     8b0:	08 95       	ret

000008b2 <EEPROM_read>:
}

uint8_t EEPROM_read(const uint16_t address)
{
    /* Wait for completion of previous write */
    while (1 == Read_Bit(EECR, EEWE));
     8b2:	e1 99       	sbic	0x1c, 1	; 28
     8b4:	fe cf       	rjmp	.-4      	; 0x8b2 <EEPROM_read>

    /* Set up address register */
    EEAR = address;
     8b6:	9f bb       	out	0x1f, r25	; 31
     8b8:	8e bb       	out	0x1e, r24	; 30

    /* Start EEPROM read by writing EERE */
    Set_Bit(EECR, EERE);
     8ba:	8c b3       	in	r24, 0x1c	; 28
     8bc:	81 60       	ori	r24, 0x01	; 1
     8be:	8c bb       	out	0x1c, r24	; 28

    /* Return data from data register */
    return EEDR;
     8c0:	8d b3       	in	r24, 0x1d	; 29
}
     8c2:	08 95       	ret

000008c4 <TWI_init>:

void TWI_init(void)
{
    /* Bit Rate: 200.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
   // TWBR = 0xC8;
	TWBR = 32; // For F_CPU = 8 MHz and prescaler = 1, TWBR = 32 gives 100 kHz SCL frequency
     8c4:	80 e2       	ldi	r24, 0x20	; 32
     8c6:	80 b9       	out	0x00, r24	; 0
    TWSR = 0x00;
     8c8:	11 b8       	out	0x01, r1	; 1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    //TWAR = 0b00000010; // my address = 0x01 :)
	TWAR = 0b10100000; // Set slave address to 0x01
     8ca:	80 ea       	ldi	r24, 0xA0	; 160
     8cc:	83 b9       	out	0x03, r24	; 3
	//TWAR = (0x50 << 1); 

    TWCR = (1 << TWEN); /* enable TWI */
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	86 bf       	out	0x36, r24	; 54
     8d2:	08 95       	ret

000008d4 <__vector_10>:
	CALLBACK_COMPARE=callback;
	return Value;
}

ISR(TIMER0_COMP_vect)
{
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
//	Over_Flow_Number++;
	CALLBACK_COMPARE();
     8f6:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <CALLBACK_COMPARE>
     8fa:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <CALLBACK_COMPARE+0x1>
     8fe:	09 95       	icall
}
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
	//Over_Flow_Number++;
	CALLBACK_OVER_FLOW();
     944:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <CALLBACK_OVER_FLOW>
     948:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <CALLBACK_OVER_FLOW+0x1>
     94c:	09 95       	icall
}
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <PWM0_Init>:
	
void PWM0_GetCompare(unsigned char* TicksNumber){
	/*The Output Compare Register contains an 8-bit value that is continuously compared with the
	counter value (TCNT0). A match can be used to generate an output compare interrupt, or to
	generate a waveform output on the OC0 pin*/
*TicksNumber=OCR0; 
     970:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <PWM_Global_configuartion+0x1>
     974:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <PWM_Global_configuartion>
     978:	fc 01       	movw	r30, r24
     97a:	80 81       	ld	r24, Z
     97c:	80 34       	cpi	r24, 0x40	; 64
     97e:	11 f0       	breq	.+4      	; 0x984 <PWM0_Init+0x14>
     980:	88 30       	cpi	r24, 0x08	; 8
     982:	79 f4       	brne	.+30     	; 0x9a2 <PWM0_Init+0x32>
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	39 f4       	brne	.+14     	; 0x996 <PWM0_Init+0x26>
     988:	83 b7       	in	r24, 0x33	; 51
     98a:	80 64       	ori	r24, 0x40	; 64
     98c:	83 bf       	out	0x33, r24	; 51
     98e:	83 b7       	in	r24, 0x33	; 51
     990:	88 60       	ori	r24, 0x08	; 8
     992:	83 bf       	out	0x33, r24	; 51
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <PWM0_Init+0x32>
     996:	83 b7       	in	r24, 0x33	; 51
     998:	80 64       	ori	r24, 0x40	; 64
     99a:	83 bf       	out	0x33, r24	; 51
     99c:	83 b7       	in	r24, 0x33	; 51
     99e:	87 7f       	andi	r24, 0xF7	; 247
     9a0:	83 bf       	out	0x33, r24	; 51
     9a2:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <PWM_Global_configuartion>
     9a6:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <PWM_Global_configuartion+0x1>
     9aa:	81 81       	ldd	r24, Z+1	; 0x01
     9ac:	88 30       	cpi	r24, 0x08	; 8
     9ae:	18 f4       	brcc	.+6      	; 0x9b6 <PWM0_Init+0x46>
     9b0:	93 b7       	in	r25, 0x33	; 51
     9b2:	89 2b       	or	r24, r25
     9b4:	83 bf       	out	0x33, r24	; 51
     9b6:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <PWM_Global_configuartion>
     9ba:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <PWM_Global_configuartion+0x1>
     9be:	82 81       	ldd	r24, Z+2	; 0x02
     9c0:	80 33       	cpi	r24, 0x30	; 48
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <PWM0_Init+0x58>
     9c4:	80 31       	cpi	r24, 0x10	; 16
     9c6:	79 f4       	brne	.+30     	; 0x9e6 <PWM0_Init+0x76>
     9c8:	80 33       	cpi	r24, 0x30	; 48
     9ca:	39 f4       	brne	.+14     	; 0x9da <PWM0_Init+0x6a>
     9cc:	83 b7       	in	r24, 0x33	; 51
     9ce:	80 61       	ori	r24, 0x10	; 16
     9d0:	83 bf       	out	0x33, r24	; 51
     9d2:	83 b7       	in	r24, 0x33	; 51
     9d4:	80 62       	ori	r24, 0x20	; 32
     9d6:	83 bf       	out	0x33, r24	; 51
     9d8:	08 95       	ret
     9da:	83 b7       	in	r24, 0x33	; 51
     9dc:	8f 7e       	andi	r24, 0xEF	; 239
     9de:	83 bf       	out	0x33, r24	; 51
     9e0:	83 b7       	in	r24, 0x33	; 51
     9e2:	80 62       	ori	r24, 0x20	; 32
     9e4:	83 bf       	out	0x33, r24	; 51
     9e6:	08 95       	ret

000009e8 <PWM0_Stop>:
     9e8:	83 b7       	in	r24, 0x33	; 51
     9ea:	8e 7f       	andi	r24, 0xFE	; 254
     9ec:	83 bf       	out	0x33, r24	; 51
     9ee:	83 b7       	in	r24, 0x33	; 51
     9f0:	8d 7f       	andi	r24, 0xFD	; 253
     9f2:	83 bf       	out	0x33, r24	; 51
     9f4:	83 b7       	in	r24, 0x33	; 51
     9f6:	8b 7f       	andi	r24, 0xFB	; 251
     9f8:	83 bf       	out	0x33, r24	; 51
     9fa:	08 95       	ret

000009fc <PWM0_SetCompare>:
}

void PWM0_SetCompare(uint8_t TicksNumber){

	OCR0=TicksNumber;
     9fc:	8c bf       	out	0x3c, r24	; 60
     9fe:	08 95       	ret

00000a00 <Uart_init>:

void UART_Receive_String_Asyn(void){
	if (flag_receive ==1){
		flag_receive=0;
		RX_STR=data;
		UartRX_Interrupt_Enable();
     a00:	83 e3       	ldi	r24, 0x33	; 51
     a02:	89 b9       	out	0x09, r24	; 9
     a04:	8b b1       	in	r24, 0x0b	; 11
     a06:	8d 7f       	andi	r24, 0xFD	; 253
     a08:	8b b9       	out	0x0b, r24	; 11
     a0a:	80 b5       	in	r24, 0x20	; 32
     a0c:	84 60       	ori	r24, 0x04	; 4
     a0e:	80 bd       	out	0x20, r24	; 32
     a10:	80 b5       	in	r24, 0x20	; 32
     a12:	82 60       	ori	r24, 0x02	; 2
     a14:	80 bd       	out	0x20, r24	; 32
     a16:	8a b1       	in	r24, 0x0a	; 10
     a18:	8b 7f       	andi	r24, 0xFB	; 251
     a1a:	8a b9       	out	0x0a, r24	; 10
     a1c:	8a b1       	in	r24, 0x0a	; 10
     a1e:	88 60       	ori	r24, 0x08	; 8
     a20:	8a b9       	out	0x0a, r24	; 10
     a22:	8a b1       	in	r24, 0x0a	; 10
     a24:	80 61       	ori	r24, 0x10	; 16
     a26:	8a b9       	out	0x0a, r24	; 10
     a28:	08 95       	ret

00000a2a <Uart_Send>:
     a2a:	5d 9b       	sbis	0x0b, 5	; 11
     a2c:	fe cf       	rjmp	.-4      	; 0xa2a <Uart_Send>
     a2e:	8c b9       	out	0x0c, r24	; 12
     a30:	08 95       	ret

00000a32 <Uart_Recieve>:
     a32:	5f 9b       	sbis	0x0b, 7	; 11
     a34:	fe cf       	rjmp	.-4      	; 0xa32 <Uart_Recieve>
     a36:	8c b1       	in	r24, 0x0c	; 12
     a38:	08 95       	ret

00000a3a <Send_NoBlock>:
     a3a:	8c b9       	out	0x0c, r24	; 12
     a3c:	08 95       	ret

00000a3e <Receive_NoBlock>:
     a3e:	8c b1       	in	r24, 0x0c	; 12
     a40:	08 95       	ret

00000a42 <UartRX_Interrupt_Disable>:
     a42:	8a b1       	in	r24, 0x0a	; 10
     a44:	8f 77       	andi	r24, 0x7F	; 127
     a46:	8a b9       	out	0x0a, r24	; 10
     a48:	08 95       	ret

00000a4a <__vector_15>:
}

//if UDR Transimeted then flag will be on

ISR(USART_TXC_vect)
{
     a4a:	1f 92       	push	r1
     a4c:	0f 92       	push	r0
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	0f 92       	push	r0
     a52:	11 24       	eor	r1, r1
     a54:	2f 93       	push	r18
     a56:	3f 93       	push	r19
     a58:	4f 93       	push	r20
     a5a:	5f 93       	push	r21
     a5c:	6f 93       	push	r22
     a5e:	7f 93       	push	r23
     a60:	8f 93       	push	r24
     a62:	9f 93       	push	r25
     a64:	af 93       	push	r26
     a66:	bf 93       	push	r27
     a68:	ef 93       	push	r30
     a6a:	ff 93       	push	r31
	// USART transmission complete interrupt handler
	// Perform some additional processing or initiate another transmission
	static uint8_t i =1;
	if (TX_STR[i] !=0)
     a6c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <i.2215>
     a70:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TX_STR>
     a74:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <TX_STR+0x1>
     a78:	e8 0f       	add	r30, r24
     a7a:	f1 1d       	adc	r31, r1
     a7c:	80 81       	ld	r24, Z
     a7e:	88 23       	and	r24, r24
     a80:	41 f0       	breq	.+16     	; 0xa92 <__vector_15+0x48>
	{
		Send_NoBlock(TX_STR[i]);
     a82:	0e 94 1d 05 	call	0xa3a	; 0xa3a <Send_NoBlock>
		i++;
     a86:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <i.2215>
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <i.2215>
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <__vector_15+0x52>
	}
	else{
		i=1;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <i.2215>
		flag_send=1;
     a98:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flag_send>
	}
}
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_13>:

ISR(USART_RXC_vect){
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
	cli();
     ae4:	f8 94       	cli
	static uint8_t i =0;
	RX_STR[i] =Receive_NoBlock();
     ae6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <i.2221>
     aea:	c0 91 4f 01 	lds	r28, 0x014F	; 0x80014f <RX_STR>
     aee:	d0 91 50 01 	lds	r29, 0x0150	; 0x800150 <RX_STR+0x1>
     af2:	c8 0f       	add	r28, r24
     af4:	d1 1d       	adc	r29, r1
     af6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <Receive_NoBlock>
     afa:	88 83       	st	Y, r24
	LCD_GOTO_XY(2,i);
     afc:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <i.2221>
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	0e 94 94 00 	call	0x128	; 0x128 <LCD_GOTO_XY>
	LCD_Send_A_Character(RX_STR[i]);
     b06:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <i.2221>
     b0a:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <RX_STR>
     b0e:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <RX_STR+0x1>
     b12:	e8 0f       	add	r30, r24
     b14:	f1 1d       	adc	r31, r1
     b16:	80 81       	ld	r24, Z
     b18:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Send_A_Character>
	
	if(RX_STR[i] == Default_Stop){
     b1c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <i.2221>
     b20:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <RX_STR>
     b24:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <RX_STR+0x1>
     b28:	e8 0f       	add	r30, r24
     b2a:	f1 1d       	adc	r31, r1
     b2c:	80 81       	ld	r24, Z
     b2e:	8d 30       	cpi	r24, 0x0D	; 13
     b30:	31 f4       	brne	.+12     	; 0xb3e <__vector_13+0x80>
		RX_STR[i] = '\0';
     b32:	10 82       	st	Z, r1
		flag_receive=1    ;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag_receive>
		UartRX_Interrupt_Disable();
     b3a:	0e 94 21 05 	call	0xa42	; 0xa42 <UartRX_Interrupt_Disable>
		
	}
	i++;
     b3e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <i.2221>
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <i.2221>
	sei();
     b48:	78 94       	sei
}
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	7f 91       	pop	r23
     b5c:	6f 91       	pop	r22
     b5e:	5f 91       	pop	r21
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__umulhisi3>:
     b70:	a2 9f       	mul	r26, r18
     b72:	b0 01       	movw	r22, r0
     b74:	b3 9f       	mul	r27, r19
     b76:	c0 01       	movw	r24, r0
     b78:	a3 9f       	mul	r26, r19
     b7a:	70 0d       	add	r23, r0
     b7c:	81 1d       	adc	r24, r1
     b7e:	11 24       	eor	r1, r1
     b80:	91 1d       	adc	r25, r1
     b82:	b2 9f       	mul	r27, r18
     b84:	70 0d       	add	r23, r0
     b86:	81 1d       	adc	r24, r1
     b88:	11 24       	eor	r1, r1
     b8a:	91 1d       	adc	r25, r1
     b8c:	08 95       	ret

00000b8e <sprintf>:
     b8e:	ae e0       	ldi	r26, 0x0E	; 14
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ed ec       	ldi	r30, 0xCD	; 205
     b94:	f5 e0       	ldi	r31, 0x05	; 5
     b96:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__prologue_saves__+0x1c>
     b9a:	0d 89       	ldd	r16, Y+21	; 0x15
     b9c:	1e 89       	ldd	r17, Y+22	; 0x16
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	8c 83       	std	Y+4, r24	; 0x04
     ba2:	1a 83       	std	Y+2, r17	; 0x02
     ba4:	09 83       	std	Y+1, r16	; 0x01
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	9f e7       	ldi	r25, 0x7F	; 127
     baa:	9e 83       	std	Y+6, r25	; 0x06
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	ae 01       	movw	r20, r28
     bb0:	47 5e       	subi	r20, 0xE7	; 231
     bb2:	5f 4f       	sbci	r21, 0xFF	; 255
     bb4:	6f 89       	ldd	r22, Y+23	; 0x17
     bb6:	78 8d       	ldd	r23, Y+24	; 0x18
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vfprintf>
     bc0:	ef 81       	ldd	r30, Y+7	; 0x07
     bc2:	f8 85       	ldd	r31, Y+8	; 0x08
     bc4:	e0 0f       	add	r30, r16
     bc6:	f1 1f       	adc	r31, r17
     bc8:	10 82       	st	Z, r1
     bca:	2e 96       	adiw	r28, 0x0e	; 14
     bcc:	e4 e0       	ldi	r30, 0x04	; 4
     bce:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__epilogue_restores__+0x1c>

00000bd2 <vfprintf>:
     bd2:	ab e0       	ldi	r26, 0x0B	; 11
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ef ee       	ldi	r30, 0xEF	; 239
     bd8:	f5 e0       	ldi	r31, 0x05	; 5
     bda:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__prologue_saves__>
     bde:	6c 01       	movw	r12, r24
     be0:	7b 01       	movw	r14, r22
     be2:	8a 01       	movw	r16, r20
     be4:	fc 01       	movw	r30, r24
     be6:	17 82       	std	Z+7, r1	; 0x07
     be8:	16 82       	std	Z+6, r1	; 0x06
     bea:	83 81       	ldd	r24, Z+3	; 0x03
     bec:	81 ff       	sbrs	r24, 1
     bee:	cc c1       	rjmp	.+920    	; 0xf88 <vfprintf+0x3b6>
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	3c 01       	movw	r6, r24
     bf6:	f6 01       	movw	r30, r12
     bf8:	93 81       	ldd	r25, Z+3	; 0x03
     bfa:	f7 01       	movw	r30, r14
     bfc:	93 fd       	sbrc	r25, 3
     bfe:	85 91       	lpm	r24, Z+
     c00:	93 ff       	sbrs	r25, 3
     c02:	81 91       	ld	r24, Z+
     c04:	7f 01       	movw	r14, r30
     c06:	88 23       	and	r24, r24
     c08:	09 f4       	brne	.+2      	; 0xc0c <vfprintf+0x3a>
     c0a:	ba c1       	rjmp	.+884    	; 0xf80 <vfprintf+0x3ae>
     c0c:	85 32       	cpi	r24, 0x25	; 37
     c0e:	39 f4       	brne	.+14     	; 0xc1e <vfprintf+0x4c>
     c10:	93 fd       	sbrc	r25, 3
     c12:	85 91       	lpm	r24, Z+
     c14:	93 ff       	sbrs	r25, 3
     c16:	81 91       	ld	r24, Z+
     c18:	7f 01       	movw	r14, r30
     c1a:	85 32       	cpi	r24, 0x25	; 37
     c1c:	29 f4       	brne	.+10     	; 0xc28 <vfprintf+0x56>
     c1e:	b6 01       	movw	r22, r12
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     c26:	e7 cf       	rjmp	.-50     	; 0xbf6 <vfprintf+0x24>
     c28:	91 2c       	mov	r9, r1
     c2a:	21 2c       	mov	r2, r1
     c2c:	31 2c       	mov	r3, r1
     c2e:	ff e1       	ldi	r31, 0x1F	; 31
     c30:	f3 15       	cp	r31, r3
     c32:	d8 f0       	brcs	.+54     	; 0xc6a <vfprintf+0x98>
     c34:	8b 32       	cpi	r24, 0x2B	; 43
     c36:	79 f0       	breq	.+30     	; 0xc56 <vfprintf+0x84>
     c38:	38 f4       	brcc	.+14     	; 0xc48 <vfprintf+0x76>
     c3a:	80 32       	cpi	r24, 0x20	; 32
     c3c:	79 f0       	breq	.+30     	; 0xc5c <vfprintf+0x8a>
     c3e:	83 32       	cpi	r24, 0x23	; 35
     c40:	a1 f4       	brne	.+40     	; 0xc6a <vfprintf+0x98>
     c42:	23 2d       	mov	r18, r3
     c44:	20 61       	ori	r18, 0x10	; 16
     c46:	1d c0       	rjmp	.+58     	; 0xc82 <vfprintf+0xb0>
     c48:	8d 32       	cpi	r24, 0x2D	; 45
     c4a:	61 f0       	breq	.+24     	; 0xc64 <vfprintf+0x92>
     c4c:	80 33       	cpi	r24, 0x30	; 48
     c4e:	69 f4       	brne	.+26     	; 0xc6a <vfprintf+0x98>
     c50:	23 2d       	mov	r18, r3
     c52:	21 60       	ori	r18, 0x01	; 1
     c54:	16 c0       	rjmp	.+44     	; 0xc82 <vfprintf+0xb0>
     c56:	83 2d       	mov	r24, r3
     c58:	82 60       	ori	r24, 0x02	; 2
     c5a:	38 2e       	mov	r3, r24
     c5c:	e3 2d       	mov	r30, r3
     c5e:	e4 60       	ori	r30, 0x04	; 4
     c60:	3e 2e       	mov	r3, r30
     c62:	2a c0       	rjmp	.+84     	; 0xcb8 <vfprintf+0xe6>
     c64:	f3 2d       	mov	r31, r3
     c66:	f8 60       	ori	r31, 0x08	; 8
     c68:	1d c0       	rjmp	.+58     	; 0xca4 <vfprintf+0xd2>
     c6a:	37 fc       	sbrc	r3, 7
     c6c:	2d c0       	rjmp	.+90     	; 0xcc8 <vfprintf+0xf6>
     c6e:	20 ed       	ldi	r18, 0xD0	; 208
     c70:	28 0f       	add	r18, r24
     c72:	2a 30       	cpi	r18, 0x0A	; 10
     c74:	40 f0       	brcs	.+16     	; 0xc86 <vfprintf+0xb4>
     c76:	8e 32       	cpi	r24, 0x2E	; 46
     c78:	b9 f4       	brne	.+46     	; 0xca8 <vfprintf+0xd6>
     c7a:	36 fc       	sbrc	r3, 6
     c7c:	81 c1       	rjmp	.+770    	; 0xf80 <vfprintf+0x3ae>
     c7e:	23 2d       	mov	r18, r3
     c80:	20 64       	ori	r18, 0x40	; 64
     c82:	32 2e       	mov	r3, r18
     c84:	19 c0       	rjmp	.+50     	; 0xcb8 <vfprintf+0xe6>
     c86:	36 fe       	sbrs	r3, 6
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <vfprintf+0xc4>
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	98 9e       	mul	r9, r24
     c8e:	20 0d       	add	r18, r0
     c90:	11 24       	eor	r1, r1
     c92:	92 2e       	mov	r9, r18
     c94:	11 c0       	rjmp	.+34     	; 0xcb8 <vfprintf+0xe6>
     c96:	ea e0       	ldi	r30, 0x0A	; 10
     c98:	2e 9e       	mul	r2, r30
     c9a:	20 0d       	add	r18, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	22 2e       	mov	r2, r18
     ca0:	f3 2d       	mov	r31, r3
     ca2:	f0 62       	ori	r31, 0x20	; 32
     ca4:	3f 2e       	mov	r3, r31
     ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <vfprintf+0xe6>
     ca8:	8c 36       	cpi	r24, 0x6C	; 108
     caa:	21 f4       	brne	.+8      	; 0xcb4 <vfprintf+0xe2>
     cac:	83 2d       	mov	r24, r3
     cae:	80 68       	ori	r24, 0x80	; 128
     cb0:	38 2e       	mov	r3, r24
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0xe6>
     cb4:	88 36       	cpi	r24, 0x68	; 104
     cb6:	41 f4       	brne	.+16     	; 0xcc8 <vfprintf+0xf6>
     cb8:	f7 01       	movw	r30, r14
     cba:	93 fd       	sbrc	r25, 3
     cbc:	85 91       	lpm	r24, Z+
     cbe:	93 ff       	sbrs	r25, 3
     cc0:	81 91       	ld	r24, Z+
     cc2:	7f 01       	movw	r14, r30
     cc4:	81 11       	cpse	r24, r1
     cc6:	b3 cf       	rjmp	.-154    	; 0xc2e <vfprintf+0x5c>
     cc8:	98 2f       	mov	r25, r24
     cca:	9f 7d       	andi	r25, 0xDF	; 223
     ccc:	95 54       	subi	r25, 0x45	; 69
     cce:	93 30       	cpi	r25, 0x03	; 3
     cd0:	28 f4       	brcc	.+10     	; 0xcdc <vfprintf+0x10a>
     cd2:	0c 5f       	subi	r16, 0xFC	; 252
     cd4:	1f 4f       	sbci	r17, 0xFF	; 255
     cd6:	9f e3       	ldi	r25, 0x3F	; 63
     cd8:	99 83       	std	Y+1, r25	; 0x01
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <vfprintf+0x124>
     cdc:	83 36       	cpi	r24, 0x63	; 99
     cde:	31 f0       	breq	.+12     	; 0xcec <vfprintf+0x11a>
     ce0:	83 37       	cpi	r24, 0x73	; 115
     ce2:	71 f0       	breq	.+28     	; 0xd00 <vfprintf+0x12e>
     ce4:	83 35       	cpi	r24, 0x53	; 83
     ce6:	09 f0       	breq	.+2      	; 0xcea <vfprintf+0x118>
     ce8:	59 c0       	rjmp	.+178    	; 0xd9c <vfprintf+0x1ca>
     cea:	21 c0       	rjmp	.+66     	; 0xd2e <vfprintf+0x15c>
     cec:	f8 01       	movw	r30, r16
     cee:	80 81       	ld	r24, Z
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	0e 5f       	subi	r16, 0xFE	; 254
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	88 24       	eor	r8, r8
     cf8:	83 94       	inc	r8
     cfa:	91 2c       	mov	r9, r1
     cfc:	53 01       	movw	r10, r6
     cfe:	13 c0       	rjmp	.+38     	; 0xd26 <vfprintf+0x154>
     d00:	28 01       	movw	r4, r16
     d02:	f2 e0       	ldi	r31, 0x02	; 2
     d04:	4f 0e       	add	r4, r31
     d06:	51 1c       	adc	r5, r1
     d08:	f8 01       	movw	r30, r16
     d0a:	a0 80       	ld	r10, Z
     d0c:	b1 80       	ldd	r11, Z+1	; 0x01
     d0e:	36 fe       	sbrs	r3, 6
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <vfprintf+0x146>
     d12:	69 2d       	mov	r22, r9
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0x14a>
     d18:	6f ef       	ldi	r22, 0xFF	; 255
     d1a:	7f ef       	ldi	r23, 0xFF	; 255
     d1c:	c5 01       	movw	r24, r10
     d1e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <strnlen>
     d22:	4c 01       	movw	r8, r24
     d24:	82 01       	movw	r16, r4
     d26:	f3 2d       	mov	r31, r3
     d28:	ff 77       	andi	r31, 0x7F	; 127
     d2a:	3f 2e       	mov	r3, r31
     d2c:	16 c0       	rjmp	.+44     	; 0xd5a <vfprintf+0x188>
     d2e:	28 01       	movw	r4, r16
     d30:	22 e0       	ldi	r18, 0x02	; 2
     d32:	42 0e       	add	r4, r18
     d34:	51 1c       	adc	r5, r1
     d36:	f8 01       	movw	r30, r16
     d38:	a0 80       	ld	r10, Z
     d3a:	b1 80       	ldd	r11, Z+1	; 0x01
     d3c:	36 fe       	sbrs	r3, 6
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <vfprintf+0x174>
     d40:	69 2d       	mov	r22, r9
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0x178>
     d46:	6f ef       	ldi	r22, 0xFF	; 255
     d48:	7f ef       	ldi	r23, 0xFF	; 255
     d4a:	c5 01       	movw	r24, r10
     d4c:	0e 94 ca 07 	call	0xf94	; 0xf94 <strnlen_P>
     d50:	4c 01       	movw	r8, r24
     d52:	f3 2d       	mov	r31, r3
     d54:	f0 68       	ori	r31, 0x80	; 128
     d56:	3f 2e       	mov	r3, r31
     d58:	82 01       	movw	r16, r4
     d5a:	33 fc       	sbrc	r3, 3
     d5c:	1b c0       	rjmp	.+54     	; 0xd94 <vfprintf+0x1c2>
     d5e:	82 2d       	mov	r24, r2
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 16       	cp	r8, r24
     d64:	99 06       	cpc	r9, r25
     d66:	b0 f4       	brcc	.+44     	; 0xd94 <vfprintf+0x1c2>
     d68:	b6 01       	movw	r22, r12
     d6a:	80 e2       	ldi	r24, 0x20	; 32
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     d72:	2a 94       	dec	r2
     d74:	f4 cf       	rjmp	.-24     	; 0xd5e <vfprintf+0x18c>
     d76:	f5 01       	movw	r30, r10
     d78:	37 fc       	sbrc	r3, 7
     d7a:	85 91       	lpm	r24, Z+
     d7c:	37 fe       	sbrs	r3, 7
     d7e:	81 91       	ld	r24, Z+
     d80:	5f 01       	movw	r10, r30
     d82:	b6 01       	movw	r22, r12
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     d8a:	21 10       	cpse	r2, r1
     d8c:	2a 94       	dec	r2
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	82 1a       	sub	r8, r18
     d92:	91 08       	sbc	r9, r1
     d94:	81 14       	cp	r8, r1
     d96:	91 04       	cpc	r9, r1
     d98:	71 f7       	brne	.-36     	; 0xd76 <vfprintf+0x1a4>
     d9a:	e8 c0       	rjmp	.+464    	; 0xf6c <vfprintf+0x39a>
     d9c:	84 36       	cpi	r24, 0x64	; 100
     d9e:	11 f0       	breq	.+4      	; 0xda4 <vfprintf+0x1d2>
     da0:	89 36       	cpi	r24, 0x69	; 105
     da2:	41 f5       	brne	.+80     	; 0xdf4 <vfprintf+0x222>
     da4:	f8 01       	movw	r30, r16
     da6:	37 fe       	sbrs	r3, 7
     da8:	07 c0       	rjmp	.+14     	; 0xdb8 <vfprintf+0x1e6>
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	82 81       	ldd	r24, Z+2	; 0x02
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	0c 5f       	subi	r16, 0xFC	; 252
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <vfprintf+0x1f6>
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	07 2e       	mov	r0, r23
     dbe:	00 0c       	add	r0, r0
     dc0:	88 0b       	sbc	r24, r24
     dc2:	99 0b       	sbc	r25, r25
     dc4:	0e 5f       	subi	r16, 0xFE	; 254
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	f3 2d       	mov	r31, r3
     dca:	ff 76       	andi	r31, 0x6F	; 111
     dcc:	3f 2e       	mov	r3, r31
     dce:	97 ff       	sbrs	r25, 7
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <vfprintf+0x212>
     dd2:	90 95       	com	r25
     dd4:	80 95       	com	r24
     dd6:	70 95       	com	r23
     dd8:	61 95       	neg	r22
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	f0 68       	ori	r31, 0x80	; 128
     de2:	3f 2e       	mov	r3, r31
     de4:	2a e0       	ldi	r18, 0x0A	; 10
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	a3 01       	movw	r20, r6
     dea:	0e 94 1c 08 	call	0x1038	; 0x1038 <__ultoa_invert>
     dee:	88 2e       	mov	r8, r24
     df0:	86 18       	sub	r8, r6
     df2:	45 c0       	rjmp	.+138    	; 0xe7e <vfprintf+0x2ac>
     df4:	85 37       	cpi	r24, 0x75	; 117
     df6:	31 f4       	brne	.+12     	; 0xe04 <vfprintf+0x232>
     df8:	23 2d       	mov	r18, r3
     dfa:	2f 7e       	andi	r18, 0xEF	; 239
     dfc:	b2 2e       	mov	r11, r18
     dfe:	2a e0       	ldi	r18, 0x0A	; 10
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	25 c0       	rjmp	.+74     	; 0xe4e <vfprintf+0x27c>
     e04:	93 2d       	mov	r25, r3
     e06:	99 7f       	andi	r25, 0xF9	; 249
     e08:	b9 2e       	mov	r11, r25
     e0a:	8f 36       	cpi	r24, 0x6F	; 111
     e0c:	c1 f0       	breq	.+48     	; 0xe3e <vfprintf+0x26c>
     e0e:	18 f4       	brcc	.+6      	; 0xe16 <vfprintf+0x244>
     e10:	88 35       	cpi	r24, 0x58	; 88
     e12:	79 f0       	breq	.+30     	; 0xe32 <vfprintf+0x260>
     e14:	b5 c0       	rjmp	.+362    	; 0xf80 <vfprintf+0x3ae>
     e16:	80 37       	cpi	r24, 0x70	; 112
     e18:	19 f0       	breq	.+6      	; 0xe20 <vfprintf+0x24e>
     e1a:	88 37       	cpi	r24, 0x78	; 120
     e1c:	21 f0       	breq	.+8      	; 0xe26 <vfprintf+0x254>
     e1e:	b0 c0       	rjmp	.+352    	; 0xf80 <vfprintf+0x3ae>
     e20:	e9 2f       	mov	r30, r25
     e22:	e0 61       	ori	r30, 0x10	; 16
     e24:	be 2e       	mov	r11, r30
     e26:	b4 fe       	sbrs	r11, 4
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <vfprintf+0x272>
     e2a:	fb 2d       	mov	r31, r11
     e2c:	f4 60       	ori	r31, 0x04	; 4
     e2e:	bf 2e       	mov	r11, r31
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <vfprintf+0x272>
     e32:	34 fe       	sbrs	r3, 4
     e34:	0a c0       	rjmp	.+20     	; 0xe4a <vfprintf+0x278>
     e36:	29 2f       	mov	r18, r25
     e38:	26 60       	ori	r18, 0x06	; 6
     e3a:	b2 2e       	mov	r11, r18
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <vfprintf+0x278>
     e3e:	28 e0       	ldi	r18, 0x08	; 8
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <vfprintf+0x27c>
     e44:	20 e1       	ldi	r18, 0x10	; 16
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <vfprintf+0x27c>
     e4a:	20 e1       	ldi	r18, 0x10	; 16
     e4c:	32 e0       	ldi	r19, 0x02	; 2
     e4e:	f8 01       	movw	r30, r16
     e50:	b7 fe       	sbrs	r11, 7
     e52:	07 c0       	rjmp	.+14     	; 0xe62 <vfprintf+0x290>
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	0c 5f       	subi	r16, 0xFC	; 252
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <vfprintf+0x29c>
     e62:	60 81       	ld	r22, Z
     e64:	71 81       	ldd	r23, Z+1	; 0x01
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 5f       	subi	r16, 0xFE	; 254
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	a3 01       	movw	r20, r6
     e70:	0e 94 1c 08 	call	0x1038	; 0x1038 <__ultoa_invert>
     e74:	88 2e       	mov	r8, r24
     e76:	86 18       	sub	r8, r6
     e78:	fb 2d       	mov	r31, r11
     e7a:	ff 77       	andi	r31, 0x7F	; 127
     e7c:	3f 2e       	mov	r3, r31
     e7e:	36 fe       	sbrs	r3, 6
     e80:	0d c0       	rjmp	.+26     	; 0xe9c <vfprintf+0x2ca>
     e82:	23 2d       	mov	r18, r3
     e84:	2e 7f       	andi	r18, 0xFE	; 254
     e86:	a2 2e       	mov	r10, r18
     e88:	89 14       	cp	r8, r9
     e8a:	58 f4       	brcc	.+22     	; 0xea2 <vfprintf+0x2d0>
     e8c:	34 fe       	sbrs	r3, 4
     e8e:	0b c0       	rjmp	.+22     	; 0xea6 <vfprintf+0x2d4>
     e90:	32 fc       	sbrc	r3, 2
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <vfprintf+0x2d4>
     e94:	83 2d       	mov	r24, r3
     e96:	8e 7e       	andi	r24, 0xEE	; 238
     e98:	a8 2e       	mov	r10, r24
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <vfprintf+0x2d4>
     e9c:	b8 2c       	mov	r11, r8
     e9e:	a3 2c       	mov	r10, r3
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <vfprintf+0x2d6>
     ea2:	b8 2c       	mov	r11, r8
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <vfprintf+0x2d6>
     ea6:	b9 2c       	mov	r11, r9
     ea8:	a4 fe       	sbrs	r10, 4
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <vfprintf+0x2f8>
     eac:	fe 01       	movw	r30, r28
     eae:	e8 0d       	add	r30, r8
     eb0:	f1 1d       	adc	r31, r1
     eb2:	80 81       	ld	r24, Z
     eb4:	80 33       	cpi	r24, 0x30	; 48
     eb6:	21 f4       	brne	.+8      	; 0xec0 <vfprintf+0x2ee>
     eb8:	9a 2d       	mov	r25, r10
     eba:	99 7e       	andi	r25, 0xE9	; 233
     ebc:	a9 2e       	mov	r10, r25
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <vfprintf+0x300>
     ec0:	a2 fe       	sbrs	r10, 2
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <vfprintf+0x2fe>
     ec4:	b3 94       	inc	r11
     ec6:	b3 94       	inc	r11
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <vfprintf+0x300>
     eca:	8a 2d       	mov	r24, r10
     ecc:	86 78       	andi	r24, 0x86	; 134
     ece:	09 f0       	breq	.+2      	; 0xed2 <vfprintf+0x300>
     ed0:	b3 94       	inc	r11
     ed2:	a3 fc       	sbrc	r10, 3
     ed4:	11 c0       	rjmp	.+34     	; 0xef8 <vfprintf+0x326>
     ed6:	a0 fe       	sbrs	r10, 0
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <vfprintf+0x314>
     eda:	b2 14       	cp	r11, r2
     edc:	88 f4       	brcc	.+34     	; 0xf00 <vfprintf+0x32e>
     ede:	28 0c       	add	r2, r8
     ee0:	92 2c       	mov	r9, r2
     ee2:	9b 18       	sub	r9, r11
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <vfprintf+0x330>
     ee6:	b2 14       	cp	r11, r2
     ee8:	60 f4       	brcc	.+24     	; 0xf02 <vfprintf+0x330>
     eea:	b6 01       	movw	r22, r12
     eec:	80 e2       	ldi	r24, 0x20	; 32
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     ef4:	b3 94       	inc	r11
     ef6:	f7 cf       	rjmp	.-18     	; 0xee6 <vfprintf+0x314>
     ef8:	b2 14       	cp	r11, r2
     efa:	18 f4       	brcc	.+6      	; 0xf02 <vfprintf+0x330>
     efc:	2b 18       	sub	r2, r11
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <vfprintf+0x332>
     f00:	98 2c       	mov	r9, r8
     f02:	21 2c       	mov	r2, r1
     f04:	a4 fe       	sbrs	r10, 4
     f06:	10 c0       	rjmp	.+32     	; 0xf28 <vfprintf+0x356>
     f08:	b6 01       	movw	r22, r12
     f0a:	80 e3       	ldi	r24, 0x30	; 48
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     f12:	a2 fe       	sbrs	r10, 2
     f14:	17 c0       	rjmp	.+46     	; 0xf44 <vfprintf+0x372>
     f16:	a1 fc       	sbrc	r10, 1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <vfprintf+0x34e>
     f1a:	88 e7       	ldi	r24, 0x78	; 120
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <vfprintf+0x352>
     f20:	88 e5       	ldi	r24, 0x58	; 88
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	b6 01       	movw	r22, r12
     f26:	0c c0       	rjmp	.+24     	; 0xf40 <vfprintf+0x36e>
     f28:	8a 2d       	mov	r24, r10
     f2a:	86 78       	andi	r24, 0x86	; 134
     f2c:	59 f0       	breq	.+22     	; 0xf44 <vfprintf+0x372>
     f2e:	a1 fe       	sbrs	r10, 1
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <vfprintf+0x364>
     f32:	8b e2       	ldi	r24, 0x2B	; 43
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <vfprintf+0x366>
     f36:	80 e2       	ldi	r24, 0x20	; 32
     f38:	a7 fc       	sbrc	r10, 7
     f3a:	8d e2       	ldi	r24, 0x2D	; 45
     f3c:	b6 01       	movw	r22, r12
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     f44:	89 14       	cp	r8, r9
     f46:	38 f4       	brcc	.+14     	; 0xf56 <vfprintf+0x384>
     f48:	b6 01       	movw	r22, r12
     f4a:	80 e3       	ldi	r24, 0x30	; 48
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     f52:	9a 94       	dec	r9
     f54:	f7 cf       	rjmp	.-18     	; 0xf44 <vfprintf+0x372>
     f56:	8a 94       	dec	r8
     f58:	f3 01       	movw	r30, r6
     f5a:	e8 0d       	add	r30, r8
     f5c:	f1 1d       	adc	r31, r1
     f5e:	80 81       	ld	r24, Z
     f60:	b6 01       	movw	r22, r12
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     f68:	81 10       	cpse	r8, r1
     f6a:	f5 cf       	rjmp	.-22     	; 0xf56 <vfprintf+0x384>
     f6c:	22 20       	and	r2, r2
     f6e:	09 f4       	brne	.+2      	; 0xf72 <vfprintf+0x3a0>
     f70:	42 ce       	rjmp	.-892    	; 0xbf6 <vfprintf+0x24>
     f72:	b6 01       	movw	r22, r12
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <fputc>
     f7c:	2a 94       	dec	r2
     f7e:	f6 cf       	rjmp	.-20     	; 0xf6c <vfprintf+0x39a>
     f80:	f6 01       	movw	r30, r12
     f82:	86 81       	ldd	r24, Z+6	; 0x06
     f84:	97 81       	ldd	r25, Z+7	; 0x07
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x3ba>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	9f ef       	ldi	r25, 0xFF	; 255
     f8c:	2b 96       	adiw	r28, 0x0b	; 11
     f8e:	e2 e1       	ldi	r30, 0x12	; 18
     f90:	0c 94 96 08 	jmp	0x112c	; 0x112c <__epilogue_restores__>

00000f94 <strnlen_P>:
     f94:	fc 01       	movw	r30, r24
     f96:	05 90       	lpm	r0, Z+
     f98:	61 50       	subi	r22, 0x01	; 1
     f9a:	70 40       	sbci	r23, 0x00	; 0
     f9c:	01 10       	cpse	r0, r1
     f9e:	d8 f7       	brcc	.-10     	; 0xf96 <strnlen_P+0x2>
     fa0:	80 95       	com	r24
     fa2:	90 95       	com	r25
     fa4:	8e 0f       	add	r24, r30
     fa6:	9f 1f       	adc	r25, r31
     fa8:	08 95       	ret

00000faa <strnlen>:
     faa:	fc 01       	movw	r30, r24
     fac:	61 50       	subi	r22, 0x01	; 1
     fae:	70 40       	sbci	r23, 0x00	; 0
     fb0:	01 90       	ld	r0, Z+
     fb2:	01 10       	cpse	r0, r1
     fb4:	d8 f7       	brcc	.-10     	; 0xfac <strnlen+0x2>
     fb6:	80 95       	com	r24
     fb8:	90 95       	com	r25
     fba:	8e 0f       	add	r24, r30
     fbc:	9f 1f       	adc	r25, r31
     fbe:	08 95       	ret

00000fc0 <fputc>:
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	fb 01       	movw	r30, r22
     fca:	23 81       	ldd	r18, Z+3	; 0x03
     fcc:	21 fd       	sbrc	r18, 1
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <fputc+0x16>
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	9f ef       	ldi	r25, 0xFF	; 255
     fd4:	2c c0       	rjmp	.+88     	; 0x102e <fputc+0x6e>
     fd6:	22 ff       	sbrs	r18, 2
     fd8:	16 c0       	rjmp	.+44     	; 0x1006 <fputc+0x46>
     fda:	46 81       	ldd	r20, Z+6	; 0x06
     fdc:	57 81       	ldd	r21, Z+7	; 0x07
     fde:	24 81       	ldd	r18, Z+4	; 0x04
     fe0:	35 81       	ldd	r19, Z+5	; 0x05
     fe2:	42 17       	cp	r20, r18
     fe4:	53 07       	cpc	r21, r19
     fe6:	44 f4       	brge	.+16     	; 0xff8 <fputc+0x38>
     fe8:	a0 81       	ld	r26, Z
     fea:	b1 81       	ldd	r27, Z+1	; 0x01
     fec:	9d 01       	movw	r18, r26
     fee:	2f 5f       	subi	r18, 0xFF	; 255
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	31 83       	std	Z+1, r19	; 0x01
     ff4:	20 83       	st	Z, r18
     ff6:	8c 93       	st	X, r24
     ff8:	26 81       	ldd	r18, Z+6	; 0x06
     ffa:	37 81       	ldd	r19, Z+7	; 0x07
     ffc:	2f 5f       	subi	r18, 0xFF	; 255
     ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    1000:	37 83       	std	Z+7, r19	; 0x07
    1002:	26 83       	std	Z+6, r18	; 0x06
    1004:	14 c0       	rjmp	.+40     	; 0x102e <fputc+0x6e>
    1006:	8b 01       	movw	r16, r22
    1008:	ec 01       	movw	r28, r24
    100a:	fb 01       	movw	r30, r22
    100c:	00 84       	ldd	r0, Z+8	; 0x08
    100e:	f1 85       	ldd	r31, Z+9	; 0x09
    1010:	e0 2d       	mov	r30, r0
    1012:	09 95       	icall
    1014:	89 2b       	or	r24, r25
    1016:	e1 f6       	brne	.-72     	; 0xfd0 <fputc+0x10>
    1018:	d8 01       	movw	r26, r16
    101a:	16 96       	adiw	r26, 0x06	; 6
    101c:	8d 91       	ld	r24, X+
    101e:	9c 91       	ld	r25, X
    1020:	17 97       	sbiw	r26, 0x07	; 7
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	17 96       	adiw	r26, 0x07	; 7
    1026:	9c 93       	st	X, r25
    1028:	8e 93       	st	-X, r24
    102a:	16 97       	sbiw	r26, 0x06	; 6
    102c:	ce 01       	movw	r24, r28
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	08 95       	ret

00001038 <__ultoa_invert>:
    1038:	fa 01       	movw	r30, r20
    103a:	aa 27       	eor	r26, r26
    103c:	28 30       	cpi	r18, 0x08	; 8
    103e:	51 f1       	breq	.+84     	; 0x1094 <__ultoa_invert+0x5c>
    1040:	20 31       	cpi	r18, 0x10	; 16
    1042:	81 f1       	breq	.+96     	; 0x10a4 <__ultoa_invert+0x6c>
    1044:	e8 94       	clt
    1046:	6f 93       	push	r22
    1048:	6e 7f       	andi	r22, 0xFE	; 254
    104a:	6e 5f       	subi	r22, 0xFE	; 254
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	af 4f       	sbci	r26, 0xFF	; 255
    1054:	b1 e0       	ldi	r27, 0x01	; 1
    1056:	3e d0       	rcall	.+124    	; 0x10d4 <__ultoa_invert+0x9c>
    1058:	b4 e0       	ldi	r27, 0x04	; 4
    105a:	3c d0       	rcall	.+120    	; 0x10d4 <__ultoa_invert+0x9c>
    105c:	67 0f       	add	r22, r23
    105e:	78 1f       	adc	r23, r24
    1060:	89 1f       	adc	r24, r25
    1062:	9a 1f       	adc	r25, r26
    1064:	a1 1d       	adc	r26, r1
    1066:	68 0f       	add	r22, r24
    1068:	79 1f       	adc	r23, r25
    106a:	8a 1f       	adc	r24, r26
    106c:	91 1d       	adc	r25, r1
    106e:	a1 1d       	adc	r26, r1
    1070:	6a 0f       	add	r22, r26
    1072:	71 1d       	adc	r23, r1
    1074:	81 1d       	adc	r24, r1
    1076:	91 1d       	adc	r25, r1
    1078:	a1 1d       	adc	r26, r1
    107a:	20 d0       	rcall	.+64     	; 0x10bc <__ultoa_invert+0x84>
    107c:	09 f4       	brne	.+2      	; 0x1080 <__ultoa_invert+0x48>
    107e:	68 94       	set
    1080:	3f 91       	pop	r19
    1082:	2a e0       	ldi	r18, 0x0A	; 10
    1084:	26 9f       	mul	r18, r22
    1086:	11 24       	eor	r1, r1
    1088:	30 19       	sub	r19, r0
    108a:	30 5d       	subi	r19, 0xD0	; 208
    108c:	31 93       	st	Z+, r19
    108e:	de f6       	brtc	.-74     	; 0x1046 <__ultoa_invert+0xe>
    1090:	cf 01       	movw	r24, r30
    1092:	08 95       	ret
    1094:	46 2f       	mov	r20, r22
    1096:	47 70       	andi	r20, 0x07	; 7
    1098:	40 5d       	subi	r20, 0xD0	; 208
    109a:	41 93       	st	Z+, r20
    109c:	b3 e0       	ldi	r27, 0x03	; 3
    109e:	0f d0       	rcall	.+30     	; 0x10be <__ultoa_invert+0x86>
    10a0:	c9 f7       	brne	.-14     	; 0x1094 <__ultoa_invert+0x5c>
    10a2:	f6 cf       	rjmp	.-20     	; 0x1090 <__ultoa_invert+0x58>
    10a4:	46 2f       	mov	r20, r22
    10a6:	4f 70       	andi	r20, 0x0F	; 15
    10a8:	40 5d       	subi	r20, 0xD0	; 208
    10aa:	4a 33       	cpi	r20, 0x3A	; 58
    10ac:	18 f0       	brcs	.+6      	; 0x10b4 <__ultoa_invert+0x7c>
    10ae:	49 5d       	subi	r20, 0xD9	; 217
    10b0:	31 fd       	sbrc	r19, 1
    10b2:	40 52       	subi	r20, 0x20	; 32
    10b4:	41 93       	st	Z+, r20
    10b6:	02 d0       	rcall	.+4      	; 0x10bc <__ultoa_invert+0x84>
    10b8:	a9 f7       	brne	.-22     	; 0x10a4 <__ultoa_invert+0x6c>
    10ba:	ea cf       	rjmp	.-44     	; 0x1090 <__ultoa_invert+0x58>
    10bc:	b4 e0       	ldi	r27, 0x04	; 4
    10be:	a6 95       	lsr	r26
    10c0:	97 95       	ror	r25
    10c2:	87 95       	ror	r24
    10c4:	77 95       	ror	r23
    10c6:	67 95       	ror	r22
    10c8:	ba 95       	dec	r27
    10ca:	c9 f7       	brne	.-14     	; 0x10be <__ultoa_invert+0x86>
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	61 05       	cpc	r22, r1
    10d0:	71 05       	cpc	r23, r1
    10d2:	08 95       	ret
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	0a 2e       	mov	r0, r26
    10da:	06 94       	lsr	r0
    10dc:	57 95       	ror	r21
    10de:	47 95       	ror	r20
    10e0:	37 95       	ror	r19
    10e2:	27 95       	ror	r18
    10e4:	ba 95       	dec	r27
    10e6:	c9 f7       	brne	.-14     	; 0x10da <__ultoa_invert+0xa2>
    10e8:	62 0f       	add	r22, r18
    10ea:	73 1f       	adc	r23, r19
    10ec:	84 1f       	adc	r24, r20
    10ee:	95 1f       	adc	r25, r21
    10f0:	a0 1d       	adc	r26, r0
    10f2:	08 95       	ret

000010f4 <__prologue_saves__>:
    10f4:	2f 92       	push	r2
    10f6:	3f 92       	push	r3
    10f8:	4f 92       	push	r4
    10fa:	5f 92       	push	r5
    10fc:	6f 92       	push	r6
    10fe:	7f 92       	push	r7
    1100:	8f 92       	push	r8
    1102:	9f 92       	push	r9
    1104:	af 92       	push	r10
    1106:	bf 92       	push	r11
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	ca 1b       	sub	r28, r26
    111e:	db 0b       	sbc	r29, r27
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	09 94       	ijmp

0000112c <__epilogue_restores__>:
    112c:	2a 88       	ldd	r2, Y+18	; 0x12
    112e:	39 88       	ldd	r3, Y+17	; 0x11
    1130:	48 88       	ldd	r4, Y+16	; 0x10
    1132:	5f 84       	ldd	r5, Y+15	; 0x0f
    1134:	6e 84       	ldd	r6, Y+14	; 0x0e
    1136:	7d 84       	ldd	r7, Y+13	; 0x0d
    1138:	8c 84       	ldd	r8, Y+12	; 0x0c
    113a:	9b 84       	ldd	r9, Y+11	; 0x0b
    113c:	aa 84       	ldd	r10, Y+10	; 0x0a
    113e:	b9 84       	ldd	r11, Y+9	; 0x09
    1140:	c8 84       	ldd	r12, Y+8	; 0x08
    1142:	df 80       	ldd	r13, Y+7	; 0x07
    1144:	ee 80       	ldd	r14, Y+6	; 0x06
    1146:	fd 80       	ldd	r15, Y+5	; 0x05
    1148:	0c 81       	ldd	r16, Y+4	; 0x04
    114a:	1b 81       	ldd	r17, Y+3	; 0x03
    114c:	aa 81       	ldd	r26, Y+2	; 0x02
    114e:	b9 81       	ldd	r27, Y+1	; 0x01
    1150:	ce 0f       	add	r28, r30
    1152:	d1 1d       	adc	r29, r1
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	ed 01       	movw	r28, r26
    1160:	08 95       	ret

00001162 <_exit>:
    1162:	f8 94       	cli

00001164 <__stop_program>:
    1164:	ff cf       	rjmp	.-2      	; 0x1164 <__stop_program>
