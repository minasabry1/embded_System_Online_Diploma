
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000688  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000a6  008000a6  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001286  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000939  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cfd  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  000031d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000615  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083b  00000000  00000000  00003b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000436c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3a       	cpi	r26, 0xAB	; 171
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  8a:	0c 94 42 03 	jmp	0x684	; 0x684 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_init>:
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	8a bb       	out	0x1a, r24	; 26
  98:	8a b3       	in	r24, 0x1a	; 26
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	8a bb       	out	0x1a, r24	; 26
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret

000000a4 <Keypad_getkey>:
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	9d c0       	rjmp	.+314    	; 0x1ec <Keypad_getkey+0x148>
  b2:	3b b3       	in	r19, 0x1b	; 27
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	8c 01       	movw	r16, r24
  be:	00 80       	ld	r0, Z
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <Keypad_getkey+0x22>
  c2:	00 0f       	add	r16, r16
  c4:	11 1f       	adc	r17, r17
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <Keypad_getkey+0x1e>
  ca:	ec 01       	movw	r28, r24
  cc:	02 80       	ldd	r0, Z+2	; 0x02
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <Keypad_getkey+0x30>
  d0:	cc 0f       	add	r28, r28
  d2:	dd 1f       	adc	r29, r29
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <Keypad_getkey+0x2c>
  d8:	dc 01       	movw	r26, r24
  da:	04 80       	ldd	r0, Z+4	; 0x04
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <Keypad_getkey+0x3e>
  de:	aa 0f       	add	r26, r26
  e0:	bb 1f       	adc	r27, r27
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <Keypad_getkey+0x3a>
  e6:	bc 01       	movw	r22, r24
  e8:	06 80       	ldd	r0, Z+6	; 0x06
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Keypad_getkey+0x4c>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <Keypad_getkey+0x48>
  f4:	2c 2f       	mov	r18, r28
  f6:	20 2b       	or	r18, r16
  f8:	2a 2b       	or	r18, r26
  fa:	26 2b       	or	r18, r22
  fc:	23 2b       	or	r18, r19
  fe:	2b bb       	out	0x1b, r18	; 27
 100:	2b b3       	in	r18, 0x1b	; 27
 102:	fa 01       	movw	r30, r20
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	00 80       	ld	r0, Z
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Keypad_getkey+0x70>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <Keypad_getkey+0x6c>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	5e c0       	rjmp	.+188    	; 0x1e0 <Keypad_getkey+0x13c>
 124:	89 b3       	in	r24, 0x19	; 25
 126:	fb 01       	movw	r30, r22
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e8 59       	subi	r30, 0x98	; 152
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	20 81       	ld	r18, Z
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 2e       	mov	r0, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <Keypad_getkey+0x98>
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <Keypad_getkey+0x94>
 140:	80 fd       	sbrc	r24, 0
 142:	4c c0       	rjmp	.+152    	; 0x1dc <Keypad_getkey+0x138>
 144:	89 b3       	in	r24, 0x19	; 25
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 2e       	mov	r0, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <Keypad_getkey+0xac>
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <Keypad_getkey+0xa8>
 154:	80 ff       	sbrs	r24, 0
 156:	f6 cf       	rjmp	.-20     	; 0x144 <Keypad_getkey+0xa0>
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	51 05       	cpc	r21, r1
 15c:	c9 f0       	breq	.+50     	; 0x190 <Keypad_getkey+0xec>
 15e:	24 f4       	brge	.+8      	; 0x168 <Keypad_getkey+0xc4>
 160:	41 15       	cp	r20, r1
 162:	51 05       	cpc	r21, r1
 164:	41 f0       	breq	.+16     	; 0x176 <Keypad_getkey+0xd2>
 166:	3a c0       	rjmp	.+116    	; 0x1dc <Keypad_getkey+0x138>
 168:	42 30       	cpi	r20, 0x02	; 2
 16a:	51 05       	cpc	r21, r1
 16c:	f1 f0       	breq	.+60     	; 0x1aa <Keypad_getkey+0x106>
 16e:	43 30       	cpi	r20, 0x03	; 3
 170:	51 05       	cpc	r21, r1
 172:	41 f1       	breq	.+80     	; 0x1c4 <Keypad_getkey+0x120>
 174:	33 c0       	rjmp	.+102    	; 0x1dc <Keypad_getkey+0x138>
 176:	61 15       	cp	r22, r1
 178:	71 05       	cpc	r23, r1
 17a:	f1 f1       	breq	.+124    	; 0x1f8 <Keypad_getkey+0x154>
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	71 05       	cpc	r23, r1
 180:	e9 f1       	breq	.+122    	; 0x1fc <Keypad_getkey+0x158>
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	71 05       	cpc	r23, r1
 186:	e1 f1       	breq	.+120    	; 0x200 <Keypad_getkey+0x15c>
 188:	63 30       	cpi	r22, 0x03	; 3
 18a:	71 05       	cpc	r23, r1
 18c:	39 f5       	brne	.+78     	; 0x1dc <Keypad_getkey+0x138>
 18e:	3a c0       	rjmp	.+116    	; 0x204 <Keypad_getkey+0x160>
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	c9 f1       	breq	.+114    	; 0x208 <Keypad_getkey+0x164>
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	71 05       	cpc	r23, r1
 19a:	c1 f1       	breq	.+112    	; 0x20c <Keypad_getkey+0x168>
 19c:	62 30       	cpi	r22, 0x02	; 2
 19e:	71 05       	cpc	r23, r1
 1a0:	b9 f1       	breq	.+110    	; 0x210 <Keypad_getkey+0x16c>
 1a2:	63 30       	cpi	r22, 0x03	; 3
 1a4:	71 05       	cpc	r23, r1
 1a6:	d1 f4       	brne	.+52     	; 0x1dc <Keypad_getkey+0x138>
 1a8:	35 c0       	rjmp	.+106    	; 0x214 <Keypad_getkey+0x170>
 1aa:	61 15       	cp	r22, r1
 1ac:	71 05       	cpc	r23, r1
 1ae:	a1 f1       	breq	.+104    	; 0x218 <Keypad_getkey+0x174>
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	71 05       	cpc	r23, r1
 1b4:	99 f1       	breq	.+102    	; 0x21c <Keypad_getkey+0x178>
 1b6:	62 30       	cpi	r22, 0x02	; 2
 1b8:	71 05       	cpc	r23, r1
 1ba:	91 f1       	breq	.+100    	; 0x220 <Keypad_getkey+0x17c>
 1bc:	63 30       	cpi	r22, 0x03	; 3
 1be:	71 05       	cpc	r23, r1
 1c0:	69 f4       	brne	.+26     	; 0x1dc <Keypad_getkey+0x138>
 1c2:	30 c0       	rjmp	.+96     	; 0x224 <Keypad_getkey+0x180>
 1c4:	61 15       	cp	r22, r1
 1c6:	71 05       	cpc	r23, r1
 1c8:	79 f1       	breq	.+94     	; 0x228 <Keypad_getkey+0x184>
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	71 05       	cpc	r23, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <Keypad_getkey+0x188>
 1d0:	62 30       	cpi	r22, 0x02	; 2
 1d2:	71 05       	cpc	r23, r1
 1d4:	69 f1       	breq	.+90     	; 0x230 <Keypad_getkey+0x18c>
 1d6:	63 30       	cpi	r22, 0x03	; 3
 1d8:	71 05       	cpc	r23, r1
 1da:	61 f1       	breq	.+88     	; 0x234 <Keypad_getkey+0x190>
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	64 30       	cpi	r22, 0x04	; 4
 1e2:	71 05       	cpc	r23, r1
 1e4:	0c f4       	brge	.+2      	; 0x1e8 <Keypad_getkey+0x144>
 1e6:	9e cf       	rjmp	.-196    	; 0x124 <Keypad_getkey+0x80>
 1e8:	4f 5f       	subi	r20, 0xFF	; 255
 1ea:	5f 4f       	sbci	r21, 0xFF	; 255
 1ec:	44 30       	cpi	r20, 0x04	; 4
 1ee:	51 05       	cpc	r21, r1
 1f0:	0c f4       	brge	.+2      	; 0x1f4 <Keypad_getkey+0x150>
 1f2:	5f cf       	rjmp	.-322    	; 0xb2 <Keypad_getkey+0xe>
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	1f c0       	rjmp	.+62     	; 0x236 <Keypad_getkey+0x192>
 1f8:	87 e3       	ldi	r24, 0x37	; 55
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <Keypad_getkey+0x192>
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	1b c0       	rjmp	.+54     	; 0x236 <Keypad_getkey+0x192>
 200:	81 e3       	ldi	r24, 0x31	; 49
 202:	19 c0       	rjmp	.+50     	; 0x236 <Keypad_getkey+0x192>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	17 c0       	rjmp	.+46     	; 0x236 <Keypad_getkey+0x192>
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	15 c0       	rjmp	.+42     	; 0x236 <Keypad_getkey+0x192>
 20c:	85 e3       	ldi	r24, 0x35	; 53
 20e:	13 c0       	rjmp	.+38     	; 0x236 <Keypad_getkey+0x192>
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	11 c0       	rjmp	.+34     	; 0x236 <Keypad_getkey+0x192>
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	0f c0       	rjmp	.+30     	; 0x236 <Keypad_getkey+0x192>
 218:	89 e3       	ldi	r24, 0x39	; 57
 21a:	0d c0       	rjmp	.+26     	; 0x236 <Keypad_getkey+0x192>
 21c:	86 e3       	ldi	r24, 0x36	; 54
 21e:	0b c0       	rjmp	.+22     	; 0x236 <Keypad_getkey+0x192>
 220:	83 e3       	ldi	r24, 0x33	; 51
 222:	09 c0       	rjmp	.+18     	; 0x236 <Keypad_getkey+0x192>
 224:	8d e3       	ldi	r24, 0x3D	; 61
 226:	07 c0       	rjmp	.+14     	; 0x236 <Keypad_getkey+0x192>
 228:	8f e2       	ldi	r24, 0x2F	; 47
 22a:	05 c0       	rjmp	.+10     	; 0x236 <Keypad_getkey+0x192>
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	03 c0       	rjmp	.+6      	; 0x236 <Keypad_getkey+0x192>
 230:	8d e2       	ldi	r24, 0x2D	; 45
 232:	01 c0       	rjmp	.+2      	; 0x236 <Keypad_getkey+0x192>
 234:	8b e2       	ldi	r24, 0x2B	; 43
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <LCD_lcd_kick>:
 240:	82 b3       	in	r24, 0x12	; 18
 242:	8f 7b       	andi	r24, 0xBF	; 191
 244:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	83 ed       	ldi	r24, 0xD3	; 211
 248:	90 e3       	ldi	r25, 0x30	; 48
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_lcd_kick+0xa>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_lcd_kick+0x10>
 250:	00 00       	nop
 252:	82 b3       	in	r24, 0x12	; 18
 254:	80 64       	ori	r24, 0x40	; 64
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <LCD_check_lcd_isbusy>:
 25a:	84 b3       	in	r24, 0x14	; 20
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	84 bb       	out	0x14, r24	; 20
 260:	82 b3       	in	r24, 0x12	; 18
 262:	80 62       	ori	r24, 0x20	; 32
 264:	82 bb       	out	0x12, r24	; 18
 266:	82 b3       	in	r24, 0x12	; 18
 268:	8f 7e       	andi	r24, 0xEF	; 239
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
 270:	84 b3       	in	r24, 0x14	; 20
 272:	84 bb       	out	0x14, r24	; 20
 274:	82 b3       	in	r24, 0x12	; 18
 276:	8f 7d       	andi	r24, 0xDF	; 223
 278:	82 bb       	out	0x12, r24	; 18
 27a:	83 ed       	ldi	r24, 0xD3	; 211
 27c:	90 e3       	ldi	r25, 0x30	; 48
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <LCD_check_lcd_isbusy+0x24>
 282:	00 c0       	rjmp	.+0      	; 0x284 <LCD_check_lcd_isbusy+0x2a>
 284:	00 00       	nop
 286:	08 95       	ret

00000288 <LCD_Send_A_Command>:
 288:	cf 93       	push	r28
 28a:	c8 2f       	mov	r28, r24
 28c:	85 b3       	in	r24, 0x15	; 21
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	9c 2f       	mov	r25, r28
 292:	90 7f       	andi	r25, 0xF0	; 240
 294:	89 2b       	or	r24, r25
 296:	85 bb       	out	0x15, r24	; 21
 298:	82 b3       	in	r24, 0x12	; 18
 29a:	8f 7c       	andi	r24, 0xCF	; 207
 29c:	82 bb       	out	0x12, r24	; 18
 29e:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
 2a2:	87 ea       	ldi	r24, 0xA7	; 167
 2a4:	91 e6       	ldi	r25, 0x61	; 97
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_Send_A_Command+0x1e>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_Send_A_Command+0x24>
 2ac:	00 00       	nop
 2ae:	25 b3       	in	r18, 0x15	; 21
 2b0:	30 e1       	ldi	r19, 0x10	; 16
 2b2:	c3 9f       	mul	r28, r19
 2b4:	c0 01       	movw	r24, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	92 2f       	mov	r25, r18
 2ba:	9f 70       	andi	r25, 0x0F	; 15
 2bc:	89 2b       	or	r24, r25
 2be:	85 bb       	out	0x15, r24	; 21
 2c0:	82 b3       	in	r24, 0x12	; 18
 2c2:	8f 7c       	andi	r24, 0xCF	; 207
 2c4:	82 bb       	out	0x12, r24	; 18
 2c6:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <LCD_clear_screen>:
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Send_A_Command>
 2d4:	08 95       	ret

000002d6 <LCD_GOTO_XY>:
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	c8 2f       	mov	r28, r24
 2dc:	d6 2f       	mov	r29, r22
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	31 f4       	brne	.+12     	; 0x2ee <LCD_GOTO_XY+0x18>
 2e2:	60 32       	cpi	r22, 0x20	; 32
 2e4:	20 f4       	brcc	.+8      	; 0x2ee <LCD_GOTO_XY+0x18>
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	86 0f       	add	r24, r22
 2ea:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Send_A_Command>
 2ee:	c2 30       	cpi	r28, 0x02	; 2
 2f0:	31 f4       	brne	.+12     	; 0x2fe <LCD_GOTO_XY+0x28>
 2f2:	d0 32       	cpi	r29, 0x20	; 32
 2f4:	20 f4       	brcc	.+8      	; 0x2fe <LCD_GOTO_XY+0x28>
 2f6:	80 ec       	ldi	r24, 0xC0	; 192
 2f8:	8d 0f       	add	r24, r29
 2fa:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Send_A_Command>
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <LCD_init>:
 304:	87 e8       	ldi	r24, 0x87	; 135
 306:	93 e1       	ldi	r25, 0x13	; 19
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_init+0x4>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_init+0xa>
 30e:	00 00       	nop
 310:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_check_lcd_isbusy>
 314:	81 b3       	in	r24, 0x11	; 17
 316:	80 67       	ori	r24, 0x70	; 112
 318:	81 bb       	out	0x11, r24	; 17
 31a:	82 b3       	in	r24, 0x12	; 18
 31c:	8f 78       	andi	r24, 0x8F	; 143
 31e:	82 bb       	out	0x12, r24	; 18
 320:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
 324:	85 ea       	ldi	r24, 0xA5	; 165
 326:	9e e0       	ldi	r25, 0x0E	; 14
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_init+0x24>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_init+0x2a>
 32e:	00 00       	nop
 330:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_clear_screen>
 334:	84 b3       	in	r24, 0x14	; 20
 336:	84 bb       	out	0x14, r24	; 20
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Send_A_Command>
 33e:	88 e2       	ldi	r24, 0x28	; 40
 340:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Send_A_Command>
 344:	86 e0       	ldi	r24, 0x06	; 6
 346:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Send_A_Command>
 34a:	80 e8       	ldi	r24, 0x80	; 128
 34c:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Send_A_Command>
 350:	8f e0       	ldi	r24, 0x0F	; 15
 352:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Send_A_Command>
 356:	08 95       	ret

00000358 <LCD_Send_A_Character>:
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
 35c:	85 b3       	in	r24, 0x15	; 21
 35e:	8f 70       	andi	r24, 0x0F	; 15
 360:	9c 2f       	mov	r25, r28
 362:	90 7f       	andi	r25, 0xF0	; 240
 364:	89 2b       	or	r24, r25
 366:	85 bb       	out	0x15, r24	; 21
 368:	82 b3       	in	r24, 0x12	; 18
 36a:	80 61       	ori	r24, 0x10	; 16
 36c:	82 bb       	out	0x12, r24	; 18
 36e:	82 b3       	in	r24, 0x12	; 18
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	82 bb       	out	0x12, r24	; 18
 374:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
 378:	25 b3       	in	r18, 0x15	; 21
 37a:	30 e1       	ldi	r19, 0x10	; 16
 37c:	c3 9f       	mul	r28, r19
 37e:	c0 01       	movw	r24, r0
 380:	11 24       	eor	r1, r1
 382:	92 2f       	mov	r25, r18
 384:	9f 70       	andi	r25, 0x0F	; 15
 386:	89 2b       	or	r24, r25
 388:	85 bb       	out	0x15, r24	; 21
 38a:	82 b3       	in	r24, 0x12	; 18
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	82 bb       	out	0x12, r24	; 18
 390:	82 b3       	in	r24, 0x12	; 18
 392:	8f 7d       	andi	r24, 0xDF	; 223
 394:	82 bb       	out	0x12, r24	; 18
 396:	0e 94 20 01 	call	0x240	; 0x240 <LCD_lcd_kick>
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <LCD_Send_A_String>:
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	8c 01       	movw	r16, r24
 3a8:	c0 e0       	ldi	r28, 0x00	; 0
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	18 c0       	rjmp	.+48     	; 0x3de <LCD_Send_A_String+0x40>
 3ae:	21 96       	adiw	r28, 0x01	; 1
 3b0:	0f 5f       	subi	r16, 0xFF	; 255
 3b2:	1f 4f       	sbci	r17, 0xFF	; 255
 3b4:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_A_Character>
 3b8:	c0 32       	cpi	r28, 0x20	; 32
 3ba:	d1 05       	cpc	r29, r1
 3bc:	29 f4       	brne	.+10     	; 0x3c8 <LCD_Send_A_String+0x2a>
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
 3c6:	0b c0       	rjmp	.+22     	; 0x3de <LCD_Send_A_String+0x40>
 3c8:	cf 31       	cpi	r28, 0x1F	; 31
 3ca:	d1 05       	cpc	r29, r1
 3cc:	41 f4       	brne	.+16     	; 0x3de <LCD_Send_A_String+0x40>
 3ce:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_clear_screen>
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
 3da:	c0 e0       	ldi	r28, 0x00	; 0
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
 3de:	f8 01       	movw	r30, r16
 3e0:	80 81       	ld	r24, Z
 3e2:	81 11       	cpse	r24, r1
 3e4:	e4 cf       	rjmp	.-56     	; 0x3ae <LCD_Send_A_String+0x10>
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	08 95       	ret

000003f0 <main>:
#include <util/delay.h>

#include <util/delay.h>
	int main(void)
	{
		DDRC=0xFF;
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	84 bb       	out	0x14, r24	; 20
		DDRA=0xFF;
 3f4:	8a bb       	out	0x1a, r24	; 26
		Set_Bit(DDRD,1);
 3f6:	81 b3       	in	r24, 0x11	; 17
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	81 bb       	out	0x11, r24	; 17
		Reset_Bit(DDRD,0);			
 3fc:	81 b3       	in	r24, 0x11	; 17
 3fe:	8e 7f       	andi	r24, 0xFE	; 254
 400:	81 bb       	out	0x11, r24	; 17
		//sei(); // Enable global interrupts
		
		uint8_t key_pressed,i=0;
		uint8_t j=0;
		Uart_init();
 402:	0e 94 8e 02 	call	0x51c	; 0x51c <Uart_init>
		Keypad_init();
 406:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_init>
		LCD_init();
 40a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_init>
		LCD_GOTO_XY(1,0);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
		LCD_Send_A_String("Enter Password 5 digits:");
 416:	83 e7       	ldi	r24, 0x73	; 115
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_Send_A_String>
		LCD_GOTO_XY(2,0);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
		DDRA=0xFF;
		Set_Bit(DDRD,1);
		Reset_Bit(DDRD,0);			
		//sei(); // Enable global interrupts
		
		uint8_t key_pressed,i=0;
 426:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_init();
		LCD_GOTO_XY(1,0);
		LCD_Send_A_String("Enter Password 5 digits:");
		LCD_GOTO_XY(2,0);
		
		while (i<5)
 428:	1b c0       	rjmp	.+54     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		{
	    key_pressed = Keypad_getkey();
 42a:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getkey>
 42e:	d8 2f       	mov	r29, r24
		LCD_GOTO_XY(2,i);
 430:	6c 2f       	mov	r22, r28
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
	    switch(key_pressed){
 438:	df 33       	cpi	r29, 0x3F	; 63
 43a:	19 f0       	breq	.+6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43c:	d1 34       	cpi	r29, 0x41	; 65
 43e:	81 f0       	breq	.+32     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 440:	03 c0       	rjmp	.+6      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		    case 'A':
		    break;
		    case '?': //ON/C
		    LCD_clear_screen();
 442:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_clear_screen>
		    break;
 446:	0c c0       	rjmp	.+24     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		    default:
			LCD_GOTO_XY(2,i);
 448:	6c 2f       	mov	r22, r28
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
			Uart_Send(key_pressed);
 450:	8d 2f       	mov	r24, r29
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 a3 02 	call	0x546	; 0x546 <Uart_Send>
		    LCD_Send_A_Character('*');
 458:	8a e2       	ldi	r24, 0x2A	; 42
 45a:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_A_Character>
			i++;
 45e:	cf 5f       	subi	r28, 0xFF	; 255
		LCD_init();
		LCD_GOTO_XY(1,0);
		LCD_Send_A_String("Enter Password 5 digits:");
		LCD_GOTO_XY(2,0);
		
		while (i<5)
 460:	c5 30       	cpi	r28, 0x05	; 5
 462:	18 f3       	brcs	.-58     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		
				}
			}
			
		i=0;
		LCD_clear_screen();
 464:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_clear_screen>
		LCD_GOTO_XY(1,0);
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
		LCD_Send_A_String("Re-Enter Password");
 470:	8c e8       	ldi	r24, 0x8C	; 140
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_Send_A_String>
		LCD_GOTO_XY(2,0);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
		    break;
		
				}
			}
			
		i=0;
 480:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_clear_screen();
		LCD_GOTO_XY(1,0);
		LCD_Send_A_String("Re-Enter Password");
		LCD_GOTO_XY(2,0);
		while (i<5)
 482:	1b c0       	rjmp	.+54     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
		{
			key_pressed = Keypad_getkey();
 484:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getkey>
 488:	d8 2f       	mov	r29, r24
			LCD_GOTO_XY(2,i);
 48a:	6c 2f       	mov	r22, r28
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
			switch(key_pressed){
 492:	df 33       	cpi	r29, 0x3F	; 63
 494:	19 f0       	breq	.+6      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 496:	d1 34       	cpi	r29, 0x41	; 65
 498:	81 f0       	breq	.+32     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
				case 'A':
				break;
				case '?': //ON/C
				LCD_clear_screen();
 49c:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_clear_screen>
				break;
 4a0:	0c c0       	rjmp	.+24     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
				default:
				LCD_GOTO_XY(2,i);
 4a2:	6c 2f       	mov	r22, r28
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
				Uart_Send(key_pressed);
 4aa:	8d 2f       	mov	r24, r29
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 a3 02 	call	0x546	; 0x546 <Uart_Send>
				LCD_Send_A_Character('*');
 4b2:	8a e2       	ldi	r24, 0x2A	; 42
 4b4:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_A_Character>
				i++;
 4b8:	cf 5f       	subi	r28, 0xFF	; 255
		i=0;
		LCD_clear_screen();
		LCD_GOTO_XY(1,0);
		LCD_Send_A_String("Re-Enter Password");
		LCD_GOTO_XY(2,0);
		while (i<5)
 4ba:	c5 30       	cpi	r28, 0x05	; 5
 4bc:	18 f3       	brcs	.-58     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
// 		 }
// 		LCD_Send_A_String("Password Are Matched");
// 		_delay_ms(100);	
		
		i=0;
		LCD_clear_screen();
 4be:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_clear_screen>
		LCD_GOTO_XY(1,0);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
		LCD_Send_A_String("+ or -");
 4ca:	8e e9       	ldi	r24, 0x9E	; 158
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_Send_A_String>
		LCD_GOTO_XY(2,0);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
// 		 {
// 		 }
// 		LCD_Send_A_String("Password Are Matched");
// 		_delay_ms(100);	
		
		i=0;
 4da:	d0 e0       	ldi	r29, 0x00	; 0
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
				LCD_GOTO_XY(2,i);
				Uart_Send(key_pressed);
				LCD_Send_A_Character('*');
				i++;
				if(i==30){
					i=0;
 4de:	d0 e0       	ldi	r29, 0x00	; 0
		LCD_GOTO_XY(2,0);
		while (1)
		{

			
			key_pressed = Keypad_getkey();
 4e0:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getkey>
 4e4:	c8 2f       	mov	r28, r24
			LCD_GOTO_XY(2,i);
 4e6:	6d 2f       	mov	r22, r29
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
			switch(key_pressed){
 4ee:	cf 33       	cpi	r28, 0x3F	; 63
 4f0:	19 f0       	breq	.+6      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f2:	c1 34       	cpi	r28, 0x41	; 65
 4f4:	a9 f3       	breq	.-22     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
				case 'A':
				break;
				case '?': //ON/C
				LCD_clear_screen();
 4f8:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_clear_screen>
				break;
 4fc:	f1 cf       	rjmp	.-30     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
				default:
				LCD_GOTO_XY(2,i);
 4fe:	6d 2f       	mov	r22, r29
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
				Uart_Send(key_pressed);
 506:	8c 2f       	mov	r24, r28
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 a3 02 	call	0x546	; 0x546 <Uart_Send>
				LCD_Send_A_Character('*');
 50e:	8a e2       	ldi	r24, 0x2A	; 42
 510:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_A_Character>
				i++;
 514:	df 5f       	subi	r29, 0xFF	; 255
				if(i==30){
 516:	de 31       	cpi	r29, 0x1E	; 30
 518:	19 f7       	brne	.-58     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 51a:	e1 cf       	rjmp	.-62     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>

0000051c <Uart_init>:

void UART_Receive_String_Asyn(void){
	if (flag_receive ==1){
		flag_receive=0;
		RX_STR=data;
		UartRX_Interrupt_Enable();
 51c:	83 e3       	ldi	r24, 0x33	; 51
 51e:	89 b9       	out	0x09, r24	; 9
 520:	8b b1       	in	r24, 0x0b	; 11
 522:	8d 7f       	andi	r24, 0xFD	; 253
 524:	8b b9       	out	0x0b, r24	; 11
 526:	80 b5       	in	r24, 0x20	; 32
 528:	84 60       	ori	r24, 0x04	; 4
 52a:	80 bd       	out	0x20, r24	; 32
 52c:	80 b5       	in	r24, 0x20	; 32
 52e:	82 60       	ori	r24, 0x02	; 2
 530:	80 bd       	out	0x20, r24	; 32
 532:	8a b1       	in	r24, 0x0a	; 10
 534:	8b 7f       	andi	r24, 0xFB	; 251
 536:	8a b9       	out	0x0a, r24	; 10
 538:	8a b1       	in	r24, 0x0a	; 10
 53a:	88 60       	ori	r24, 0x08	; 8
 53c:	8a b9       	out	0x0a, r24	; 10
 53e:	8a b1       	in	r24, 0x0a	; 10
 540:	80 61       	ori	r24, 0x10	; 16
 542:	8a b9       	out	0x0a, r24	; 10
 544:	08 95       	ret

00000546 <Uart_Send>:
 546:	5d 9b       	sbis	0x0b, 5	; 11
 548:	fe cf       	rjmp	.-4      	; 0x546 <Uart_Send>
 54a:	8c b9       	out	0x0c, r24	; 12
 54c:	08 95       	ret

0000054e <Send_NoBlock>:
 54e:	8c b9       	out	0x0c, r24	; 12
 550:	08 95       	ret

00000552 <Receive_NoBlock>:
 552:	8c b1       	in	r24, 0x0c	; 12
 554:	08 95       	ret

00000556 <UartRX_Interrupt_Disable>:
 556:	8a b1       	in	r24, 0x0a	; 10
 558:	8f 77       	andi	r24, 0x7F	; 127
 55a:	8a b9       	out	0x0a, r24	; 10
 55c:	08 95       	ret

0000055e <__vector_15>:
}

//if UDR Transimeted then flag will be on

ISR(USART_TXC_vect)
{
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	4f 93       	push	r20
 56e:	5f 93       	push	r21
 570:	6f 93       	push	r22
 572:	7f 93       	push	r23
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
 578:	af 93       	push	r26
 57a:	bf 93       	push	r27
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
	// USART transmission complete interrupt handler
	// Perform some additional processing or initiate another transmission
	static uint8_t i =1;
	if (TX_STR[i] !=0)
 580:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <i.2215>
 584:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <TX_STR>
 588:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <TX_STR+0x1>
 58c:	e8 0f       	add	r30, r24
 58e:	f1 1d       	adc	r31, r1
 590:	80 81       	ld	r24, Z
 592:	88 23       	and	r24, r24
 594:	41 f0       	breq	.+16     	; 0x5a6 <__vector_15+0x48>
	{
		Send_NoBlock(TX_STR[i]);
 596:	0e 94 a7 02 	call	0x54e	; 0x54e <Send_NoBlock>
		i++;
 59a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <i.2215>
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <i.2215>
 5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <__vector_15+0x52>
	}
	else{
		i=1;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <i.2215>
		flag_send=1;
 5ac:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <flag_send>
	}
}
 5b0:	ff 91       	pop	r31
 5b2:	ef 91       	pop	r30
 5b4:	bf 91       	pop	r27
 5b6:	af 91       	pop	r26
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	7f 91       	pop	r23
 5be:	6f 91       	pop	r22
 5c0:	5f 91       	pop	r21
 5c2:	4f 91       	pop	r20
 5c4:	3f 91       	pop	r19
 5c6:	2f 91       	pop	r18
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <__vector_13>:

ISR(USART_RXC_vect){
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	2f 93       	push	r18
 5de:	3f 93       	push	r19
 5e0:	4f 93       	push	r20
 5e2:	5f 93       	push	r21
 5e4:	6f 93       	push	r22
 5e6:	7f 93       	push	r23
 5e8:	8f 93       	push	r24
 5ea:	9f 93       	push	r25
 5ec:	af 93       	push	r26
 5ee:	bf 93       	push	r27
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
	cli();
 5f8:	f8 94       	cli
	static uint8_t i =0;
	RX_STR[i] =Receive_NoBlock();
 5fa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 5fe:	c0 91 a7 00 	lds	r28, 0x00A7	; 0x8000a7 <RX_STR>
 602:	d0 91 a8 00 	lds	r29, 0x00A8	; 0x8000a8 <RX_STR+0x1>
 606:	c8 0f       	add	r28, r24
 608:	d1 1d       	adc	r29, r1
 60a:	0e 94 a9 02 	call	0x552	; 0x552 <Receive_NoBlock>
 60e:	88 83       	st	Y, r24
	LCD_GOTO_XY(2,i);
 610:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <__data_end>
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_GOTO_XY>
	LCD_Send_A_Character(RX_STR[i]);
 61a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 61e:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <RX_STR>
 622:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <RX_STR+0x1>
 626:	e8 0f       	add	r30, r24
 628:	f1 1d       	adc	r31, r1
 62a:	80 81       	ld	r24, Z
 62c:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Send_A_Character>
	
	if(RX_STR[i] == Default_Stop){
 630:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 634:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <RX_STR>
 638:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <RX_STR+0x1>
 63c:	e8 0f       	add	r30, r24
 63e:	f1 1d       	adc	r31, r1
 640:	80 81       	ld	r24, Z
 642:	8d 30       	cpi	r24, 0x0D	; 13
 644:	31 f4       	brne	.+12     	; 0x652 <__vector_13+0x80>
		RX_STR[i] = '\0';
 646:	10 82       	st	Z, r1
		flag_receive=1    ;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <flag_receive>
		UartRX_Interrupt_Disable();
 64e:	0e 94 ab 02 	call	0x556	; 0x556 <UartRX_Interrupt_Disable>
		
	}
	i++;
 652:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 656:	8f 5f       	subi	r24, 0xFF	; 255
 658:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
	sei();
 65c:	78 94       	sei
}
 65e:	ff 91       	pop	r31
 660:	ef 91       	pop	r30
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	bf 91       	pop	r27
 668:	af 91       	pop	r26
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	7f 91       	pop	r23
 670:	6f 91       	pop	r22
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
