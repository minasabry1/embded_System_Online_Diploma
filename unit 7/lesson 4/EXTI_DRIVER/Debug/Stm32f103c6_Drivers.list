
Stm32f103c6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c78  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000da8  08000da8  00010da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dd4  08000dd4  00010ddc  2**0
                  CONTENTS
  4 .ARM          00000000  08000dd4  08000dd4  00010ddc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dd4  08000ddc  00010ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dd4  08000dd4  00010dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dd8  08000dd8  00010dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000ddc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000ddc  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ddc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e57  00000000  00000000  00010e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a08  00000000  00000000  00014c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a8c  00000000  00000000  00015664  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d8  00000000  00000000  000160f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  000162c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000029aa  00000000  00000000  00016448  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000022e8  00000000  00000000  00018df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a830  00000000  00000000  0001b0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002590a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005ac  00000000  00000000  00025988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d90 	.word	0x08000d90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d90 	.word	0x08000d90

08000170 <LCD_clear_screen>:
 * @brief		-Clear my Screen
 * @param[in]	-none
 * @retval		-none
 * Note			-none
======================================================================================*/
void LCD_clear_screen (){//clears the LCD screen.
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
 8000174:	2001      	movs	r0, #1
 8000176:	f000 f8eb 	bl	8000350 <LCD_Send_A_Command>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
	...

08000180 <LCD_lcd_kick>:
 * @brief		-sends a pulse to the EN pin of the LCD to initiate a data transfer.
 * @param[in]	-none
 * @retval		-none
 * Note			-none
======================================================================================*/
void LCD_lcd_kick (void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	//Enable read at Falling(H>>L)
	MCAL_GPIO_WritePin(LCD_Control, Enable_Switch, GPIO_PIN_SET) ;
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018a:	4807      	ldr	r0, [pc, #28]	; (80001a8 <LCD_lcd_kick+0x28>)
 800018c:	f000 fad7 	bl	800073e <MCAL_GPIO_WritePin>
	my_wait(50);
 8000190:	2032      	movs	r0, #50	; 0x32
 8000192:	f000 f967 	bl	8000464 <my_wait>
	MCAL_GPIO_WritePin(LCD_Control, Enable_Switch, GPIO_PIN_RESET) ;
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <LCD_lcd_kick+0x28>)
 800019e:	f000 face 	bl	800073e <MCAL_GPIO_WritePin>

}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800

080001ac <LCD_GOTO_XY>:
 * @param[in]	-none
 * @retval		-none
 * Note			-none
======================================================================================*/

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d108      	bne.n	80001d4 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80001c2:	79bb      	ldrb	r3, [r7, #6]
 80001c4:	2b0f      	cmp	r3, #15
 80001c6:	d805      	bhi.n	80001d4 <LCD_GOTO_XY+0x28>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW+position);
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	3b80      	subs	r3, #128	; 0x80
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 f8be 	bl	8000350 <LCD_Send_A_Command>
		}
	}
	if (line == 2)
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	2b02      	cmp	r3, #2
 80001d8:	d108      	bne.n	80001ec <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	2b0f      	cmp	r3, #15
 80001de:	d805      	bhi.n	80001ec <LCD_GOTO_XY+0x40>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW+position);
 80001e0:	79bb      	ldrb	r3, [r7, #6]
 80001e2:	3b40      	subs	r3, #64	; 0x40
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 f8b2 	bl	8000350 <LCD_Send_A_Command>
		}
	}
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <LCD_init>:
 * @brief		-initializes the LCD display with the required settings.
 * @param[in]	-none
 * @retval		-none
 * Note			-none
======================================================================================*/
void LCD_init(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	my_wait(20);
 80001f8:	2014      	movs	r0, #20
 80001fa:	f000 f933 	bl	8000464 <my_wait>
	//LCD_check_lcd_isbusy();

	//Enable_Switch ..RW_SWITCH..RS_SWITCH.. are Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber=RS_SWITCH;
 80001fe:	4b52      	ldr	r3, [pc, #328]	; (8000348 <LCD_init+0x154>)
 8000200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000204:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000206:	4b50      	ldr	r3, [pc, #320]	; (8000348 <LCD_init+0x154>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800020c:	4b4e      	ldr	r3, [pc, #312]	; (8000348 <LCD_init+0x154>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 8000212:	494d      	ldr	r1, [pc, #308]	; (8000348 <LCD_init+0x154>)
 8000214:	484d      	ldr	r0, [pc, #308]	; (800034c <LCD_init+0x158>)
 8000216:	f000 fa15 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=RW_SWITCH;
 800021a:	4b4b      	ldr	r3, [pc, #300]	; (8000348 <LCD_init+0x154>)
 800021c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000220:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000222:	4b49      	ldr	r3, [pc, #292]	; (8000348 <LCD_init+0x154>)
 8000224:	2204      	movs	r2, #4
 8000226:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000228:	4b47      	ldr	r3, [pc, #284]	; (8000348 <LCD_init+0x154>)
 800022a:	2201      	movs	r2, #1
 800022c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 800022e:	4946      	ldr	r1, [pc, #280]	; (8000348 <LCD_init+0x154>)
 8000230:	4846      	ldr	r0, [pc, #280]	; (800034c <LCD_init+0x158>)
 8000232:	f000 fa07 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=Enable_Switch;
 8000236:	4b44      	ldr	r3, [pc, #272]	; (8000348 <LCD_init+0x154>)
 8000238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800023c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 800023e:	4b42      	ldr	r3, [pc, #264]	; (8000348 <LCD_init+0x154>)
 8000240:	2204      	movs	r2, #4
 8000242:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000244:	4b40      	ldr	r3, [pc, #256]	; (8000348 <LCD_init+0x154>)
 8000246:	2201      	movs	r2, #1
 8000248:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 800024a:	493f      	ldr	r1, [pc, #252]	; (8000348 <LCD_init+0x154>)
 800024c:	483f      	ldr	r0, [pc, #252]	; (800034c <LCD_init+0x158>)
 800024e:	f000 f9f9 	bl	8000644 <MCAL_GPIO_INIT>
	////////////////////////////////////////////////////////////////////////

	my_wait(15);
 8000252:	200f      	movs	r0, #15
 8000254:	f000 f906 	bl	8000464 <my_wait>

	//Pin /A0>>A7 is OUTPUT
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber=GPIO_PIN_0;
 8000258:	4b3b      	ldr	r3, [pc, #236]	; (8000348 <LCD_init+0x154>)
 800025a:	2201      	movs	r2, #1
 800025c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 800025e:	4b3a      	ldr	r3, [pc, #232]	; (8000348 <LCD_init+0x154>)
 8000260:	2204      	movs	r2, #4
 8000262:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000264:	4b38      	ldr	r3, [pc, #224]	; (8000348 <LCD_init+0x154>)
 8000266:	2201      	movs	r2, #1
 8000268:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 800026a:	4937      	ldr	r1, [pc, #220]	; (8000348 <LCD_init+0x154>)
 800026c:	4837      	ldr	r0, [pc, #220]	; (800034c <LCD_init+0x158>)
 800026e:	f000 f9e9 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_1;
 8000272:	4b35      	ldr	r3, [pc, #212]	; (8000348 <LCD_init+0x154>)
 8000274:	2202      	movs	r2, #2
 8000276:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000278:	4b33      	ldr	r3, [pc, #204]	; (8000348 <LCD_init+0x154>)
 800027a:	2204      	movs	r2, #4
 800027c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800027e:	4b32      	ldr	r3, [pc, #200]	; (8000348 <LCD_init+0x154>)
 8000280:	2201      	movs	r2, #1
 8000282:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 8000284:	4930      	ldr	r1, [pc, #192]	; (8000348 <LCD_init+0x154>)
 8000286:	4831      	ldr	r0, [pc, #196]	; (800034c <LCD_init+0x158>)
 8000288:	f000 f9dc 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_2;
 800028c:	4b2e      	ldr	r3, [pc, #184]	; (8000348 <LCD_init+0x154>)
 800028e:	2204      	movs	r2, #4
 8000290:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000292:	4b2d      	ldr	r3, [pc, #180]	; (8000348 <LCD_init+0x154>)
 8000294:	2204      	movs	r2, #4
 8000296:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000298:	4b2b      	ldr	r3, [pc, #172]	; (8000348 <LCD_init+0x154>)
 800029a:	2201      	movs	r2, #1
 800029c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 800029e:	492a      	ldr	r1, [pc, #168]	; (8000348 <LCD_init+0x154>)
 80002a0:	482a      	ldr	r0, [pc, #168]	; (800034c <LCD_init+0x158>)
 80002a2:	f000 f9cf 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_3;
 80002a6:	4b28      	ldr	r3, [pc, #160]	; (8000348 <LCD_init+0x154>)
 80002a8:	2208      	movs	r2, #8
 80002aa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80002ac:	4b26      	ldr	r3, [pc, #152]	; (8000348 <LCD_init+0x154>)
 80002ae:	2204      	movs	r2, #4
 80002b0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80002b2:	4b25      	ldr	r3, [pc, #148]	; (8000348 <LCD_init+0x154>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 80002b8:	4923      	ldr	r1, [pc, #140]	; (8000348 <LCD_init+0x154>)
 80002ba:	4824      	ldr	r0, [pc, #144]	; (800034c <LCD_init+0x158>)
 80002bc:	f000 f9c2 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_4;
 80002c0:	4b21      	ldr	r3, [pc, #132]	; (8000348 <LCD_init+0x154>)
 80002c2:	2210      	movs	r2, #16
 80002c4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80002c6:	4b20      	ldr	r3, [pc, #128]	; (8000348 <LCD_init+0x154>)
 80002c8:	2204      	movs	r2, #4
 80002ca:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <LCD_init+0x154>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 80002d2:	491d      	ldr	r1, [pc, #116]	; (8000348 <LCD_init+0x154>)
 80002d4:	481d      	ldr	r0, [pc, #116]	; (800034c <LCD_init+0x158>)
 80002d6:	f000 f9b5 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_5;
 80002da:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <LCD_init+0x154>)
 80002dc:	2220      	movs	r2, #32
 80002de:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80002e0:	4b19      	ldr	r3, [pc, #100]	; (8000348 <LCD_init+0x154>)
 80002e2:	2204      	movs	r2, #4
 80002e4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <LCD_init+0x154>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 80002ec:	4916      	ldr	r1, [pc, #88]	; (8000348 <LCD_init+0x154>)
 80002ee:	4817      	ldr	r0, [pc, #92]	; (800034c <LCD_init+0x158>)
 80002f0:	f000 f9a8 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_6;
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <LCD_init+0x154>)
 80002f6:	2240      	movs	r2, #64	; 0x40
 80002f8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <LCD_init+0x154>)
 80002fc:	2204      	movs	r2, #4
 80002fe:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <LCD_init+0x154>)
 8000302:	2201      	movs	r2, #1
 8000304:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 8000306:	4910      	ldr	r1, [pc, #64]	; (8000348 <LCD_init+0x154>)
 8000308:	4810      	ldr	r0, [pc, #64]	; (800034c <LCD_init+0x158>)
 800030a:	f000 f99b 	bl	8000644 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_7;
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <LCD_init+0x154>)
 8000310:	2280      	movs	r2, #128	; 0x80
 8000312:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <LCD_init+0x154>)
 8000316:	2204      	movs	r2, #4
 8000318:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <LCD_init+0x154>)
 800031c:	2201      	movs	r2, #1
 800031e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 8000320:	4909      	ldr	r1, [pc, #36]	; (8000348 <LCD_init+0x154>)
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <LCD_init+0x158>)
 8000324:	f000 f98e 	bl	8000644 <MCAL_GPIO_INIT>
	LCD_clear_screen();
 8000328:	f7ff ff22 	bl	8000170 <LCD_clear_screen>

	//#ifdef Eight_Bit_Mode

		LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
 800032c:	2038      	movs	r0, #56	; 0x38
 800032e:	f000 f80f 	bl	8000350 <LCD_Send_A_Command>
	//#ifdef Four_Bit_Mode
	//	LCD_Send_A_Command(0x02);
	//	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
	//#endif // Eight_Bit_Mode

		LCD_Send_A_Command(LCD_ENTRY_MODE);
 8000332:	2006      	movs	r0, #6
 8000334:	f000 f80c 	bl	8000350 <LCD_Send_A_Command>
		LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 8000338:	2080      	movs	r0, #128	; 0x80
 800033a:	f000 f809 	bl	8000350 <LCD_Send_A_Command>
		LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);
 800033e:	200f      	movs	r0, #15
 8000340:	f000 f806 	bl	8000350 <LCD_Send_A_Command>


}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000020 	.word	0x20000020
 800034c:	40010800 	.word	0x40010800

08000350 <LCD_Send_A_Command>:
 * @param[in]	-none
 * @retval		-none
 * Note			-send commands already intialized at datasheet and there are steps for doing it.
======================================================================================*/

void LCD_Send_A_Command(unsigned char command){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	//#ifdef Eight_Bit_Mode
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_Control, command);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	b29b      	uxth	r3, r3
 800035e:	4619      	mov	r1, r3
 8000360:	480b      	ldr	r0, [pc, #44]	; (8000390 <LCD_Send_A_Command+0x40>)
 8000362:	f000 fa03 	bl	800076c <MCAL_GPIO_WritePort>
	//LCD_Control &=~((1 << RS_SWITCH) | (1<<RW_SWITCH)) ;//PortB
	MCAL_GPIO_WritePin(LCD_Control, RS_SWITCH, GPIO_PIN_RESET) ;
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036c:	4808      	ldr	r0, [pc, #32]	; (8000390 <LCD_Send_A_Command+0x40>)
 800036e:	f000 f9e6 	bl	800073e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control, RW_SWITCH, GPIO_PIN_RESET) ;
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <LCD_Send_A_Command+0x40>)
 800037a:	f000 f9e0 	bl	800073e <MCAL_GPIO_WritePin>
	my_wait(1);
 800037e:	2001      	movs	r0, #1
 8000380:	f000 f870 	bl	8000464 <my_wait>
	LCD_lcd_kick();
 8000384:	f7ff fefc 	bl	8000180 <LCD_lcd_kick>
	//	my_wait(100);
	//	LCD_Control = (LCD_Control & 0x0F) | (command << 4);
	//	LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	//	LCD_lcd_kick();
	//#endif
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40010800 	.word	0x40010800

08000394 <LCD_Send_A_Character>:
 * @param[in]	-none
 * @retval		-none
 * Note			-none
 * */

void LCD_Send_A_Character(unsigned char character){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	//#ifdef Eight_Bit_Mode
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_Control, character);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	480b      	ldr	r0, [pc, #44]	; (80003d4 <LCD_Send_A_Character+0x40>)
 80003a6:	f000 f9e1 	bl	800076c <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_Control, RS_SWITCH, GPIO_PIN_SET) ;
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b0:	4808      	ldr	r0, [pc, #32]	; (80003d4 <LCD_Send_A_Character+0x40>)
 80003b2:	f000 f9c4 	bl	800073e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control, RW_SWITCH, GPIO_PIN_RESET) ;
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <LCD_Send_A_Character+0x40>)
 80003be:	f000 f9be 	bl	800073e <MCAL_GPIO_WritePin>

	my_wait(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 f84e 	bl	8000464 <my_wait>
	LCD_lcd_kick();
 80003c8:	f7ff feda 	bl	8000180 <LCD_lcd_kick>
	//	LCD_lcd_kick();
	//#endif
	//}


}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40010800 	.word	0x40010800

080003d8 <LCD_Send_String>:
void LCD_Send_String(char* string){//: writes a string of characters to the LCD display.
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

		int count = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
		while (*string > 0){// if became at end will be =0
 80003e4:	e01c      	b.n	8000420 <LCD_Send_String+0x48>
			count++;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
			LCD_Send_A_Character(*string++);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	1c5a      	adds	r2, r3, #1
 80003f0:	607a      	str	r2, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ffcd 	bl	8000394 <LCD_Send_A_Character>
			if (count == 16)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	2b10      	cmp	r3, #16
 80003fe:	d104      	bne.n	800040a <LCD_Send_String+0x32>
			{
				LCD_GOTO_XY(2,0);
 8000400:	2100      	movs	r1, #0
 8000402:	2002      	movs	r0, #2
 8000404:	f7ff fed2 	bl	80001ac <LCD_GOTO_XY>
 8000408:	e00a      	b.n	8000420 <LCD_Send_String+0x48>
			}
			else if (count == 31)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2b1f      	cmp	r3, #31
 800040e:	d107      	bne.n	8000420 <LCD_Send_String+0x48>
			{
				LCD_clear_screen();
 8000410:	f7ff feae 	bl	8000170 <LCD_clear_screen>
				LCD_GOTO_XY(1,0);
 8000414:	2100      	movs	r1, #0
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff fec8 	bl	80001ac <LCD_GOTO_XY>
				count = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
		while (*string > 0){// if became at end will be =0
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1de      	bne.n	80003e6 <LCD_Send_String+0xe>
			}
		}
	}
 8000428:	bf00      	nop
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <clock_Init>:
#include "LCD.h"
#include "Stm32_f103c6_Drivers_EXTI.h"


//#include "KEY_PAD.h"
void clock_Init(){
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();//For LCD
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <clock_Init+0x30>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <clock_Init+0x30>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();//Floating Input
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <clock_Init+0x30>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a06      	ldr	r2, [pc, #24]	; (8000460 <clock_Init+0x30>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();//AFIO
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <clock_Init+0x30>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a03      	ldr	r2, [pc, #12]	; (8000460 <clock_Init+0x30>)
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6193      	str	r3, [r2, #24]

}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <my_wait>:
void GPIOB_INIT(){


}
my_wait(int a){
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<a;i++)
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	e00b      	b.n	800048a <my_wait+0x26>
		for(j=0;j<255;j++);
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	e002      	b.n	800047e <my_wait+0x1a>
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	3301      	adds	r3, #1
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	2bfe      	cmp	r3, #254	; 0xfe
 8000482:	d9f9      	bls.n	8000478 <my_wait+0x14>
	for(i=0;i<a;i++)
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3301      	adds	r3, #1
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	429a      	cmp	r2, r3
 8000490:	d3ef      	bcc.n	8000472 <my_wait+0xe>
}
 8000492:	bf00      	nop
 8000494:	4618      	mov	r0, r3
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
	...

080004a0 <EXTI9_CALLBACK>:
void EXTI9_CALLBACK(void){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	IRQ_Flag=1;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <EXTI9_CALLBACK+0x28>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
	LCD_Send_String("IRQ EXTI9 PORTB");
 80004aa:	4808      	ldr	r0, [pc, #32]	; (80004cc <EXTI9_CALLBACK+0x2c>)
 80004ac:	f7ff ff94 	bl	80003d8 <LCD_Send_String>
	LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW);
 80004b0:	20c0      	movs	r0, #192	; 0xc0
 80004b2:	f7ff ff4d 	bl	8000350 <LCD_Send_A_Command>
	LCD_Send_String("IRQ DONE _|-");
 80004b6:	4806      	ldr	r0, [pc, #24]	; (80004d0 <EXTI9_CALLBACK+0x30>)
 80004b8:	f7ff ff8e 	bl	80003d8 <LCD_Send_String>
	my_wait(1000);
 80004bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c0:	f7ff ffd0 	bl	8000464 <my_wait>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000001c 	.word	0x2000001c
 80004cc:	08000da8 	.word	0x08000da8
 80004d0:	08000db8 	.word	0x08000db8

080004d4 <main>:
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
	//Enable clock
	clock_Init();
 80004da:	f7ff ffa9 	bl	8000430 <clock_Init>
	//Enable LCD
	LCD_init();
 80004de:	f7ff fe89 	bl	80001f4 <LCD_init>
	//Clear LCD
	LCD_clear_screen();
 80004e2:	f7ff fe45 	bl	8000170 <LCD_clear_screen>
	//EXTI Input == EXTI9>>Port B Pin 9
	EXTI_Pinconfig_t CFG;
	CFG.EXTI_PIN=EXTI9PB9;
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <main+0x4c>)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Raising
	CFG.Trigger_Case=EXTI_TRIGGER_RAISING;
 80004f0:	2300      	movs	r3, #0
 80004f2:	743b      	strb	r3, [r7, #16]
	//Call >> CallBack == EXTI9_CALLBACK
	CFG.P_IRQ_CALLBACK=EXTI9_CALLBACK;
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <main+0x50>)
 80004f6:	617b      	str	r3, [r7, #20]
	//Enable IRQ Mask
	CFG.IRQ_EN=EXTI_IRQ_ENABLE;
 80004f8:	2301      	movs	r3, #1
 80004fa:	747b      	strb	r3, [r7, #17]

	//Init CFG
	MCAL_EXTI_GPIO_Init(&CFG);
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fc16 	bl	8000d30 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag=1;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <main+0x54>)
 8000506:	2201      	movs	r2, #1
 8000508:	601a      	str	r2, [r3, #0]
	while(1){
		if(IRQ_Flag){
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <main+0x54>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0fb      	beq.n	800050a <main+0x36>
			//Clear LCD
			LCD_clear_screen();
 8000512:	f7ff fe2d 	bl	8000170 <LCD_clear_screen>
			IRQ_Flag=1;
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <main+0x54>)
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag){
 800051c:	e7f5      	b.n	800050a <main+0x36>
 800051e:	bf00      	nop
 8000520:	08000dc8 	.word	0x08000dc8
 8000524:	080004a1 	.word	0x080004a1
 8000528:	2000001c 	.word	0x2000001c

0800052c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055a:	f000 fbf5 	bl	8000d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff ffb9 	bl	80004d4 <main>

08000562 <LoopForever>:

LoopForever:
    b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000570:	08000ddc 	.word	0x08000ddc
  ldr r2, =_sbss
 8000574:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000578:	20000064 	.word	0x20000064

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>

0800057e <Get_CRLH_Position>:
 * @param[in]	-PinNumber: which  pinGet_CRLH_Position number according @ref
 * 				 GPIO PINS_define to get bit
 * @retval		-Starting bit
 * Note			-none
======================================================================================*/
uint8_t Get_CRLH_Position(uint16_t PinNumber){
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	4603      	mov	r3, r0
 8000586:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	2b80      	cmp	r3, #128	; 0x80
 800058c:	d042      	beq.n	8000614 <Get_CRLH_Position+0x96>
 800058e:	2b80      	cmp	r3, #128	; 0x80
 8000590:	dc11      	bgt.n	80005b6 <Get_CRLH_Position+0x38>
 8000592:	2b08      	cmp	r3, #8
 8000594:	d036      	beq.n	8000604 <Get_CRLH_Position+0x86>
 8000596:	2b08      	cmp	r3, #8
 8000598:	dc06      	bgt.n	80005a8 <Get_CRLH_Position+0x2a>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d02e      	beq.n	80005fc <Get_CRLH_Position+0x7e>
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d02e      	beq.n	8000600 <Get_CRLH_Position+0x82>
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d028      	beq.n	80005f8 <Get_CRLH_Position+0x7a>
 80005a6:	e047      	b.n	8000638 <Get_CRLH_Position+0xba>
 80005a8:	2b20      	cmp	r3, #32
 80005aa:	d02f      	beq.n	800060c <Get_CRLH_Position+0x8e>
 80005ac:	2b40      	cmp	r3, #64	; 0x40
 80005ae:	d02f      	beq.n	8000610 <Get_CRLH_Position+0x92>
 80005b0:	2b10      	cmp	r3, #16
 80005b2:	d029      	beq.n	8000608 <Get_CRLH_Position+0x8a>
 80005b4:	e040      	b.n	8000638 <Get_CRLH_Position+0xba>
 80005b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ba:	d033      	beq.n	8000624 <Get_CRLH_Position+0xa6>
 80005bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005c0:	dc09      	bgt.n	80005d6 <Get_CRLH_Position+0x58>
 80005c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005c6:	d029      	beq.n	800061c <Get_CRLH_Position+0x9e>
 80005c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005cc:	d028      	beq.n	8000620 <Get_CRLH_Position+0xa2>
 80005ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005d2:	d021      	beq.n	8000618 <Get_CRLH_Position+0x9a>
 80005d4:	e030      	b.n	8000638 <Get_CRLH_Position+0xba>
 80005d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005da:	d027      	beq.n	800062c <Get_CRLH_Position+0xae>
 80005dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e0:	dc03      	bgt.n	80005ea <Get_CRLH_Position+0x6c>
 80005e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005e6:	d01f      	beq.n	8000628 <Get_CRLH_Position+0xaa>
 80005e8:	e026      	b.n	8000638 <Get_CRLH_Position+0xba>
 80005ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005ee:	d01f      	beq.n	8000630 <Get_CRLH_Position+0xb2>
 80005f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005f4:	d01e      	beq.n	8000634 <Get_CRLH_Position+0xb6>
 80005f6:	e01f      	b.n	8000638 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e01e      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	e01c      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000600:	2308      	movs	r3, #8
 8000602:	e01a      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000604:	230c      	movs	r3, #12
 8000606:	e018      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000608:	2310      	movs	r3, #16
 800060a:	e016      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800060c:	2314      	movs	r3, #20
 800060e:	e014      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000610:	2318      	movs	r3, #24
 8000612:	e012      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000614:	231c      	movs	r3, #28
 8000616:	e010      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000618:	2300      	movs	r3, #0
 800061a:	e00e      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800061c:	2304      	movs	r3, #4
 800061e:	e00c      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000620:	2308      	movs	r3, #8
 8000622:	e00a      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000624:	230c      	movs	r3, #12
 8000626:	e008      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000628:	2310      	movs	r3, #16
 800062a:	e006      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800062c:	2314      	movs	r3, #20
 800062e:	e004      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000630:	2318      	movs	r3, #24
 8000632:	e002      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000634:	231c      	movs	r3, #28
 8000636:	e000      	b.n	800063a <Get_CRLH_Position+0xbc>
		break;


	}
	return 0;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <MCAL_GPIO_INIT>:
 *				 the configuration information for the specified GPIO PIN.
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,but LQFP48 Package
 * 				 has only GPIO A,B,PART of C/D exported as external PINS from the M
======================================================================================*/
void MCAL_GPIO_INIT(GPIO_Typedef *GPIOX, GPIO_PIN_CONFIG_T *PinConfig){
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) (x=A..G) >> Configure pin0>>pin7
	//Port configuration register High (GPIOx_CRL) (x=A..G) >> Configure pin8>>pin15

	volatile uint32_t* ConfigRegister=NULL; //4 bytes because CRL OR CRH Are 4 Bytes REGISTER
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config=0;//1 Byte >>Need ONLY 4 Bits for MODE&CNY
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
	ConfigRegister=(PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;//if GPIO's pin less than 8 so ConfigRegister will have address of CRL else will have CRH
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	2bff      	cmp	r3, #255	; 0xff
 800065c:	d801      	bhi.n	8000662 <MCAL_GPIO_INIT+0x1e>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	e001      	b.n	8000666 <MCAL_GPIO_INIT+0x22>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3304      	adds	r3, #4
 8000666:	60bb      	str	r3, [r7, #8]

	//Clear MODEy[1:0]: & CNFy[1:0]:
	(*ConfigRegister) &=~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));// 1111 will be shifter to Bit's Number of Pin Number and will be cleared
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff86 	bl	800057e <Get_CRLH_Position>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	230f      	movs	r3, #15
 8000678:	4093      	lsls	r3, r2
 800067a:	43da      	mvns	r2, r3
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	401a      	ands	r2, r3
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	601a      	str	r2, [r3, #0]

	//Want to know if the mode OUT OR IN and whats its CNY
	//01: Floating input (reset state)

	if((PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_PP) ||
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d00b      	beq.n	80006a6 <MCAL_GPIO_INIT+0x62>
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	2b06      	cmp	r3, #6
 8000694:	d007      	beq.n	80006a6 <MCAL_GPIO_INIT+0x62>
			(PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_PP)){
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_PP) ||
 800069a:	2b05      	cmp	r3, #5
 800069c:	d003      	beq.n	80006a6 <MCAL_GPIO_INIT+0x62>
			(PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_PP)){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d10e      	bne.n	80006c4 <MCAL_GPIO_INIT+0x80>
		Pin_Config =( (((PinConfig->GPIO_PinMode -4)<<2) | (PinConfig->GPIO_output_speed)) &0x0f);//&0x0f to ensure that the first 4 bits are only set.
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	3b04      	subs	r3, #4
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f003 030f 	and.w	r3, r3, #15
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	e02a      	b.n	800071a <MCAL_GPIO_INIT+0xd6>
	}

	else{ //MODE = 00: Input mode (reset state)
		if((PinConfig ->GPIO_PinMode == GPIO_MODE_INPUT_FLO) ||(PinConfig ->GPIO_PinMode == GPIO_MODE_ANALOG) ){
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d003      	beq.n	80006d4 <MCAL_GPIO_INIT+0x90>
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	789b      	ldrb	r3, [r3, #2]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d107      	bne.n	80006e4 <MCAL_GPIO_INIT+0xa0>
			//Set alwasy MODE [1:0]00
			Pin_Config =( (((PinConfig->GPIO_PinMode )<<2) | 0x0) &0x0f);//&0x0f to ensure that the first 4 bits are only set.
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	e01a      	b.n	800071a <MCAL_GPIO_INIT+0xd6>
		}

		else if((PinConfig ->GPIO_PinMode == GPIO_MODE_AF_INPUT)){ //Will BE input floating
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d102      	bne.n	80006f2 <MCAL_GPIO_INIT+0xae>
			Pin_Config =( (((GPIO_MODE_INPUT_FLO)<<2) | 0x0) &0x0f);
 80006ec:	2304      	movs	r3, #4
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e013      	b.n	800071a <MCAL_GPIO_INIT+0xd6>
		}
		else{//PU OR PD Input
			Pin_Config =( (((GPIO_MODE_INPUT_PU)<<2) | 0x0) &0x0f);
 80006f2:	2308      	movs	r3, #8
 80006f4:	73fb      	strb	r3, [r7, #15]
			if(PinConfig ->GPIO_PinMode == GPIO_MODE_INPUT_PU){
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	789b      	ldrb	r3, [r3, #2]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d105      	bne.n	800070a <MCAL_GPIO_INIT+0xc6>
				//Table 20 >> ODR -->1
				GPIOX->ODR = PinConfig->GPIO_PinNumber; //GPIO_PinNumber Already 1<<NO
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	e007      	b.n	800071a <MCAL_GPIO_INIT+0xd6>
			}
			else{
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber); //GPIO_PinNumber Already 0<<NO
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	8812      	ldrh	r2, [r2, #0]
 8000712:	43d2      	mvns	r2, r2
 8000714:	401a      	ands	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*ConfigRegister) |= ((Pin_Config)<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));//Shift Left the Pin_Config which have 4 Bits of MODE&CY to Pin Number.
 800071a:	7bfc      	ldrb	r4, [r7, #15]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff2c 	bl	800057e <Get_CRLH_Position>
 8000726:	4603      	mov	r3, r0
 8000728:	fa04 f203 	lsl.w	r2, r4, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	431a      	orrs	r2, r3
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	601a      	str	r2, [r3, #0]

}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}

0800073e <MCAL_GPIO_WritePin>:
 * @param[in]	-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @param[in]	-value: Pin Value
 * @retval		-none
 * Note			-none
======================================================================================*/
void MCAL_GPIO_WritePin(GPIO_Typedef *GPIOX,uint16_t PinNumber,uint8_t Value){
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	460b      	mov	r3, r1
 8000748:	807b      	strh	r3, [r7, #2]
 800074a:	4613      	mov	r3, r2
 800074c:	707b      	strb	r3, [r7, #1]
	//1st method
	if(Value != GPIO_PIN_RESET){
 800074e:	787b      	ldrb	r3, [r7, #1]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d003      	beq.n	800075c <MCAL_GPIO_WritePin+0x1e>
		//2nd Method
		//		BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bi
		GPIOX->BSRR=(uint32_t)PinNumber;//only Read
 8000754:	887a      	ldrh	r2, [r7, #2]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	611a      	str	r2, [r3, #16]
	//	1: Reset the corresponding ODRx bit
	else{
		GPIOX->BRR =(uint32_t)PinNumber;
	}

}
 800075a:	e002      	b.n	8000762 <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR =(uint32_t)PinNumber;
 800075c:	887a      	ldrh	r2, [r7, #2]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	615a      	str	r2, [r3, #20]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <MCAL_GPIO_WritePort>:
 * @param[in]	-value: port Value to be written
 * @retval		-none
 * Note			-none
======================================================================================*/

void MCAL_GPIO_WritePort(GPIO_Typedef *GPIOX,uint16_t Value){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]

	GPIOX->ODR=Value;
 8000778:	887a      	ldrh	r2, [r7, #2]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60da      	str	r2, [r3, #12]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <EXTI0_IRQHandler>:

/*=====================================================================================
 *                        GENERIRC MACROS
 *=====================================================================================	*/
//THIS EXTIx_IRQHandler; Call automatically when the IRQ happened
void EXTI0_IRQHandler() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	//Clear EXTI_PR at First
	EXTI_PR->PR |= (1 << 0);
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <EXTI0_IRQHandler+0x1c>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <EXTI0_IRQHandler+0x1c>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6153      	str	r3, [r2, #20]
	//Call IRQ_Call
	GP_IRQ_CALLBACK[0]();
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <EXTI0_IRQHandler+0x20>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4798      	blx	r3
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40010400 	.word	0x40010400
 80007a8:	20000024 	.word	0x20000024

080007ac <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	EXTI_PR->PR |= (1 << 1);
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <EXTI1_IRQHandler+0x1c>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <EXTI1_IRQHandler+0x1c>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <EXTI1_IRQHandler+0x20>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	4798      	blx	r3
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010400 	.word	0x40010400
 80007cc:	20000024 	.word	0x20000024

080007d0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	EXTI_PR->PR |= (1 << 2);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <EXTI2_IRQHandler+0x1c>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <EXTI2_IRQHandler+0x1c>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <EXTI2_IRQHandler+0x20>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	4798      	blx	r3
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40010400 	.word	0x40010400
 80007f0:	20000024 	.word	0x20000024

080007f4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	EXTI_PR->PR |= (1 << 3);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <EXTI3_IRQHandler+0x1c>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <EXTI3_IRQHandler+0x1c>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <EXTI3_IRQHandler+0x20>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4798      	blx	r3
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010400 	.word	0x40010400
 8000814:	20000024 	.word	0x20000024

08000818 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	EXTI_PR->PR |= (1 << 4);
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <EXTI4_IRQHandler+0x1c>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <EXTI4_IRQHandler+0x1c>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <EXTI4_IRQHandler+0x20>)
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	4798      	blx	r3
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010400 	.word	0x40010400
 8000838:	20000024 	.word	0x20000024

0800083c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {//When IRQ Happened the PR Already Happened.
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	if (EXTI_PR->PR & (1 << 5)) {
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	f003 0320 	and.w	r3, r3, #32
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <EXTI9_5_IRQHandler+0x24>
		EXTI_PR->PR |= (1 << 5);
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[5]();
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <EXTI9_5_IRQHandler+0xac>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	4798      	blx	r3
		GP_IRQ_CALLBACK[8]();
	} else if (EXTI_PR->PR & (1 << 9)) {
		EXTI_PR->PR |= (1 << 9);
		GP_IRQ_CALLBACK[9]();
	}
}
 800085e:	e03e      	b.n	80008de <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI_PR->PR & (1 << 6)) {
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000868:	2b00      	cmp	r3, #0
 800086a:	d009      	beq.n	8000880 <EXTI9_5_IRQHandler+0x44>
		EXTI_PR->PR |= (1 << 6);
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 8000872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000876:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[6]();
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <EXTI9_5_IRQHandler+0xac>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4798      	blx	r3
}
 800087e:	e02e      	b.n	80008de <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI_PR->PR & (1 << 7)) {
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000888:	2b00      	cmp	r3, #0
 800088a:	d009      	beq.n	80008a0 <EXTI9_5_IRQHandler+0x64>
		EXTI_PR->PR |= (1 << 7);
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 8000892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000896:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[7]();
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <EXTI9_5_IRQHandler+0xac>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	4798      	blx	r3
}
 800089e:	e01e      	b.n	80008de <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI_PR->PR & (1 << 8)) {
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d009      	beq.n	80008c0 <EXTI9_5_IRQHandler+0x84>
		EXTI_PR->PR |= (1 << 8);
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[8]();
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <EXTI9_5_IRQHandler+0xac>)
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4798      	blx	r3
}
 80008be:	e00e      	b.n	80008de <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI_PR->PR & (1 << 9)) {
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d008      	beq.n	80008de <EXTI9_5_IRQHandler+0xa2>
		EXTI_PR->PR |= (1 << 9);
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <EXTI9_5_IRQHandler+0xa8>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[9]();
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <EXTI9_5_IRQHandler+0xac>)
 80008da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008dc:	4798      	blx	r3
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010400 	.word	0x40010400
 80008e8:	20000024 	.word	0x20000024

080008ec <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	if (EXTI_PR->PR & (1 << 10)) {
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d009      	beq.n	8000910 <EXTI15_10_IRQHandler+0x24>
		EXTI_PR->PR |= (1 << 10);
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000906:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[10]();
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <EXTI15_10_IRQHandler+0xcc>)
 800090a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090c:	4798      	blx	r3
	} else if (EXTI_PR->PR & (1 << 15)) {
		EXTI_PR->PR |= (1 << 15);
		GP_IRQ_CALLBACK[15]();
	}

}
 800090e:	e04e      	b.n	80009ae <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 11)) {
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000918:	2b00      	cmp	r3, #0
 800091a:	d009      	beq.n	8000930 <EXTI15_10_IRQHandler+0x44>
		EXTI_PR->PR |= (1 << 11);
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000922:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000926:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[11]();
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <EXTI15_10_IRQHandler+0xcc>)
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	4798      	blx	r3
}
 800092e:	e03e      	b.n	80009ae <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 12)) {
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d009      	beq.n	8000950 <EXTI15_10_IRQHandler+0x64>
		EXTI_PR->PR |= (1 << 12);
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000946:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[12]();
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <EXTI15_10_IRQHandler+0xcc>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4798      	blx	r3
}
 800094e:	e02e      	b.n	80009ae <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 13)) {
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <EXTI15_10_IRQHandler+0x84>
		EXTI_PR->PR |= (1 << 13);
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000962:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000966:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[13]();
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <EXTI15_10_IRQHandler+0xcc>)
 800096a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096c:	4798      	blx	r3
}
 800096e:	e01e      	b.n	80009ae <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 14)) {
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000978:	2b00      	cmp	r3, #0
 800097a:	d009      	beq.n	8000990 <EXTI15_10_IRQHandler+0xa4>
		EXTI_PR->PR |= (1 << 14);
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[14]();
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <EXTI15_10_IRQHandler+0xcc>)
 800098a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098c:	4798      	blx	r3
}
 800098e:	e00e      	b.n	80009ae <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 15)) {
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <EXTI15_10_IRQHandler+0xc2>
		EXTI_PR->PR |= (1 << 15);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <EXTI15_10_IRQHandler+0xc8>)
 80009a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[15]();
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <EXTI15_10_IRQHandler+0xcc>)
 80009aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ac:	4798      	blx	r3
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010400 	.word	0x40010400
 80009b8:	20000024 	.word	0x20000024

080009bc <Enable_NVIC>:
/*=====================================================================================
 *                        GENERIRC FUNCTIONS DESCRIPTIONS
 *=====================================================================================
 * */

void Enable_NVIC(uint16_t IRQ){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	switch (IRQ){
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d854      	bhi.n	8000a76 <Enable_NVIC+0xba>
 80009cc:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <Enable_NVIC+0x18>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	08000a15 	.word	0x08000a15
 80009d8:	08000a23 	.word	0x08000a23
 80009dc:	08000a31 	.word	0x08000a31
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000a4d 	.word	0x08000a4d
 80009e8:	08000a5b 	.word	0x08000a5b
 80009ec:	08000a5b 	.word	0x08000a5b
 80009f0:	08000a5b 	.word	0x08000a5b
 80009f4:	08000a5b 	.word	0x08000a5b
 80009f8:	08000a5b 	.word	0x08000a5b
 80009fc:	08000a69 	.word	0x08000a69
 8000a00:	08000a69 	.word	0x08000a69
 8000a04:	08000a69 	.word	0x08000a69
 8000a08:	08000a69 	.word	0x08000a69
 8000a0c:	08000a69 	.word	0x08000a69
 8000a10:	08000a69 	.word	0x08000a69
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1e:	6013      	str	r3, [r2, #0]
		break;
 8000a20:	e029      	b.n	8000a76 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6013      	str	r3, [r2, #0]
		break;
 8000a2e:	e022      	b.n	8000a76 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
		break;
 8000a3c:	e01b      	b.n	8000a76 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a48:	6013      	str	r3, [r2, #0]
		break;
 8000a4a:	e014      	b.n	8000a76 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
		break;
 8000a58:	e00d      	b.n	8000a76 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI_5_9_Enable;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a64:	6013      	str	r3, [r2, #0]
		break;
 8000a66:	e006      	b.n	8000a76 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI_10_15_Enable;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <Enable_NVIC+0xc8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <Enable_NVIC+0xc8>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
		break;
 8000a74:	bf00      	nop

	}
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000e104 	.word	0xe000e104

08000a88 <Disable_NVIC>:
void Disable_NVIC(uint16_t IRQ){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	switch (IRQ){
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d854      	bhi.n	8000b42 <Disable_NVIC+0xba>
 8000a98:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <Disable_NVIC+0x18>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000ae1 	.word	0x08000ae1
 8000aa4:	08000aef 	.word	0x08000aef
 8000aa8:	08000afd 	.word	0x08000afd
 8000aac:	08000b0b 	.word	0x08000b0b
 8000ab0:	08000b19 	.word	0x08000b19
 8000ab4:	08000b27 	.word	0x08000b27
 8000ab8:	08000b27 	.word	0x08000b27
 8000abc:	08000b27 	.word	0x08000b27
 8000ac0:	08000b27 	.word	0x08000b27
 8000ac4:	08000b27 	.word	0x08000b27
 8000ac8:	08000b35 	.word	0x08000b35
 8000acc:	08000b35 	.word	0x08000b35
 8000ad0:	08000b35 	.word	0x08000b35
 8000ad4:	08000b35 	.word	0x08000b35
 8000ad8:	08000b35 	.word	0x08000b35
 8000adc:	08000b35 	.word	0x08000b35
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <Disable_NVIC+0xc4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <Disable_NVIC+0xc4>)
 8000ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aea:	6013      	str	r3, [r2, #0]
		break;
 8000aec:	e029      	b.n	8000b42 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <Disable_NVIC+0xc4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <Disable_NVIC+0xc4>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	6013      	str	r3, [r2, #0]
		break;
 8000afa:	e022      	b.n	8000b42 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <Disable_NVIC+0xc4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
		break;
 8000b08:	e01b      	b.n	8000b42 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b14:	6013      	str	r3, [r2, #0]
		break;
 8000b16:	e014      	b.n	8000b42 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6013      	str	r3, [r2, #0]
		break;
 8000b24:	e00d      	b.n	8000b42 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI_5_9_Disable;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b30:	6013      	str	r3, [r2, #0]
		break;
 8000b32:	e006      	b.n	8000b42 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI_10_15_Disable;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <Disable_NVIC+0xc8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <Disable_NVIC+0xc8>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3e:	6013      	str	r3, [r2, #0]
		break;
 8000b40:	bf00      	nop

	}
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e180 	.word	0xe000e180
 8000b50:	e000e184 	.word	0xe000e184

08000b54 <Update_EXTI>:

void Update_EXTI(EXTI_Pinconfig_t *EXTI_Config){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	 * 5. Enable/Disable the IRQ & NVIC
	 * 6. Call the IRQ Handler
	 */
	//1==================================================
	GPIO_PIN_CONFIG_T CFG;
	CFG.GPIO_PinNumber=EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	891b      	ldrh	r3, [r3, #8]
 8000b60:	813b      	strh	r3, [r7, #8]
	CFG.GPIO_PinMode=GPIO_MODE_INPUT_FLO;
 8000b62:	2301      	movs	r3, #1
 8000b64:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_INIT(EXTI_Config->EXTI_PIN.GPIO_PORT,&CFG);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f107 0208 	add.w	r2, r7, #8
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd67 	bl	8000644 <MCAL_GPIO_INIT>
	//2==================================================
	uint8_t AFIO_EXTICR_Index	=EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER / 4;//I Can Determine the EXTICR By Dividing the Line Number /4.
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position=(EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER % 4)*4;//Determine the position of my 4 bits ..
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	73bb      	strb	r3, [r7, #14]
	//can calculate any position for any EXTI

	//Clear the four Bit First
	AFIO_PR->EXTICR[AFIO_EXTICR_Index] &=~(0xF <<AFIO_EXTICR_Position);
 8000b90:	4a61      	ldr	r2, [pc, #388]	; (8000d18 <Update_EXTI+0x1c4>)
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	3302      	adds	r3, #2
 8000b96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b9a:	7bbb      	ldrb	r3, [r7, #14]
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	495c      	ldr	r1, [pc, #368]	; (8000d18 <Update_EXTI+0x1c4>)
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4002      	ands	r2, r0
 8000bac:	3302      	adds	r3, #2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Set the four Bits
	AFIO_PR->EXTICR[AFIO_EXTICR_Index] |=((AFIO_GPIO_EXTI_MAPPING(EXTI_Config->EXTI_PIN.GPIO_PORT) &0xF) <<AFIO_EXTICR_Position);
 8000bb2:	4a59      	ldr	r2, [pc, #356]	; (8000d18 <Update_EXTI+0x1c4>)
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4956      	ldr	r1, [pc, #344]	; (8000d1c <Update_EXTI+0x1c8>)
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d016      	beq.n	8000bf4 <Update_EXTI+0xa0>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	4955      	ldr	r1, [pc, #340]	; (8000d20 <Update_EXTI+0x1cc>)
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d00f      	beq.n	8000bf0 <Update_EXTI+0x9c>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	4953      	ldr	r1, [pc, #332]	; (8000d24 <Update_EXTI+0x1d0>)
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d008      	beq.n	8000bec <Update_EXTI+0x98>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	494f      	ldr	r1, [pc, #316]	; (8000d1c <Update_EXTI+0x1c8>)
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d101      	bne.n	8000be8 <Update_EXTI+0x94>
 8000be4:	2303      	movs	r3, #3
 8000be6:	e006      	b.n	8000bf6 <Update_EXTI+0xa2>
 8000be8:	2300      	movs	r3, #0
 8000bea:	e004      	b.n	8000bf6 <Update_EXTI+0xa2>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <Update_EXTI+0xa2>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <Update_EXTI+0xa2>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	7bb9      	ldrb	r1, [r7, #14]
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	4946      	ldr	r1, [pc, #280]	; (8000d18 <Update_EXTI+0x1c4>)
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	4302      	orrs	r2, r0
 8000c02:	3302      	adds	r3, #2
 8000c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//3==================================================
	//Clear Bits of Rissing And Falling
	EXTI_PR->RTSR &=~(1<<EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000c08:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	8812      	ldrh	r2, [r2, #0]
 8000c10:	4611      	mov	r1, r2
 8000c12:	2201      	movs	r2, #1
 8000c14:	408a      	lsls	r2, r1
 8000c16:	43d2      	mvns	r2, r2
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c1c:	400b      	ands	r3, r1
 8000c1e:	6093      	str	r3, [r2, #8]
	EXTI_PR->FTSR &=~(1<<EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000c20:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	8812      	ldrh	r2, [r2, #0]
 8000c28:	4611      	mov	r1, r2
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	408a      	lsls	r2, r1
 8000c2e:	43d2      	mvns	r2, r2
 8000c30:	4611      	mov	r1, r2
 8000c32:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c34:	400b      	ands	r3, r1
 8000c36:	60d3      	str	r3, [r2, #12]
	if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_RAISING){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7b1b      	ldrb	r3, [r3, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10b      	bne.n	8000c58 <Update_EXTI+0x104>
		EXTI_PR->RTSR |=(1<<EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	8812      	ldrh	r2, [r2, #0]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	408a      	lsls	r2, r1
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6093      	str	r3, [r2, #8]
 8000c56:	e029      	b.n	8000cac <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_TRIGGER_FALLING){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7b1b      	ldrb	r3, [r3, #12]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d10b      	bne.n	8000c78 <Update_EXTI+0x124>

		EXTI_PR->FTSR |=(1<<EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000c60:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	8812      	ldrh	r2, [r2, #0]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	408a      	lsls	r2, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c72:	430b      	orrs	r3, r1
 8000c74:	60d3      	str	r3, [r2, #12]
 8000c76:	e019      	b.n	8000cac <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_BOTH){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7b1b      	ldrb	r3, [r3, #12]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d115      	bne.n	8000cac <Update_EXTI+0x158>
		EXTI_PR->RTSR |=(1<<EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	8812      	ldrh	r2, [r2, #0]
 8000c88:	4611      	mov	r1, r2
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	408a      	lsls	r2, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6093      	str	r3, [r2, #8]
		EXTI_PR->FTSR |=(1<<EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000c96:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <Update_EXTI+0x1d4>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	8812      	ldrh	r2, [r2, #0]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	408a      	lsls	r2, r1
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <Update_EXTI+0x1d4>)
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	60d3      	str	r3, [r2, #12]
	}
	//4==================================================

	GP_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER]=EXTI_Config->P_IRQ_CALLBACK;//Initialize your Ptr of function
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <Update_EXTI+0x1d8>)
 8000cb8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//of EXTI_Pinconfig_t to The Function you Created

	//5==================================================
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	7b5b      	ldrb	r3, [r3, #13]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d110      	bne.n	8000ce6 <Update_EXTI+0x192>
		EXTI_PR->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <Update_EXTI+0x1d4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	8812      	ldrh	r2, [r2, #0]
 8000ccc:	4611      	mov	r1, r2
 8000cce:	2201      	movs	r2, #1
 8000cd0:	408a      	lsls	r2, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <Update_EXTI+0x1d4>)
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fe6c 	bl	80009bc <Enable_NVIC>
	else if (EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE) {
		EXTI_PR->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
	}

}
 8000ce4:	e014      	b.n	8000d10 <Update_EXTI+0x1bc>
	else if (EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7b5b      	ldrb	r3, [r3, #13]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d110      	bne.n	8000d10 <Update_EXTI+0x1bc>
		EXTI_PR->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <Update_EXTI+0x1d4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	8812      	ldrh	r2, [r2, #0]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	408a      	lsls	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <Update_EXTI+0x1d4>)
 8000d02:	400b      	ands	r3, r1
 8000d04:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_LINE_NUMBER);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff febc 	bl	8000a88 <Disable_NVIC>
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40010400 	.word	0x40010400
 8000d2c:	20000024 	.word	0x20000024

08000d30 <MCAL_EXTI_GPIO_Init>:
 * @retval 		- none
 * Note			 -Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,but LQFP48 Package
 * 				 has only GPIO A,B,PART of C/D exported as external PINS from the M
======================================================================================*/

void MCAL_EXTI_GPIO_Init(EXTI_Pinconfig_t *EXTI_Config){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff0b 	bl	8000b54 <Update_EXTI>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <__libc_init_array>:
 8000d48:	b570      	push	{r4, r5, r6, lr}
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	4e0c      	ldr	r6, [pc, #48]	; (8000d80 <__libc_init_array+0x38>)
 8000d4e:	4c0d      	ldr	r4, [pc, #52]	; (8000d84 <__libc_init_array+0x3c>)
 8000d50:	1ba4      	subs	r4, r4, r6
 8000d52:	10a4      	asrs	r4, r4, #2
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	d109      	bne.n	8000d6c <__libc_init_array+0x24>
 8000d58:	f000 f81a 	bl	8000d90 <_init>
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	4e0a      	ldr	r6, [pc, #40]	; (8000d88 <__libc_init_array+0x40>)
 8000d60:	4c0a      	ldr	r4, [pc, #40]	; (8000d8c <__libc_init_array+0x44>)
 8000d62:	1ba4      	subs	r4, r4, r6
 8000d64:	10a4      	asrs	r4, r4, #2
 8000d66:	42a5      	cmp	r5, r4
 8000d68:	d105      	bne.n	8000d76 <__libc_init_array+0x2e>
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d70:	4798      	blx	r3
 8000d72:	3501      	adds	r5, #1
 8000d74:	e7ee      	b.n	8000d54 <__libc_init_array+0xc>
 8000d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d7a:	4798      	blx	r3
 8000d7c:	3501      	adds	r5, #1
 8000d7e:	e7f2      	b.n	8000d66 <__libc_init_array+0x1e>
 8000d80:	08000dd4 	.word	0x08000dd4
 8000d84:	08000dd4 	.word	0x08000dd4
 8000d88:	08000dd4 	.word	0x08000dd4
 8000d8c:	08000dd8 	.word	0x08000dd8

08000d90 <_init>:
 8000d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d92:	bf00      	nop
 8000d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d96:	bc08      	pop	{r3}
 8000d98:	469e      	mov	lr, r3
 8000d9a:	4770      	bx	lr

08000d9c <_fini>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	bf00      	nop
 8000da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da2:	bc08      	pop	{r3}
 8000da4:	469e      	mov	lr, r3
 8000da6:	4770      	bx	lr
