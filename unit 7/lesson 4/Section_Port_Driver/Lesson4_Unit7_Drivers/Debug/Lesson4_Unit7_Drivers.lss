
Lesson4_Unit7_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a27  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c4  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c7  00000000  00000000  000014a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000390  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 19 01 	call	0x232	; 0x232 <main>
  7a:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_lcd_kick>:
	
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
}
void LCD_lcd_kick (void){//sends a pulse to the EN pin of the LCD to initiate a data transfer.
	//Enable read at Falling(H>>L)
	LCD_Control &= ~(1<<Enable_Switch);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	87 7f       	andi	r24, 0xF7	; 247
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_lcd_kick+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_lcd_kick+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	 LCD_Control |= (1<<Enable_Switch);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	88 60       	ori	r24, 0x08	; 8
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_check_lcd_isbusy>:



void LCD_check_lcd_isbusy(void){//checks whether the LCD is busy processing a command or data transfer.
	// initializes the LCD display with the required settings.
	LCD_Port_Direction &= ~(0xFF<<DATA_shift); //DDRA>>(INPUT)Read Mode
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	8a bb       	out	0x1a, r24	; 26
	LCD_Control |=(1<<RW_SWITCH); //RW ON
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	88 bb       	out	0x18, r24	; 24
	LCD_Control &=~(1<<RS_SWITCH); //RS OFF
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	88 bb       	out	0x18, r24	; 24
    LCD_lcd_kick(); //Enable
  ae:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
		#ifdef Eight_Bit_Mode
		LCD_Port_Direction |=  (0xFF<<DATA_shift);
		#endif
		
		#ifdef Four_Bit_Mode
		LCD_Port_Direction |=  (0xF0<<DATA_shift);
  b2:	8a b3       	in	r24, 0x1a	; 26
  b4:	8a bb       	out	0x1a, r24	; 26
		#endif
	//DDRA>>Output Mode
	LCD_Control &=~(1<<RW_SWITCH);//Rest
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_check_lcd_isbusy+0x24>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_check_lcd_isbusy+0x2a>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <LCD_Send_A_Command>:
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.


}
void LCD_Send_A_Command(unsigned char command){//sends a command to the LCD display.
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	#ifdef Four_Bit_Mode
		//LCD_check_lcd_isbusy();
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	9c 2f       	mov	r25, r28
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	89 2b       	or	r24, r25
  d8:	8b bb       	out	0x1b, r24	; 27
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	89 7f       	andi	r24, 0xF9	; 249
  de:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick ();
  e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
  e4:	87 ea       	ldi	r24, 0xA7	; 167
  e6:	91 e6       	ldi	r25, 0x61	; 97
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Send_A_Command+0x1e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Send_A_Command+0x24>
  ee:	00 00       	nop
		_delay_ms(100);
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
  f0:	2b b3       	in	r18, 0x1b	; 27
  f2:	30 e1       	ldi	r19, 0x10	; 16
  f4:	c3 9f       	mul	r28, r19
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	92 2f       	mov	r25, r18
  fc:	9f 70       	andi	r25, 0x0F	; 15
  fe:	89 2b       	or	r24, r25
 100:	8b bb       	out	0x1b, r24	; 27
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
 102:	88 b3       	in	r24, 0x18	; 24
 104:	89 7f       	andi	r24, 0xF9	; 249
 106:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
 108:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	#endif	
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_clear_screen>:
 *  Author: minas
 */ 
#include "LCD.h"
void LCD_clear_screen (){//clears the LCD screen.
	
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_A_Command>
 116:	08 95       	ret

00000118 <LCD_GOTO_XY>:
	LCD_Control &= ~(1<<Enable_Switch);
	_delay_ms(50);
	 LCD_Control |= (1<<Enable_Switch);
		
}
void LCD_GOTO_XY(unsigned char line, unsigned char position){// positions the cursor at the specified line and position on the LCD screen.
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	c8 2f       	mov	r28, r24
 11e:	d6 2f       	mov	r29, r22
	if (line == 1)
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	31 f4       	brne	.+12     	; 0x130 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 124:	60 31       	cpi	r22, 0x10	; 16
 126:	20 f4       	brcc	.+8      	; 0x130 <LCD_GOTO_XY+0x18>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW+position);
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	86 0f       	add	r24, r22
 12c:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_A_Command>
		}
	}
	if (line == 2)
 130:	c2 30       	cpi	r28, 0x02	; 2
 132:	31 f4       	brne	.+12     	; 0x140 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 134:	d0 31       	cpi	r29, 0x10	; 16
 136:	20 f4       	brcc	.+8      	; 0x140 <LCD_GOTO_XY+0x28>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW+position);
 138:	80 ec       	ldi	r24, 0xC0	; 192
 13a:	8d 0f       	add	r24, r29
 13c:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_A_Command>
		}
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <LCD_init>:
 146:	87 e8       	ldi	r24, 0x87	; 135
 148:	93 e1       	ldi	r25, 0x13	; 19
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_init+0x4>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_init+0xa>
 150:	00 00       	nop
	_delay_ms(50);
}

void LCD_init(void){//initializes the LCD display with the required settings.
	_delay_ms(20);
	LCD_check_lcd_isbusy();
 152:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
	LCD_Control_Direction |= (1<<Enable_Switch | 1<<RW_SWITCH | 1<<RS_SWITCH);//DDRB>>OUTPUT (Enable,RS,RW)
 156:	87 b3       	in	r24, 0x17	; 23
 158:	8e 60       	ori	r24, 0x0E	; 14
 15a:	87 bb       	out	0x17, r24	; 23
	LCD_Control &= ~((1<<Enable_Switch | 1<<RS_SWITCH | 1<<RW_SWITCH));//PortB
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	81 7f       	andi	r24, 0xF1	; 241
 160:	88 bb       	out	0x18, r24	; 24
	//LCD_Port_Direction =0xFF;
	LCD_lcd_kick();
 162:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
 166:	85 ea       	ldi	r24, 0xA5	; 165
 168:	9e e0       	ldi	r25, 0x0E	; 14
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_init+0x24>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_init+0x2a>
 170:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 172:	0e 94 88 00 	call	0x110	; 0x110 <LCD_clear_screen>
	
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
    #endif // Eight_Bit_Mode

	#ifdef Four_Bit_Mode
	LCD_Port_Direction |=  (0xF0<<DATA_shift);
 176:	8a b3       	in	r24, 0x1a	; 26
 178:	8a bb       	out	0x1a, r24	; 26
	LCD_Send_A_Command(0x02);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_A_Command>
	#endif // Eight_Bit_Mode	
	
	LCD_Send_A_Command(LCD_ENTRY_MODE);
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_A_Command>
 198:	08 95       	ret

0000019a <LCD_Send_A_Character>:
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif	
}
void LCD_Send_A_Character(unsigned char character){//writes a character to the LCD display.
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	
    #ifdef Four_Bit_Mode
//	LCD_check_lcd_isbusy();
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 19e:	8b b3       	in	r24, 0x1b	; 27
 1a0:	8f 70       	andi	r24, 0x0F	; 15
 1a2:	9c 2f       	mov	r25, r28
 1a4:	90 7f       	andi	r25, 0xF0	; 240
 1a6:	89 2b       	or	r24, r25
 1a8:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	88 bb       	out	0x18, r24	; 24
	LCD_Control &= ~(1<<RW_SWITCH);//turn RW off so you can write.
 1b0:	88 b3       	in	r24, 0x18	; 24
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 1b6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	30 e1       	ldi	r19, 0x10	; 16
 1be:	c3 9f       	mul	r28, r19
 1c0:	c0 01       	movw	r24, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	92 2f       	mov	r25, r18
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= (1<<RS_SWITCH); //turn RS ON for Data mode.
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	88 bb       	out	0x18, r24	; 24
	LCD_Control &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	8b 7f       	andi	r24, 0xFB	; 251
 1d6:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 1d8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	#endif
	}
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <LCD_Send_A_String>:

void LCD_Send_A_String(char* string){//: writes a string of characters to the LCD display.
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	8c 01       	movw	r16, r24

	int count = 0;
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){// if became at end will be =0
 1ee:	18 c0       	rjmp	.+48     	; 0x220 <LCD_Send_A_String+0x40>
		count++;
 1f0:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_A_Character(*string++);
 1f2:	0f 5f       	subi	r16, 0xFF	; 255
 1f4:	1f 4f       	sbci	r17, 0xFF	; 255
 1f6:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Send_A_Character>
		if (count == 16)
 1fa:	c0 31       	cpi	r28, 0x10	; 16
 1fc:	d1 05       	cpc	r29, r1
 1fe:	29 f4       	brne	.+10     	; 0x20a <LCD_Send_A_String+0x2a>
		{
			LCD_GOTO_XY(2,0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_GOTO_XY>
 208:	0b c0       	rjmp	.+22     	; 0x220 <LCD_Send_A_String+0x40>
		}
		else if (count == 31)
 20a:	cf 31       	cpi	r28, 0x1F	; 31
 20c:	d1 05       	cpc	r29, r1
 20e:	41 f4       	brne	.+16     	; 0x220 <LCD_Send_A_String+0x40>
		{
			LCD_clear_screen();
 210:	0e 94 88 00 	call	0x110	; 0x110 <LCD_clear_screen>
			LCD_GOTO_XY(0,0);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_GOTO_XY>
			count = 0;
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
	}

void LCD_Send_A_String(char* string){//: writes a string of characters to the LCD display.

	int count = 0;
	while (*string > 0){// if became at end will be =0
 220:	f8 01       	movw	r30, r16
 222:	80 81       	ld	r24, Z
 224:	81 11       	cpse	r24, r1
 226:	e4 cf       	rjmp	.-56     	; 0x1f0 <LCD_Send_A_String+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(0,0);
			count = 0;
		}
	}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <main>:
}

int main(void)
{	
	//Port_Mode(PORTA,OUTPUT);
	LCD_clear_screen();
 232:	0e 94 88 00 	call	0x110	; 0x110 <LCD_clear_screen>
	LCD_init();
 236:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_init>
	LCD_Send_A_String("Learn in Depth ..");
 23a:	80 e6       	ldi	r24, 0x60	; 96
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_Send_A_String>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0x10>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
