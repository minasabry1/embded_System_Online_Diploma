
Lesson4_Unit7_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000002f2  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e16  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f3  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d5b  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00002850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000521  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dda  00000000  00000000  00002f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003d37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  7a:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_lcd_kick>:
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
}
void LCD_lcd_kick (void){//sends a pulse to the EN pin of the LCD to initiate a data transfer.
	//Enable read at Falling(H>>L)
	
	LCD_Control |= (1<<Enable_Switch);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	88 60       	ori	r24, 0x08	; 8
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_lcd_kick+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_lcd_kick+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	 LCD_Control &= ~(1<<Enable_Switch);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_check_lcd_isbusy>:



void LCD_check_lcd_isbusy(void){//checks whether the LCD is busy processing a command or data transfer.
	// initializes the LCD display with the required settings.
	LCD_Port_Direction &= ~(0xFF<<DATA_shift); //DDRA>>(INPUT)Read Mode
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	8a bb       	out	0x1a, r24	; 26
	LCD_Control |=(1<<RW_SWITCH); //RW ON
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	84 60       	ori	r24, 0x04	; 4
	LCD_Control &=~(1<<RS_SWITCH); //RS OFF
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	88 bb       	out	0x18, r24	; 24
    LCD_lcd_kick(); //Enable
  aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
		
		#ifdef FOUR_BIT_MODE
		LCD_Port_Direction |=  (0xF0<<DATA_shift);
		#endif
	//LCD_Port_Direction |= (0xFF<<DATA_shift);; //DDRA>>Output Mode
	LCD_Control &=~(1<<RW_SWITCH);//Rest
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	08 95       	ret

000000b6 <LCD_Send_A_Command>:
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.


}
void LCD_Send_A_Command(unsigned char command){//sends a command to the LCD display.
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
	LCD_Control &=~((1 << RS_SWITCH) | (1<<RW_SWITCH)); ;//PortB
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	#ifdef Four_Bit_Mode
		LCD_check_lcd_isbusy();
  ba:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	9c 2f       	mov	r25, r28
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	89 2b       	or	r24, r25
  c8:	8b bb       	out	0x1b, r24	; 27
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	89 7f       	andi	r24, 0xF9	; 249
  ce:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick ();
  d0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
  d4:	87 ea       	ldi	r24, 0xA7	; 167
  d6:	91 e6       	ldi	r25, 0x61	; 97
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Send_A_Command+0x22>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Send_A_Command+0x28>
  de:	00 00       	nop
		_delay_ms(100);
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
  e0:	2b b3       	in	r18, 0x1b	; 27
  e2:	30 e1       	ldi	r19, 0x10	; 16
  e4:	c3 9f       	mul	r28, r19
  e6:	c0 01       	movw	r24, r0
  e8:	11 24       	eor	r1, r1
  ea:	92 2f       	mov	r25, r18
  ec:	9f 70       	andi	r25, 0x0F	; 15
  ee:	89 2b       	or	r24, r25
  f0:	8b bb       	out	0x1b, r24	; 27
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	89 7f       	andi	r24, 0xF9	; 249
  f6:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
  f8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	#endif	
}
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <LCD_clear_screen>:
 *  Author: minas
 */ 
#include "LCD.h"
void LCD_clear_screen (){//clears the LCD screen.
	
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_A_Command>
 106:	08 95       	ret

00000108 <LCD_GOTO_XY>:
	LCD_Control |= (1<<Enable_Switch);
	_delay_ms(50);
	 LCD_Control &= ~(1<<Enable_Switch);
		
}
void LCD_GOTO_XY(unsigned char line, unsigned char position){// positions the cursor at the specified line and position on the LCD screen.
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	c8 2f       	mov	r28, r24
 10e:	d6 2f       	mov	r29, r22
	if (line == 1)
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	31 f4       	brne	.+12     	; 0x120 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 114:	60 31       	cpi	r22, 0x10	; 16
 116:	20 f4       	brcc	.+8      	; 0x120 <LCD_GOTO_XY+0x18>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW+position);
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	86 0f       	add	r24, r22
 11c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_A_Command>
		}
	}
	if (line == 2)
 120:	c2 30       	cpi	r28, 0x02	; 2
 122:	31 f4       	brne	.+12     	; 0x130 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 124:	d0 31       	cpi	r29, 0x10	; 16
 126:	20 f4       	brcc	.+8      	; 0x130 <LCD_GOTO_XY+0x28>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW+position);
 128:	80 ec       	ldi	r24, 0xC0	; 192
 12a:	8d 0f       	add	r24, r29
 12c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_A_Command>
		}
	}
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <LCD_init>:
 136:	87 e8       	ldi	r24, 0x87	; 135
 138:	93 e1       	ldi	r25, 0x13	; 19
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_init+0x4>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_init+0xa>
 140:	00 00       	nop
	LCD_Control &=~(1<<RW_SWITCH);//Rest
}

void LCD_init(void){//initializes the LCD display with the required settings.
	_delay_ms(20);
	LCD_check_lcd_isbusy();
 142:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
	LCD_Control_Direction |= (1<<Enable_Switch | 1<<RW_SWITCH | 1<<RS_SWITCH);//DDRB>>OUTPUT (Enable,RS,RW)
 146:	87 b3       	in	r24, 0x17	; 23
 148:	8e 60       	ori	r24, 0x0E	; 14
 14a:	87 bb       	out	0x17, r24	; 23
	LCD_Control &= ~(1<<Enable_Switch | 1<<RS_SWITCH | 1<<RW_SWITCH);//PortB
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	81 7f       	andi	r24, 0xF1	; 241
 150:	88 bb       	out	0x18, r24	; 24
	LCD_Port_Direction =0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	8a bb       	out	0x1a, r24	; 26
 156:	85 ea       	ldi	r24, 0xA5	; 165
 158:	9e e0       	ldi	r25, 0x0E	; 14
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_init+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_init+0x2a>
 160:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 162:	0e 94 80 00 	call	0x100	; 0x100 <LCD_clear_screen>
	
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
    #endif // Eight_Bit_Mode

	#ifdef Four_Bit_Mode
	LCD_Send_A_Command(0x02);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_A_Command>
	#endif // Eight_Bit_Mode	
	
	LCD_Send_A_Command(LCD_ENTRY_MODE);
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);//turns on the display, the cursor and makes the cursor blink.
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_A_Command>
 184:	08 95       	ret

00000186 <LCD_Send_A_Character>:
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif	
}
void LCD_Send_A_Character(unsigned char character){//writes a character to the LCD display.
 186:	cf 93       	push	r28
 188:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif // Eight_Bit_Mode
	
    #ifdef Four_Bit_Mode
	LCD_check_lcd_isbusy();
 18a:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	9c 2f       	mov	r25, r28
 194:	90 7f       	andi	r25, 0xF0	; 240
 196:	89 2b       	or	r24, r25
 198:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 19a:	88 b3       	in	r24, 0x18	; 24
 19c:	82 60       	ori	r24, 0x02	; 2
	LCD_Control &= ~(1<<RW_SWITCH);//turn RW off so you can write.
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 1a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	30 e1       	ldi	r19, 0x10	; 16
 1aa:	c3 9f       	mul	r28, r19
 1ac:	c0 01       	movw	r24, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	92 2f       	mov	r25, r18
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	89 2b       	or	r24, r25
 1b6:	8b bb       	out	0x1b, r24	; 27
	LCD_Control |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	82 60       	ori	r24, 0x02	; 2
	LCD_Control &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 1bc:	8b 7f       	andi	r24, 0xFB	; 251
 1be:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 1c0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	#endif
	}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LCD_Send_A_String>:

void LCD_Send_A_String(char* string){//: writes a string of characters to the LCD display.
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	8c 01       	movw	r16, r24

	int count = 0;
 1d2:	c0 e0       	ldi	r28, 0x00	; 0
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){// if became at end will be =0
 1d6:	18 c0       	rjmp	.+48     	; 0x208 <LCD_Send_A_String+0x40>
		count++;
 1d8:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_A_Character(*string++);
 1da:	0f 5f       	subi	r16, 0xFF	; 255
 1dc:	1f 4f       	sbci	r17, 0xFF	; 255
 1de:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Send_A_Character>
		if (count == 16)
 1e2:	c0 31       	cpi	r28, 0x10	; 16
 1e4:	d1 05       	cpc	r29, r1
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <LCD_Send_A_String+0x2a>
		{
			LCD_GOTO_XY(2,0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 84 00 	call	0x108	; 0x108 <LCD_GOTO_XY>
 1f0:	0b c0       	rjmp	.+22     	; 0x208 <LCD_Send_A_String+0x40>
		}
		else if (count == 31)
 1f2:	cf 31       	cpi	r28, 0x1F	; 31
 1f4:	d1 05       	cpc	r29, r1
 1f6:	41 f4       	brne	.+16     	; 0x208 <LCD_Send_A_String+0x40>
		{
			LCD_clear_screen();
 1f8:	0e 94 80 00 	call	0x100	; 0x100 <LCD_clear_screen>
			LCD_GOTO_XY(0,0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 84 00 	call	0x108	; 0x108 <LCD_GOTO_XY>
			count = 0;
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
	}

void LCD_Send_A_String(char* string){//: writes a string of characters to the LCD display.

	int count = 0;
	while (*string > 0){// if became at end will be =0
 208:	f8 01       	movw	r30, r16
 20a:	80 81       	ld	r24, Z
 20c:	81 11       	cpse	r24, r1
 20e:	e4 cf       	rjmp	.-56     	; 0x1d8 <LCD_Send_A_String+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(0,0);
			count = 0;
		}
	}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <main>:
	for(j = 0 ; j < 255 ; j++);
}

int main(void)
{	
	Port_Mode(PORTA,OUTPUT);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	8b b3       	in	r24, 0x1b	; 27
 21e:	0e 94 1a 01 	call	0x234	; 0x234 <Port_Mode>
	LCD_clear_screen();
 222:	0e 94 80 00 	call	0x100	; 0x100 <LCD_clear_screen>
	LCD_init();
 226:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_init>
	LCD_Send_A_String("Learn in Depth");
 22a:	80 e6       	ldi	r24, 0x60	; 96
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Send_A_String>
 232:	ff cf       	rjmp	.-2      	; 0x232 <main+0x18>

00000234 <Port_Mode>:
 *
 * Note              -None.
 */
void Port_Mode(PORTS PORT , uint8_t mode)
{
		switch(PORT)
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	e1 f0       	breq	.+56     	; 0x270 <Port_Mode+0x3c>
 238:	30 f0       	brcs	.+12     	; 0x246 <Port_Mode+0x12>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	71 f1       	breq	.+92     	; 0x29a <Port_Mode+0x66>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	09 f4       	brne	.+2      	; 0x244 <Port_Mode+0x10>
 242:	40 c0       	rjmp	.+128    	; 0x2c4 <Port_Mode+0x90>
 244:	08 95       	ret
		{
			case PORT_A :
			switch(mode)
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	41 f0       	breq	.+16     	; 0x25a <Port_Mode+0x26>
 24a:	28 f0       	brcs	.+10     	; 0x256 <Port_Mode+0x22>
 24c:	63 30       	cpi	r22, 0x03	; 3
 24e:	41 f0       	breq	.+16     	; 0x260 <Port_Mode+0x2c>
 250:	64 30       	cpi	r22, 0x04	; 4
 252:	51 f0       	breq	.+20     	; 0x268 <Port_Mode+0x34>
 254:	08 95       	ret
			{
				case INPUT:
				DDRA = 0x00;
 256:	1a ba       	out	0x1a, r1	; 26
				break;
 258:	08 95       	ret
				
				case OUTPUT:
				DDRA = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	8a bb       	out	0x1a, r24	; 26
				break;
 25e:	08 95       	ret
				
				case INPUT_PULLUP:
				DDRA = 0x00;
 260:	1a ba       	out	0x1a, r1	; 26
				PORTA = 0xFF;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	8b bb       	out	0x1b, r24	; 27
				break;
 266:	08 95       	ret
				
				case INPUT_PULLDOWN:
				DDRA = 0x00;
 268:	1a ba       	out	0x1a, r1	; 26
				PORTA = 0xFF;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	8b bb       	out	0x1b, r24	; 27
				break;
 26e:	08 95       	ret
			}
			break;
			
			case PORT_B :
			switch(mode)
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	41 f0       	breq	.+16     	; 0x284 <Port_Mode+0x50>
 274:	28 f0       	brcs	.+10     	; 0x280 <Port_Mode+0x4c>
 276:	63 30       	cpi	r22, 0x03	; 3
 278:	41 f0       	breq	.+16     	; 0x28a <Port_Mode+0x56>
 27a:	64 30       	cpi	r22, 0x04	; 4
 27c:	51 f0       	breq	.+20     	; 0x292 <Port_Mode+0x5e>
 27e:	08 95       	ret
			{
				case INPUT:
				DDRB = 0x00;
 280:	17 ba       	out	0x17, r1	; 23
				break;
 282:	08 95       	ret
				
				case OUTPUT:
				DDRB = 0xFF;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	87 bb       	out	0x17, r24	; 23
				break;
 288:	08 95       	ret
				
				case INPUT_PULLUP:
				DDRB = 0x00;
 28a:	17 ba       	out	0x17, r1	; 23
				PORTB = 0xFF;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	88 bb       	out	0x18, r24	; 24
				break;
 290:	08 95       	ret
			
				case INPUT_PULLDOWN:
				DDRA = 0x00;
 292:	1a ba       	out	0x1a, r1	; 26
				PORTA = 0xFF;
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	8b bb       	out	0x1b, r24	; 27
				break;				
 298:	08 95       	ret
			}
			break;
			
			
			case PORT_C :
			switch(mode)
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	41 f0       	breq	.+16     	; 0x2ae <Port_Mode+0x7a>
 29e:	28 f0       	brcs	.+10     	; 0x2aa <Port_Mode+0x76>
 2a0:	63 30       	cpi	r22, 0x03	; 3
 2a2:	41 f0       	breq	.+16     	; 0x2b4 <Port_Mode+0x80>
 2a4:	64 30       	cpi	r22, 0x04	; 4
 2a6:	51 f0       	breq	.+20     	; 0x2bc <Port_Mode+0x88>
 2a8:	08 95       	ret
			{
				case INPUT:
				DDRC = 0x00;
 2aa:	14 ba       	out	0x14, r1	; 20
				break;
 2ac:	08 95       	ret
				
				case OUTPUT:
				DDRC = 0xFF;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	84 bb       	out	0x14, r24	; 20
				break;
 2b2:	08 95       	ret
				
				case INPUT_PULLUP:
				DDRC = 0x00;
 2b4:	14 ba       	out	0x14, r1	; 20
				PORTC = 0xFF;
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	85 bb       	out	0x15, r24	; 21
				break;
 2ba:	08 95       	ret
				
				case INPUT_PULLDOWN:
				DDRA = 0x00;
 2bc:	1a ba       	out	0x1a, r1	; 26
				PORTA = 0xFF;
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	8b bb       	out	0x1b, r24	; 27
				break;
 2c2:	08 95       	ret
			}
			break;
			
			case PORT_D :
			switch(mode)
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	41 f0       	breq	.+16     	; 0x2d8 <Port_Mode+0xa4>
 2c8:	28 f0       	brcs	.+10     	; 0x2d4 <Port_Mode+0xa0>
 2ca:	63 30       	cpi	r22, 0x03	; 3
 2cc:	41 f0       	breq	.+16     	; 0x2de <Port_Mode+0xaa>
 2ce:	64 30       	cpi	r22, 0x04	; 4
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <Port_Mode+0xb2>
 2d2:	08 95       	ret
			{
				case INPUT:
				DDRD = 0x00;
 2d4:	11 ba       	out	0x11, r1	; 17
				break;
 2d6:	08 95       	ret
				
				case OUTPUT:
				DDRD = 0xFF;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	81 bb       	out	0x11, r24	; 17
				break;
 2dc:	08 95       	ret
				
				case INPUT_PULLUP:
				DDRD = 0x00;
 2de:	11 ba       	out	0x11, r1	; 17
				PORTD = 0xFF;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	82 bb       	out	0x12, r24	; 18
				break;
 2e4:	08 95       	ret
				
				case INPUT_PULLDOWN:
				DDRA = 0x00;
 2e6:	1a ba       	out	0x1a, r1	; 26
				PORTA = 0xFF;
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	8b bb       	out	0x1b, r24	; 27
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
