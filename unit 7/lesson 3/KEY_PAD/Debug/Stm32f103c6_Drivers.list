
Stm32f103c6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000940  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000a70  08000a70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a84  08000a84  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000a84  08000a84  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a84  08000a84  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a84  08000a84  00010a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a88  08000a88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000aac  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000aac  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003072  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007f1  00000000  00000000  000230bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000074c  00000000  00000000  000238ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000150  00000000  00000000  00023ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00024148  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002476  00000000  00000000  00024250  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c5d  00000000  00000000  000266c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008d0e  00000000  00000000  00028323  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031031  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e4  00000000  00000000  000310ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a58 	.word	0x08000a58

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000a58 	.word	0x08000a58

08000170 <LCD_Send_String>:

#include "Stm32_f103c6_Drivers_Gpio.h"
#include "Stm32f103x6.h"
#include "LCD.h"
#include "KEY_PAD.h"
void LCD_Send_String(char* string){//: writes a string of characters to the LCD display.
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

		int count = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
		while (*string > 0){// if became at end will be =0
 800017c:	e01c      	b.n	80001b8 <LCD_Send_String+0x48>
			count++;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	3301      	adds	r3, #1
 8000182:	60fb      	str	r3, [r7, #12]
			LCD_Send_A_Character(*string++);
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	1c5a      	adds	r2, r3, #1
 8000188:	607a      	str	r2, [r7, #4]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	4618      	mov	r0, r3
 800018e:	f000 fb01 	bl	8000794 <LCD_Send_A_Character>
			if (count == 16)
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	2b10      	cmp	r3, #16
 8000196:	d104      	bne.n	80001a2 <LCD_Send_String+0x32>
			{
				LCD_GOTO_XY(2,0);
 8000198:	2100      	movs	r1, #0
 800019a:	2002      	movs	r0, #2
 800019c:	f000 fa06 	bl	80005ac <LCD_GOTO_XY>
 80001a0:	e00a      	b.n	80001b8 <LCD_Send_String+0x48>
			}
			else if (count == 31)
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	2b1f      	cmp	r3, #31
 80001a6:	d107      	bne.n	80001b8 <LCD_Send_String+0x48>
			{
				LCD_clear_screen();
 80001a8:	f000 f9e2 	bl	8000570 <LCD_clear_screen>
				LCD_GOTO_XY(1,0);
 80001ac:	2100      	movs	r1, #0
 80001ae:	2001      	movs	r0, #1
 80001b0:	f000 f9fc 	bl	80005ac <LCD_GOTO_XY>
				count = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60fb      	str	r3, [r7, #12]
		while (*string > 0){// if became at end will be =0
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d1de      	bne.n	800017e <LCD_Send_String+0xe>
			}
		}
	}
 80001c0:	bf00      	nop
 80001c2:	3710      	adds	r7, #16
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}

080001c8 <clock_Init>:
//#include "KEY_PAD.h"
void clock_Init(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	//Enable clock IOPA EN
	RCC_GPIOA_CLK_EN();
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <clock_Init+0x24>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <clock_Init+0x24>)
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6193      	str	r3, [r2, #24]
	//Enable clock IOPB EN
	RCC_GPIOB_CLK_EN();
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <clock_Init+0x24>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a03      	ldr	r2, [pc, #12]	; (80001ec <clock_Init+0x24>)
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6193      	str	r3, [r2, #24]

}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40021000 	.word	0x40021000

080001f0 <my_wait>:
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
	MCAL_GPIO_INIT(GPIOB_PR, &PinCfg);


}
my_wait(int a){
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<a;i++)
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	e00b      	b.n	8000216 <my_wait+0x26>
		for(j=0;j<255;j++);
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	e002      	b.n	800020a <my_wait+0x1a>
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	3301      	adds	r3, #1
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	2bfe      	cmp	r3, #254	; 0xfe
 800020e:	d9f9      	bls.n	8000204 <my_wait+0x14>
	for(i=0;i<a;i++)
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	3301      	adds	r3, #1
 8000214:	60fb      	str	r3, [r7, #12]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	429a      	cmp	r2, r3
 800021c:	d3ef      	bcc.n	80001fe <my_wait+0xe>
}
 800021e:	bf00      	nop
 8000220:	4618      	mov	r0, r3
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
	...

0800022c <main>:

int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af00      	add	r7, sp, #0
	clock_Init();
 8000232:	f7ff ffc9 	bl	80001c8 <clock_Init>
	LCD_init();
 8000236:	f000 f9dd 	bl	80005f4 <LCD_init>
	Keypad_init();
 800023a:	f000 f859 	bl	80002f0 <Keypad_init>

    unsigned char key_pressed;
	char Name[20]={"Mina Sabry"};
 800023e:	4a16      	ldr	r2, [pc, #88]	; (8000298 <main+0x6c>)
 8000240:	463b      	mov	r3, r7
 8000242:	ca07      	ldmia	r2, {r0, r1, r2}
 8000244:	c303      	stmia	r3!, {r0, r1}
 8000246:	801a      	strh	r2, [r3, #0]
 8000248:	3302      	adds	r3, #2
 800024a:	0c12      	lsrs	r2, r2, #16
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	f107 030b 	add.w	r3, r7, #11
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	721a      	strb	r2, [r3, #8]
	LCD_Send_String(&Name);
 800025a:	463b      	mov	r3, r7
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff87 	bl	8000170 <LCD_Send_String>
	my_wait(500);
 8000262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000266:	f7ff ffc3 	bl	80001f0 <my_wait>
	LCD_clear_screen();
 800026a:	f000 f981 	bl	8000570 <LCD_clear_screen>

	while(1){
		key_pressed = Keypad_getkey();
 800026e:	f000 f8b5 	bl	80003dc <Keypad_getkey>
 8000272:	4603      	mov	r3, r0
 8000274:	75fb      	strb	r3, [r7, #23]
	    switch(key_pressed){
 8000276:	7dfb      	ldrb	r3, [r7, #23]
 8000278:	2b3f      	cmp	r3, #63	; 0x3f
 800027a:	d002      	beq.n	8000282 <main+0x56>
 800027c:	2b41      	cmp	r3, #65	; 0x41
 800027e:	d008      	beq.n	8000292 <main+0x66>
 8000280:	e002      	b.n	8000288 <main+0x5c>
		    case 'A':
		    break;
		    case '?':
		    LCD_clear_screen();
 8000282:	f000 f975 	bl	8000570 <LCD_clear_screen>
		    break;
 8000286:	e005      	b.n	8000294 <main+0x68>
		    default:
		    LCD_Send_A_Character(key_pressed);
 8000288:	7dfb      	ldrb	r3, [r7, #23]
 800028a:	4618      	mov	r0, r3
 800028c:	f000 fa82 	bl	8000794 <LCD_Send_A_Character>
		    break;
 8000290:	e000      	b.n	8000294 <main+0x68>
		    break;
 8000292:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000294:	e7eb      	b.n	800026e <main+0x42>
 8000296:	bf00      	nop
 8000298:	08000a70 	.word	0x08000a70

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 fba1 	bl	8000a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ffad 	bl	800022c <main>

080002d2 <LoopForever>:

LoopForever:
    b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80002e0:	08000a8c 	.word	0x08000a8c
  ldr r2, =_sbss
 80002e4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80002e8:	20000040 	.word	0x20000040

080002ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC1_2_IRQHandler>
	...

080002f0 <Keypad_init>:
	PinCfg.GPIO_PinNumber=C3;
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
};
void Keypad_init(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

	//Intialize_KEYPAD();

	PinCfg.GPIO_PinNumber=R0;
 80002f4:	4b37      	ldr	r3, [pc, #220]	; (80003d4 <Keypad_init+0xe4>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80002fa:	4b36      	ldr	r3, [pc, #216]	; (80003d4 <Keypad_init+0xe4>)
 80002fc:	2204      	movs	r2, #4
 80002fe:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000300:	4b34      	ldr	r3, [pc, #208]	; (80003d4 <Keypad_init+0xe4>)
 8000302:	2201      	movs	r2, #1
 8000304:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
 8000306:	4933      	ldr	r1, [pc, #204]	; (80003d4 <Keypad_init+0xe4>)
 8000308:	4833      	ldr	r0, [pc, #204]	; (80003d8 <Keypad_init+0xe8>)
 800030a:	f000 fac8 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=R1;
 800030e:	4b31      	ldr	r3, [pc, #196]	; (80003d4 <Keypad_init+0xe4>)
 8000310:	2202      	movs	r2, #2
 8000312:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000314:	4b2f      	ldr	r3, [pc, #188]	; (80003d4 <Keypad_init+0xe4>)
 8000316:	2204      	movs	r2, #4
 8000318:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <Keypad_init+0xe4>)
 800031c:	2201      	movs	r2, #1
 800031e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
 8000320:	492c      	ldr	r1, [pc, #176]	; (80003d4 <Keypad_init+0xe4>)
 8000322:	482d      	ldr	r0, [pc, #180]	; (80003d8 <Keypad_init+0xe8>)
 8000324:	f000 fabb 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=R2;
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <Keypad_init+0xe4>)
 800032a:	2208      	movs	r2, #8
 800032c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 800032e:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <Keypad_init+0xe4>)
 8000330:	2204      	movs	r2, #4
 8000332:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <Keypad_init+0xe4>)
 8000336:	2201      	movs	r2, #1
 8000338:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
 800033a:	4926      	ldr	r1, [pc, #152]	; (80003d4 <Keypad_init+0xe4>)
 800033c:	4826      	ldr	r0, [pc, #152]	; (80003d8 <Keypad_init+0xe8>)
 800033e:	f000 faae 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=R3;
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <Keypad_init+0xe4>)
 8000344:	2210      	movs	r2, #16
 8000346:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000348:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <Keypad_init+0xe4>)
 800034a:	2204      	movs	r2, #4
 800034c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <Keypad_init+0xe4>)
 8000350:	2201      	movs	r2, #1
 8000352:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
 8000354:	491f      	ldr	r1, [pc, #124]	; (80003d4 <Keypad_init+0xe4>)
 8000356:	4820      	ldr	r0, [pc, #128]	; (80003d8 <Keypad_init+0xe8>)
 8000358:	f000 faa1 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=C0;
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <Keypad_init+0xe4>)
 800035e:	2220      	movs	r2, #32
 8000360:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <Keypad_init+0xe4>)
 8000364:	2204      	movs	r2, #4
 8000366:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <Keypad_init+0xe4>)
 800036a:	2201      	movs	r2, #1
 800036c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
 800036e:	4919      	ldr	r1, [pc, #100]	; (80003d4 <Keypad_init+0xe4>)
 8000370:	4819      	ldr	r0, [pc, #100]	; (80003d8 <Keypad_init+0xe8>)
 8000372:	f000 fa94 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=C1;
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <Keypad_init+0xe4>)
 8000378:	2240      	movs	r2, #64	; 0x40
 800037a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <Keypad_init+0xe4>)
 800037e:	2204      	movs	r2, #4
 8000380:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <Keypad_init+0xe4>)
 8000384:	2201      	movs	r2, #1
 8000386:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
 8000388:	4912      	ldr	r1, [pc, #72]	; (80003d4 <Keypad_init+0xe4>)
 800038a:	4813      	ldr	r0, [pc, #76]	; (80003d8 <Keypad_init+0xe8>)
 800038c:	f000 fa87 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=C2;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <Keypad_init+0xe4>)
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <Keypad_init+0xe4>)
 8000398:	2204      	movs	r2, #4
 800039a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <Keypad_init+0xe4>)
 800039e:	2201      	movs	r2, #1
 80003a0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
 80003a2:	490c      	ldr	r1, [pc, #48]	; (80003d4 <Keypad_init+0xe4>)
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <Keypad_init+0xe8>)
 80003a6:	f000 fa7a 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=C3;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <Keypad_init+0xe4>)
 80003ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <Keypad_init+0xe4>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <Keypad_init+0xe4>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PinCfg);
 80003be:	4905      	ldr	r1, [pc, #20]	; (80003d4 <Keypad_init+0xe4>)
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <Keypad_init+0xe8>)
 80003c2:	f000 fa6c 	bl	800089e <MCAL_GPIO_INIT>

MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 80003c6:	21ff      	movs	r1, #255	; 0xff
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <Keypad_init+0xe8>)
 80003ca:	f000 fb13 	bl	80009f4 <MCAL_GPIO_WritePort>
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000003c 	.word	0x2000003c
 80003d8:	40010c00 	.word	0x40010c00

080003dc <Keypad_getkey>:

char Keypad_getkey(){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++){
 80003e2:	2300      	movs	r3, #0
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	e0b4      	b.n	8000552 <Keypad_getkey+0x176>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);//All columns are SET
 80003e8:	4b5e      	ldr	r3, [pc, #376]	; (8000564 <Keypad_getkey+0x188>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	485d      	ldr	r0, [pc, #372]	; (8000568 <Keypad_getkey+0x18c>)
 80003f4:	f000 fae7 	bl	80009c6 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80003f8:	4b5a      	ldr	r3, [pc, #360]	; (8000564 <Keypad_getkey+0x188>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	4859      	ldr	r0, [pc, #356]	; (8000568 <Keypad_getkey+0x18c>)
 8000404:	f000 fadf 	bl	80009c6 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 8000408:	4b56      	ldr	r3, [pc, #344]	; (8000564 <Keypad_getkey+0x188>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	b29b      	uxth	r3, r3
 800040e:	2201      	movs	r2, #1
 8000410:	4619      	mov	r1, r3
 8000412:	4855      	ldr	r0, [pc, #340]	; (8000568 <Keypad_getkey+0x18c>)
 8000414:	f000 fad7 	bl	80009c6 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000418:	4b52      	ldr	r3, [pc, #328]	; (8000564 <Keypad_getkey+0x188>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	b29b      	uxth	r3, r3
 800041e:	2201      	movs	r2, #1
 8000420:	4619      	mov	r1, r3
 8000422:	4851      	ldr	r0, [pc, #324]	; (8000568 <Keypad_getkey+0x18c>)
 8000424:	f000 facf 	bl	80009c6 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);//Each time make one of them is 0 to check if pressed.
 8000428:	4a4e      	ldr	r2, [pc, #312]	; (8000564 <Keypad_getkey+0x188>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000430:	b29b      	uxth	r3, r3
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	484c      	ldr	r0, [pc, #304]	; (8000568 <Keypad_getkey+0x18c>)
 8000438:	f000 fac5 	bl	80009c6 <MCAL_GPIO_WritePin>
		for(j = 0; j < 4; j++){//Loop at each row of the selected coloumn
 800043c:	2300      	movs	r3, #0
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	e080      	b.n	8000544 <Keypad_getkey+0x168>

			if ((MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]))==0)//Read the input from which row
 8000442:	4a4a      	ldr	r2, [pc, #296]	; (800056c <Keypad_getkey+0x190>)
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044a:	b29b      	uxth	r3, r3
 800044c:	4619      	mov	r1, r3
 800044e:	4846      	ldr	r0, [pc, #280]	; (8000568 <Keypad_getkey+0x18c>)
 8000450:	f000 faa2 	bl	8000998 <MCAL_GPIO_ReadPin>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d171      	bne.n	800053e <Keypad_getkey+0x162>
			{
				while((MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]))==0);//Multi-Pressing.
 800045a:	bf00      	nop
 800045c:	4a43      	ldr	r2, [pc, #268]	; (800056c <Keypad_getkey+0x190>)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000464:	b29b      	uxth	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	483f      	ldr	r0, [pc, #252]	; (8000568 <Keypad_getkey+0x18c>)
 800046a:	f000 fa95 	bl	8000998 <MCAL_GPIO_ReadPin>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0f3      	beq.n	800045c <Keypad_getkey+0x80>
				switch(i){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b03      	cmp	r3, #3
 8000478:	d861      	bhi.n	800053e <Keypad_getkey+0x162>
 800047a:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <Keypad_getkey+0xa4>)
 800047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000480:	08000491 	.word	0x08000491
 8000484:	080004b9 	.word	0x080004b9
 8000488:	080004e1 	.word	0x080004e1
 800048c:	08000509 	.word	0x08000509
					case (0)://1ST COLOUMN
					if (j == 0)
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d101      	bne.n	800049a <Keypad_getkey+0xbe>
					 return '7';
 8000496:	2337      	movs	r3, #55	; 0x37
 8000498:	e060      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 1)
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d101      	bne.n	80004a4 <Keypad_getkey+0xc8>
					 return '4';
 80004a0:	2334      	movs	r3, #52	; 0x34
 80004a2:	e05b      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 2)
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d101      	bne.n	80004ae <Keypad_getkey+0xd2>
					 return '1';
 80004aa:	2331      	movs	r3, #49	; 0x31
 80004ac:	e056      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 3)
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b03      	cmp	r3, #3
 80004b2:	d13d      	bne.n	8000530 <Keypad_getkey+0x154>
					 return '?';
 80004b4:	233f      	movs	r3, #63	; 0x3f
 80004b6:	e051      	b.n	800055c <Keypad_getkey+0x180>
					break;
					case (1)://2Nd COLOUMN
					if (j == 0)
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d101      	bne.n	80004c2 <Keypad_getkey+0xe6>
					 return '8';
 80004be:	2338      	movs	r3, #56	; 0x38
 80004c0:	e04c      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 1)
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d101      	bne.n	80004cc <Keypad_getkey+0xf0>
					 return '5';
 80004c8:	2335      	movs	r3, #53	; 0x35
 80004ca:	e047      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 2)
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d101      	bne.n	80004d6 <Keypad_getkey+0xfa>
					 return '2';
 80004d2:	2332      	movs	r3, #50	; 0x32
 80004d4:	e042      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 3)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d12b      	bne.n	8000534 <Keypad_getkey+0x158>
					 return '0';
 80004dc:	2330      	movs	r3, #48	; 0x30
 80004de:	e03d      	b.n	800055c <Keypad_getkey+0x180>
					break;
					case (2)://3Rd COLOUMN
					if (j == 0)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <Keypad_getkey+0x10e>
					 return '9';
 80004e6:	2339      	movs	r3, #57	; 0x39
 80004e8:	e038      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 1)
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d101      	bne.n	80004f4 <Keypad_getkey+0x118>
					 return '6';
 80004f0:	2336      	movs	r3, #54	; 0x36
 80004f2:	e033      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 2)
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d101      	bne.n	80004fe <Keypad_getkey+0x122>
					 return '3';
 80004fa:	2333      	movs	r3, #51	; 0x33
 80004fc:	e02e      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 3)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2b03      	cmp	r3, #3
 8000502:	d119      	bne.n	8000538 <Keypad_getkey+0x15c>
					 return '=';
 8000504:	233d      	movs	r3, #61	; 0x3d
 8000506:	e029      	b.n	800055c <Keypad_getkey+0x180>
					break;
					case (3)://4TH COLOUMN
					if (j == 0)
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d101      	bne.n	8000512 <Keypad_getkey+0x136>
					 return '/';
 800050e:	232f      	movs	r3, #47	; 0x2f
 8000510:	e024      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 1)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d101      	bne.n	800051c <Keypad_getkey+0x140>
					 return '*';
 8000518:	232a      	movs	r3, #42	; 0x2a
 800051a:	e01f      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 2)
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d101      	bne.n	8000526 <Keypad_getkey+0x14a>
					 return '-';
 8000522:	232d      	movs	r3, #45	; 0x2d
 8000524:	e01a      	b.n	800055c <Keypad_getkey+0x180>
					else if (j == 3)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d107      	bne.n	800053c <Keypad_getkey+0x160>
					 return '+';
 800052c:	232b      	movs	r3, #43	; 0x2b
 800052e:	e015      	b.n	800055c <Keypad_getkey+0x180>
					break;
 8000530:	bf00      	nop
 8000532:	e004      	b.n	800053e <Keypad_getkey+0x162>
					break;
 8000534:	bf00      	nop
 8000536:	e002      	b.n	800053e <Keypad_getkey+0x162>
					break;
 8000538:	bf00      	nop
 800053a:	e000      	b.n	800053e <Keypad_getkey+0x162>
					break;
 800053c:	bf00      	nop
		for(j = 0; j < 4; j++){//Loop at each row of the selected coloumn
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	2b03      	cmp	r3, #3
 8000548:	f77f af7b 	ble.w	8000442 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3301      	adds	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b03      	cmp	r3, #3
 8000556:	f77f af47 	ble.w	80003e8 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 800055a:	2341      	movs	r3, #65	; 0x41
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000010 	.word	0x20000010
 8000568:	40010c00 	.word	0x40010c00
 800056c:	20000000 	.word	0x20000000

08000570 <LCD_clear_screen>:

GPIO_PIN_CONFIG_T PinCfg;



void LCD_clear_screen (){//clears the LCD screen.
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 f8eb 	bl	8000750 <LCD_Send_A_Command>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <LCD_lcd_kick>:
void LCD_lcd_kick (void){//sends a pulse to the EN pin of the LCD to initiate a data transfer.
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	//Enable read at Falling(H>>L)
	MCAL_GPIO_WritePin(LCD_Control, Enable_Switch, GPIO_PIN_SET) ;
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <LCD_lcd_kick+0x28>)
 800058c:	f000 fa1b 	bl	80009c6 <MCAL_GPIO_WritePin>
	my_wait(50);
 8000590:	2032      	movs	r0, #50	; 0x32
 8000592:	f7ff fe2d 	bl	80001f0 <my_wait>
	MCAL_GPIO_WritePin(LCD_Control, Enable_Switch, GPIO_PIN_RESET) ;
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <LCD_lcd_kick+0x28>)
 800059e:	f000 fa12 	bl	80009c6 <MCAL_GPIO_WritePin>

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010800 	.word	0x40010800

080005ac <LCD_GOTO_XY>:
void LCD_GOTO_XY(unsigned char line, unsigned char position){// positions the cursor at the specified line and position on the LCD screen.
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d108      	bne.n	80005d4 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d805      	bhi.n	80005d4 <LCD_GOTO_XY+0x28>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW+position);
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	3b80      	subs	r3, #128	; 0x80
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f8be 	bl	8000750 <LCD_Send_A_Command>
		}
	}
	if (line == 2)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d108      	bne.n	80005ec <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d805      	bhi.n	80005ec <LCD_GOTO_XY+0x40>
		{
			LCD_Send_A_Command(LCD_BEGIN_AT_SECOND_RAW+position);
 80005e0:	79bb      	ldrb	r3, [r7, #6]
 80005e2:	3b40      	subs	r3, #64	; 0x40
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f8b2 	bl	8000750 <LCD_Send_A_Command>
		}
	}
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <LCD_init>:
	LCD_lcd_kick(); //Enable
	//LCD_Control_Direction |= (0xFF<<DATA_shift);; //DDRA>>Output Mode
	MCAL_GPIO_WritePin(LCD_Control, RW_SWITCH, GPIO_PIN_RESET) ;//Rest
}

void LCD_init(void){//initializes the LCD display with the required settings.
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	my_wait(20);
 80005f8:	2014      	movs	r0, #20
 80005fa:	f7ff fdf9 	bl	80001f0 <my_wait>

	//LCD_Control_Direction |= (1<<Enable_Switch | 1<<RW_SWITCH | 1<<RS_SWITCH);//DDRB>>OUTPUT (Enable,RS,RW)
	//LCD_Control &= ~(1<<Enable_Switch | 1<<RS_SWITCH | 1<<RW_SWITCH);//PortB

	//Enable_Switch ..RW_SWITCH..RS_SWITCH.. are Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber=RS_SWITCH;
 80005fe:	4b52      	ldr	r3, [pc, #328]	; (8000748 <LCD_init+0x154>)
 8000600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000604:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000606:	4b50      	ldr	r3, [pc, #320]	; (8000748 <LCD_init+0x154>)
 8000608:	2204      	movs	r2, #4
 800060a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800060c:	4b4e      	ldr	r3, [pc, #312]	; (8000748 <LCD_init+0x154>)
 800060e:	2201      	movs	r2, #1
 8000610:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 8000612:	494d      	ldr	r1, [pc, #308]	; (8000748 <LCD_init+0x154>)
 8000614:	484d      	ldr	r0, [pc, #308]	; (800074c <LCD_init+0x158>)
 8000616:	f000 f942 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=RW_SWITCH;
 800061a:	4b4b      	ldr	r3, [pc, #300]	; (8000748 <LCD_init+0x154>)
 800061c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000620:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000622:	4b49      	ldr	r3, [pc, #292]	; (8000748 <LCD_init+0x154>)
 8000624:	2204      	movs	r2, #4
 8000626:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <LCD_init+0x154>)
 800062a:	2201      	movs	r2, #1
 800062c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 800062e:	4946      	ldr	r1, [pc, #280]	; (8000748 <LCD_init+0x154>)
 8000630:	4846      	ldr	r0, [pc, #280]	; (800074c <LCD_init+0x158>)
 8000632:	f000 f934 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=Enable_Switch;
 8000636:	4b44      	ldr	r3, [pc, #272]	; (8000748 <LCD_init+0x154>)
 8000638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 800063e:	4b42      	ldr	r3, [pc, #264]	; (8000748 <LCD_init+0x154>)
 8000640:	2204      	movs	r2, #4
 8000642:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <LCD_init+0x154>)
 8000646:	2201      	movs	r2, #1
 8000648:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 800064a:	493f      	ldr	r1, [pc, #252]	; (8000748 <LCD_init+0x154>)
 800064c:	483f      	ldr	r0, [pc, #252]	; (800074c <LCD_init+0x158>)
 800064e:	f000 f926 	bl	800089e <MCAL_GPIO_INIT>
	////////////////////////////////////////////////////////////////////////

	my_wait(15);
 8000652:	200f      	movs	r0, #15
 8000654:	f7ff fdcc 	bl	80001f0 <my_wait>

	//Pin /A0>>A7 is OUTPUT
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber=GPIO_PIN_0;
 8000658:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <LCD_init+0x154>)
 800065a:	2201      	movs	r2, #1
 800065c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <LCD_init+0x154>)
 8000660:	2204      	movs	r2, #4
 8000662:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <LCD_init+0x154>)
 8000666:	2201      	movs	r2, #1
 8000668:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 800066a:	4937      	ldr	r1, [pc, #220]	; (8000748 <LCD_init+0x154>)
 800066c:	4837      	ldr	r0, [pc, #220]	; (800074c <LCD_init+0x158>)
 800066e:	f000 f916 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_1;
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <LCD_init+0x154>)
 8000674:	2202      	movs	r2, #2
 8000676:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000678:	4b33      	ldr	r3, [pc, #204]	; (8000748 <LCD_init+0x154>)
 800067a:	2204      	movs	r2, #4
 800067c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <LCD_init+0x154>)
 8000680:	2201      	movs	r2, #1
 8000682:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 8000684:	4930      	ldr	r1, [pc, #192]	; (8000748 <LCD_init+0x154>)
 8000686:	4831      	ldr	r0, [pc, #196]	; (800074c <LCD_init+0x158>)
 8000688:	f000 f909 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_2;
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <LCD_init+0x154>)
 800068e:	2204      	movs	r2, #4
 8000690:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <LCD_init+0x154>)
 8000694:	2204      	movs	r2, #4
 8000696:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <LCD_init+0x154>)
 800069a:	2201      	movs	r2, #1
 800069c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 800069e:	492a      	ldr	r1, [pc, #168]	; (8000748 <LCD_init+0x154>)
 80006a0:	482a      	ldr	r0, [pc, #168]	; (800074c <LCD_init+0x158>)
 80006a2:	f000 f8fc 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_3;
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <LCD_init+0x154>)
 80006a8:	2208      	movs	r2, #8
 80006aa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <LCD_init+0x154>)
 80006ae:	2204      	movs	r2, #4
 80006b0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <LCD_init+0x154>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 80006b8:	4923      	ldr	r1, [pc, #140]	; (8000748 <LCD_init+0x154>)
 80006ba:	4824      	ldr	r0, [pc, #144]	; (800074c <LCD_init+0x158>)
 80006bc:	f000 f8ef 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_4;
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <LCD_init+0x154>)
 80006c2:	2210      	movs	r2, #16
 80006c4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <LCD_init+0x154>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <LCD_init+0x154>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 80006d2:	491d      	ldr	r1, [pc, #116]	; (8000748 <LCD_init+0x154>)
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <LCD_init+0x158>)
 80006d6:	f000 f8e2 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_5;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <LCD_init+0x154>)
 80006dc:	2220      	movs	r2, #32
 80006de:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <LCD_init+0x154>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <LCD_init+0x154>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 80006ec:	4916      	ldr	r1, [pc, #88]	; (8000748 <LCD_init+0x154>)
 80006ee:	4817      	ldr	r0, [pc, #92]	; (800074c <LCD_init+0x158>)
 80006f0:	f000 f8d5 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_6;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <LCD_init+0x154>)
 80006f6:	2240      	movs	r2, #64	; 0x40
 80006f8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <LCD_init+0x154>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <LCD_init+0x154>)
 8000702:	2201      	movs	r2, #1
 8000704:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 8000706:	4910      	ldr	r1, [pc, #64]	; (8000748 <LCD_init+0x154>)
 8000708:	4810      	ldr	r0, [pc, #64]	; (800074c <LCD_init+0x158>)
 800070a:	f000 f8c8 	bl	800089e <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber=GPIO_PIN_7;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <LCD_init+0x154>)
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <LCD_init+0x154>)
 8000716:	2204      	movs	r2, #4
 8000718:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <LCD_init+0x154>)
 800071c:	2201      	movs	r2, #1
 800071e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_Control, &PinCfg);
 8000720:	4909      	ldr	r1, [pc, #36]	; (8000748 <LCD_init+0x154>)
 8000722:	480a      	ldr	r0, [pc, #40]	; (800074c <LCD_init+0x158>)
 8000724:	f000 f8bb 	bl	800089e <MCAL_GPIO_INIT>
	LCD_clear_screen();
 8000728:	f7ff ff22 	bl	8000570 <LCD_clear_screen>

	//#ifdef Eight_Bit_Mode

		LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
 800072c:	2038      	movs	r0, #56	; 0x38
 800072e:	f000 f80f 	bl	8000750 <LCD_Send_A_Command>
	//#ifdef Four_Bit_Mode
	//	LCD_Send_A_Command(0x02);
	//	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
	//#endif // Eight_Bit_Mode

		LCD_Send_A_Command(LCD_ENTRY_MODE);
 8000732:	2006      	movs	r0, #6
 8000734:	f000 f80c 	bl	8000750 <LCD_Send_A_Command>
		LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 8000738:	2080      	movs	r0, #128	; 0x80
 800073a:	f000 f809 	bl	8000750 <LCD_Send_A_Command>
		LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);
 800073e:	200f      	movs	r0, #15
 8000740:	f000 f806 	bl	8000750 <LCD_Send_A_Command>


}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000003c 	.word	0x2000003c
 800074c:	40010800 	.word	0x40010800

08000750 <LCD_Send_A_Command>:


void LCD_Send_A_Command(unsigned char command){//sends a command to the LCD display.
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	//send commands already intialized at datasheet and there are steps for doing it.
	//#ifdef Eight_Bit_Mode
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_Control, command);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <LCD_Send_A_Command+0x40>)
 8000762:	f000 f947 	bl	80009f4 <MCAL_GPIO_WritePort>
	//LCD_Control &=~((1 << RS_SWITCH) | (1<<RW_SWITCH)) ;//PortB
	MCAL_GPIO_WritePin(LCD_Control, RS_SWITCH, GPIO_PIN_RESET) ;
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <LCD_Send_A_Command+0x40>)
 800076e:	f000 f92a 	bl	80009c6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control, RW_SWITCH, GPIO_PIN_RESET) ;
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <LCD_Send_A_Command+0x40>)
 800077a:	f000 f924 	bl	80009c6 <MCAL_GPIO_WritePin>
	my_wait(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fd36 	bl	80001f0 <my_wait>
	LCD_lcd_kick();
 8000784:	f7ff fefc 	bl	8000580 <LCD_lcd_kick>
	//	my_wait(100);
	//	LCD_Control = (LCD_Control & 0x0F) | (command << 4);
	//	LCD_Control &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	//	LCD_lcd_kick();
	//#endif
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40010800 	.word	0x40010800

08000794 <LCD_Send_A_Character>:
void LCD_Send_A_Character(unsigned char character){//writes a character to the LCD display.
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
	//#ifdef Eight_Bit_Mode
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_Control, character);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <LCD_Send_A_Character+0x40>)
 80007a6:	f000 f925 	bl	80009f4 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_Control, RS_SWITCH, GPIO_PIN_SET) ;
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <LCD_Send_A_Character+0x40>)
 80007b2:	f000 f908 	bl	80009c6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Control, RW_SWITCH, GPIO_PIN_RESET) ;
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <LCD_Send_A_Character+0x40>)
 80007be:	f000 f902 	bl	80009c6 <MCAL_GPIO_WritePin>

	my_wait(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fd14 	bl	80001f0 <my_wait>
	LCD_lcd_kick();
 80007c8:	f7ff feda 	bl	8000580 <LCD_lcd_kick>
	//	LCD_lcd_kick();
	//#endif
	//}


}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40010800 	.word	0x40010800

080007d8 <Get_CRLH_Position>:
 * @param[in]	-PinNumber: which  pinGet_CRLH_Position number according @ref
 * 				 GPIO PINS_define to get bit
 * @retval		-Starting bit
 * Note			-none
======================================================================================*/
uint8_t Get_CRLH_Position(uint16_t PinNumber){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	2b80      	cmp	r3, #128	; 0x80
 80007e6:	d042      	beq.n	800086e <Get_CRLH_Position+0x96>
 80007e8:	2b80      	cmp	r3, #128	; 0x80
 80007ea:	dc11      	bgt.n	8000810 <Get_CRLH_Position+0x38>
 80007ec:	2b08      	cmp	r3, #8
 80007ee:	d036      	beq.n	800085e <Get_CRLH_Position+0x86>
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	dc06      	bgt.n	8000802 <Get_CRLH_Position+0x2a>
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d02e      	beq.n	8000856 <Get_CRLH_Position+0x7e>
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d02e      	beq.n	800085a <Get_CRLH_Position+0x82>
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d028      	beq.n	8000852 <Get_CRLH_Position+0x7a>
 8000800:	e047      	b.n	8000892 <Get_CRLH_Position+0xba>
 8000802:	2b20      	cmp	r3, #32
 8000804:	d02f      	beq.n	8000866 <Get_CRLH_Position+0x8e>
 8000806:	2b40      	cmp	r3, #64	; 0x40
 8000808:	d02f      	beq.n	800086a <Get_CRLH_Position+0x92>
 800080a:	2b10      	cmp	r3, #16
 800080c:	d029      	beq.n	8000862 <Get_CRLH_Position+0x8a>
 800080e:	e040      	b.n	8000892 <Get_CRLH_Position+0xba>
 8000810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000814:	d033      	beq.n	800087e <Get_CRLH_Position+0xa6>
 8000816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800081a:	dc09      	bgt.n	8000830 <Get_CRLH_Position+0x58>
 800081c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000820:	d029      	beq.n	8000876 <Get_CRLH_Position+0x9e>
 8000822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000826:	d028      	beq.n	800087a <Get_CRLH_Position+0xa2>
 8000828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800082c:	d021      	beq.n	8000872 <Get_CRLH_Position+0x9a>
 800082e:	e030      	b.n	8000892 <Get_CRLH_Position+0xba>
 8000830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000834:	d027      	beq.n	8000886 <Get_CRLH_Position+0xae>
 8000836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800083a:	dc03      	bgt.n	8000844 <Get_CRLH_Position+0x6c>
 800083c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000840:	d01f      	beq.n	8000882 <Get_CRLH_Position+0xaa>
 8000842:	e026      	b.n	8000892 <Get_CRLH_Position+0xba>
 8000844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000848:	d01f      	beq.n	800088a <Get_CRLH_Position+0xb2>
 800084a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800084e:	d01e      	beq.n	800088e <Get_CRLH_Position+0xb6>
 8000850:	e01f      	b.n	8000892 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000852:	2300      	movs	r3, #0
 8000854:	e01e      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000856:	2304      	movs	r3, #4
 8000858:	e01c      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800085a:	2308      	movs	r3, #8
 800085c:	e01a      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800085e:	230c      	movs	r3, #12
 8000860:	e018      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000862:	2310      	movs	r3, #16
 8000864:	e016      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000866:	2314      	movs	r3, #20
 8000868:	e014      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800086a:	2318      	movs	r3, #24
 800086c:	e012      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800086e:	231c      	movs	r3, #28
 8000870:	e010      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000872:	2300      	movs	r3, #0
 8000874:	e00e      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000876:	2304      	movs	r3, #4
 8000878:	e00c      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800087a:	2308      	movs	r3, #8
 800087c:	e00a      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800087e:	230c      	movs	r3, #12
 8000880:	e008      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000882:	2310      	movs	r3, #16
 8000884:	e006      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000886:	2314      	movs	r3, #20
 8000888:	e004      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800088a:	2318      	movs	r3, #24
 800088c:	e002      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800088e:	231c      	movs	r3, #28
 8000890:	e000      	b.n	8000894 <Get_CRLH_Position+0xbc>
		break;


	}
	return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <MCAL_GPIO_INIT>:
 *				 the configuration information for the specified GPIO PIN.
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,but LQFP48 Package
 * 				 has only GPIO A,B,PART of C/D exported as external PINS from the M
======================================================================================*/
void MCAL_GPIO_INIT(GPIO_Typedef *GPIOX, GPIO_PIN_CONFIG_T *PinConfig){
 800089e:	b590      	push	{r4, r7, lr}
 80008a0:	b085      	sub	sp, #20
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) (x=A..G) >> Configure pin0>>pin7
	//Port configuration register High (GPIOx_CRL) (x=A..G) >> Configure pin8>>pin15

	volatile uint32_t* ConfigRegister=NULL; //4 bytes because CRL OR CRH Are 4 Bytes REGISTER
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config=0;//1 Byte >>Need ONLY 4 Bits for MODE&CNY
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
	ConfigRegister=(PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;//if GPIO's pin less than 8 so ConfigRegister will have address of CRL else will have CRH
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	2bff      	cmp	r3, #255	; 0xff
 80008b6:	d801      	bhi.n	80008bc <MCAL_GPIO_INIT+0x1e>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	e001      	b.n	80008c0 <MCAL_GPIO_INIT+0x22>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3304      	adds	r3, #4
 80008c0:	60bb      	str	r3, [r7, #8]

	//Clear MODEy[1:0]: & CNFy[1:0]:
	(*ConfigRegister) &=~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));// 1111 will be shifter to Bit's Number of Pin Number and will be cleared
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff86 	bl	80007d8 <Get_CRLH_Position>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	230f      	movs	r3, #15
 80008d2:	4093      	lsls	r3, r2
 80008d4:	43da      	mvns	r2, r3
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	401a      	ands	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	601a      	str	r2, [r3, #0]

	//Want to know if the mode OUT OR IN and whats its CNY
	//01: Floating input (reset state)

	if((PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_PP) ||
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	2b07      	cmp	r3, #7
 80008e6:	d00b      	beq.n	8000900 <MCAL_GPIO_INIT+0x62>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	789b      	ldrb	r3, [r3, #2]
 80008ec:	2b06      	cmp	r3, #6
 80008ee:	d007      	beq.n	8000900 <MCAL_GPIO_INIT+0x62>
			(PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_PP)){
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_PP) ||
 80008f4:	2b05      	cmp	r3, #5
 80008f6:	d003      	beq.n	8000900 <MCAL_GPIO_INIT+0x62>
			(PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_PP)){
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d10e      	bne.n	800091e <MCAL_GPIO_INIT+0x80>
		Pin_Config =( (((PinConfig->GPIO_PinMode -4)<<2) | (PinConfig->GPIO_output_speed)) &0x0f);//&0x0f to ensure that the first 4 bits are only set.
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	789b      	ldrb	r3, [r3, #2]
 8000904:	3b04      	subs	r3, #4
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	b25a      	sxtb	r2, r3
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	78db      	ldrb	r3, [r3, #3]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e02a      	b.n	8000974 <MCAL_GPIO_INIT+0xd6>
	}

	else{ //MODE = 00: Input mode (reset state)
		if((PinConfig ->GPIO_PinMode == GPIO_MODE_INPUT_FLO) ||(PinConfig ->GPIO_PinMode == GPIO_MODE_ANALOG) ){
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d003      	beq.n	800092e <MCAL_GPIO_INIT+0x90>
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d107      	bne.n	800093e <MCAL_GPIO_INIT+0xa0>
			//Set alwasy MODE [1:0]00
			Pin_Config =( (((PinConfig->GPIO_PinMode )<<2) | 0x0) &0x0f);//&0x0f to ensure that the first 4 bits are only set.
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e01a      	b.n	8000974 <MCAL_GPIO_INIT+0xd6>
		}

		else if((PinConfig ->GPIO_PinMode == GPIO_MODE_AF_INPUT)){ //Will BE input floating
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	2b08      	cmp	r3, #8
 8000944:	d102      	bne.n	800094c <MCAL_GPIO_INIT+0xae>
			Pin_Config =( (((GPIO_MODE_INPUT_FLO)<<2) | 0x0) &0x0f);
 8000946:	2304      	movs	r3, #4
 8000948:	73fb      	strb	r3, [r7, #15]
 800094a:	e013      	b.n	8000974 <MCAL_GPIO_INIT+0xd6>
		}
		else{//PU OR PD Input
			Pin_Config =( (((GPIO_MODE_INPUT_PU)<<2) | 0x0) &0x0f);
 800094c:	2308      	movs	r3, #8
 800094e:	73fb      	strb	r3, [r7, #15]
			if(PinConfig ->GPIO_PinMode == GPIO_MODE_INPUT_PU){
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d105      	bne.n	8000964 <MCAL_GPIO_INIT+0xc6>
				//Table 20 >> ODR -->1
				GPIOX->ODR = PinConfig->GPIO_PinNumber; //GPIO_PinNumber Already 1<<NO
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	e007      	b.n	8000974 <MCAL_GPIO_INIT+0xd6>
			}
			else{
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber); //GPIO_PinNumber Already 0<<NO
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	8812      	ldrh	r2, [r2, #0]
 800096c:	43d2      	mvns	r2, r2
 800096e:	401a      	ands	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*ConfigRegister) |= ((Pin_Config)<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));//Shift Left the Pin_Config which have 4 Bits of MODE&CY to Pin Number.
 8000974:	7bfc      	ldrb	r4, [r7, #15]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff2c 	bl	80007d8 <Get_CRLH_Position>
 8000980:	4603      	mov	r3, r0
 8000982:	fa04 f203 	lsl.w	r2, r4, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	431a      	orrs	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}

08000998 <MCAL_GPIO_ReadPin>:
 * 				 the GPIO peripheral
 * @param[in]	-PinNumber: Set Pin Number according @ref GPIO_PINS_Define
 * @retval		-The input pin value (two values based on @ref GPIO_PIN_state)
 * Note			-none
======================================================================================*/
uint8_t MCAL_GPIO_ReadPin(GPIO_Typedef *GPIOX,uint16_t PinNumber){
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]

	uint8_t Bit_Status;
	//if(((GPIOX->IDR & PinNumber)>>Get_IDR_Position(PinNumber)) != ((uint32_t)GPIO_PIN_RESET)){
	if(((GPIOX->IDR & PinNumber)) != ((uint32_t)GPIO_PIN_RESET)){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	887b      	ldrh	r3, [r7, #2]
 80009aa:	4013      	ands	r3, r2
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <MCAL_GPIO_ReadPin+0x1e>
		Bit_Status =GPIO_PIN_SET;
 80009b0:	2301      	movs	r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e001      	b.n	80009ba <MCAL_GPIO_ReadPin+0x22>
	}
	else{
		Bit_Status =GPIO_PIN_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]
	}
	return Bit_Status;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <MCAL_GPIO_WritePin>:
 * @param[in]	-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @param[in]	-value: Pin Value
 * @retval		-none
 * Note			-none
======================================================================================*/
void MCAL_GPIO_WritePin(GPIO_Typedef *GPIOX,uint16_t PinNumber,uint8_t Value){
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	807b      	strh	r3, [r7, #2]
 80009d2:	4613      	mov	r3, r2
 80009d4:	707b      	strb	r3, [r7, #1]
	//1st method
	if(Value != GPIO_PIN_RESET){
 80009d6:	787b      	ldrb	r3, [r7, #1]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <MCAL_GPIO_WritePin+0x1e>
		//2nd Method
		//		BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bi
		GPIOX->BSRR=(uint32_t)PinNumber;//only Read
 80009dc:	887a      	ldrh	r2, [r7, #2]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	611a      	str	r2, [r3, #16]
	//	1: Reset the corresponding ODRx bit
	else{
		GPIOX->BRR =(uint32_t)PinNumber;
	}

}
 80009e2:	e002      	b.n	80009ea <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR =(uint32_t)PinNumber;
 80009e4:	887a      	ldrh	r2, [r7, #2]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	615a      	str	r2, [r3, #20]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <MCAL_GPIO_WritePort>:
 * @param[in]	-value: port Value to be written
 * @retval		-none
 * Note			-none
======================================================================================*/

void MCAL_GPIO_WritePort(GPIO_Typedef *GPIOX,uint16_t Value){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]

	GPIOX->ODR=Value;
 8000a00:	887a      	ldrh	r2, [r7, #2]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60da      	str	r2, [r3, #12]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <__libc_init_array>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	2500      	movs	r5, #0
 8000a14:	4e0c      	ldr	r6, [pc, #48]	; (8000a48 <__libc_init_array+0x38>)
 8000a16:	4c0d      	ldr	r4, [pc, #52]	; (8000a4c <__libc_init_array+0x3c>)
 8000a18:	1ba4      	subs	r4, r4, r6
 8000a1a:	10a4      	asrs	r4, r4, #2
 8000a1c:	42a5      	cmp	r5, r4
 8000a1e:	d109      	bne.n	8000a34 <__libc_init_array+0x24>
 8000a20:	f000 f81a 	bl	8000a58 <_init>
 8000a24:	2500      	movs	r5, #0
 8000a26:	4e0a      	ldr	r6, [pc, #40]	; (8000a50 <__libc_init_array+0x40>)
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <__libc_init_array+0x44>)
 8000a2a:	1ba4      	subs	r4, r4, r6
 8000a2c:	10a4      	asrs	r4, r4, #2
 8000a2e:	42a5      	cmp	r5, r4
 8000a30:	d105      	bne.n	8000a3e <__libc_init_array+0x2e>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a38:	4798      	blx	r3
 8000a3a:	3501      	adds	r5, #1
 8000a3c:	e7ee      	b.n	8000a1c <__libc_init_array+0xc>
 8000a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a42:	4798      	blx	r3
 8000a44:	3501      	adds	r5, #1
 8000a46:	e7f2      	b.n	8000a2e <__libc_init_array+0x1e>
 8000a48:	08000a84 	.word	0x08000a84
 8000a4c:	08000a84 	.word	0x08000a84
 8000a50:	08000a84 	.word	0x08000a84
 8000a54:	08000a88 	.word	0x08000a88

08000a58 <_init>:
 8000a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5a:	bf00      	nop
 8000a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5e:	bc08      	pop	{r3}
 8000a60:	469e      	mov	lr, r3
 8000a62:	4770      	bx	lr

08000a64 <_fini>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	bf00      	nop
 8000a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6a:	bc08      	pop	{r3}
 8000a6c:	469e      	mov	lr, r3
 8000a6e:	4770      	bx	lr
