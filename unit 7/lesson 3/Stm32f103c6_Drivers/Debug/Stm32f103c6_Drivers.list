
Stm32f103c6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000504  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000634  0800063c  0001063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000634  08000634  0001063c  2**0
                  CONTENTS
  4 .ARM          00000000  08000634  08000634  0001063c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000634  0800063c  0001063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000634  08000634  00010634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000638  08000638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800063c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800063c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001063c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001999  00000000  00000000  00010665  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000447  00000000  00000000  00011ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000049c  00000000  00000000  00012445  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c8  00000000  00000000  000128e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a0  00000000  00000000  000129b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b05  00000000  00000000  00012a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000d0c  00000000  00000000  00014555  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000076ec  00000000  00000000  00015261  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c94d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000264  00000000  00000000  0001c9c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800061c 	.word	0x0800061c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800061c 	.word	0x0800061c

08000170 <clock_Init>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include "Stm32_f103c6_Drivers_Gpio.h"
#include "Stm32f103x6.h"

void clock_Init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock IOPA EN
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_Init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_Init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable clock IOPB EN
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_Init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_Init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIOA_INIT>:
void GPIOA_INIT(){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_PIN_CONFIG_T PinCfg;
	//Pin A1 is INPUT HighZ Floating Input
	PinCfg.GPIO_PinNumber=GPIO_PIN_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode=GPIO_MODE_INPUT_FLO;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA_PR, &PinCfg);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <GPIOA_INIT+0x64>)
 80001ac:	f000 f965 	bl	800047a <MCAL_GPIO_INIT>
	//Pin B1 is OUTPUT
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber=GPIO_PIN_1;
 80001b0:	2302      	movs	r3, #2
 80001b2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80001b4:	2304      	movs	r3, #4
 80001b6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80001b8:	2301      	movs	r3, #1
 80001ba:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB_PR, &PinCfg);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	480f      	ldr	r0, [pc, #60]	; (8000200 <GPIOA_INIT+0x68>)
 80001c2:	f000 f95a 	bl	800047a <MCAL_GPIO_INIT>

	//Pin A13 is INPUT HighZ
	//00: Input mode (reset state)
	//01: Floating input (reset state)
	PinCfg.GPIO_PinNumber=GPIO_PIN_13																;
 80001c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ca:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode=GPIO_MODE_INPUT_FLO;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA_PR, &PinCfg);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4809      	ldr	r0, [pc, #36]	; (80001fc <GPIOA_INIT+0x64>)
 80001d6:	f000 f950 	bl	800047a <MCAL_GPIO_INIT>

	//Pin B13 is OUTPUT
	//01: Output mode, max speed 10 MHz.
	PinCfg.GPIO_PinNumber=GPIO_PIN_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode=GPIO_MODE_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed=GPIO_SPEED_10M;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB_PR, &PinCfg);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <GPIOA_INIT+0x68>)
 80001ee:	f000 f944 	bl	800047a <MCAL_GPIO_INIT>


}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <my_wait>:
my_wait(int a){
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<a;i++)
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e00b      	b.n	800022a <my_wait+0x26>
		for(j=0;j<255;j++);
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e002      	b.n	800021e <my_wait+0x1a>
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	3301      	adds	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2bfe      	cmp	r3, #254	; 0xfe
 8000222:	d9f9      	bls.n	8000218 <my_wait+0x14>
	for(i=0;i<a;i++)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	429a      	cmp	r2, r3
 8000230:	d3ef      	bcc.n	8000212 <my_wait+0xe>


}
 8000232:	bf00      	nop
 8000234:	4618      	mov	r0, r3
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
	...

08000240 <main>:

int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	clock_Init();
 8000244:	f7ff ff94 	bl	8000170 <clock_Init>
	GPIOA_INIT();
 8000248:	f7ff ffa6 	bl	8000198 <GPIOA_INIT>

	while(1){
		//Read Bit 1  ..PA1>>Connected External to PUR
		if(MCAL_GPIO_ReadPin(GPIOA_PR, GPIO_PIN_1) ==0)//Press
 800024c:	2102      	movs	r1, #2
 800024e:	4811      	ldr	r0, [pc, #68]	; (8000294 <main+0x54>)
 8000250:	f000 f990 	bl	8000574 <MCAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d10b      	bne.n	8000272 <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIOB_PR, GPIO_PIN_1);//toggle bit 1 >>B1
 800025a:	2102      	movs	r1, #2
 800025c:	480e      	ldr	r0, [pc, #56]	; (8000298 <main+0x58>)
 800025e:	f000 f9a7 	bl	80005b0 <MCAL_GPIO_TogglePin>
			while((MCAL_GPIO_ReadPin(GPIOA_PR, GPIO_PIN_1) ==0));//Single press ..while am pressing>> same action
 8000262:	bf00      	nop
 8000264:	2102      	movs	r1, #2
 8000266:	480b      	ldr	r0, [pc, #44]	; (8000294 <main+0x54>)
 8000268:	f000 f984 	bl	8000574 <MCAL_GPIO_ReadPin>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0f8      	beq.n	8000264 <main+0x24>
		}
		//Read Bit 13  ..PA13>>Connected External to PDR
		if(MCAL_GPIO_ReadPin(GPIOA_PR, GPIO_PIN_13) ==1)//Multi Pressing
 8000272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000276:	4807      	ldr	r0, [pc, #28]	; (8000294 <main+0x54>)
 8000278:	f000 f97c 	bl	8000574 <MCAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b01      	cmp	r3, #1
 8000280:	d1e4      	bne.n	800024c <main+0xc>
		{
			MCAL_GPIO_TogglePin(GPIOB_PR, GPIO_PIN_13);//toggle bit 13 >>B13
 8000282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <main+0x58>)
 8000288:	f000 f992 	bl	80005b0 <MCAL_GPIO_TogglePin>
			my_wait(1);
 800028c:	2001      	movs	r0, #1
 800028e:	f7ff ffb9 	bl	8000204 <my_wait>
		if(MCAL_GPIO_ReadPin(GPIOA_PR, GPIO_PIN_1) ==0)//Press
 8000292:	e7db      	b.n	800024c <main+0xc>
 8000294:	40010800 	.word	0x40010800
 8000298:	40010c00 	.word	0x40010c00

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 f983 	bl	80005d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ffb7 	bl	8000240 <main>

080002d2 <LoopForever>:

LoopForever:
    b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e0:	0800063c 	.word	0x0800063c
  ldr r2, =_sbss
 80002e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e8:	2000001c 	.word	0x2000001c

080002ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC1_2_IRQHandler>

080002ee <Get_CRLH_Position>:
 * @param[in]	-PinNumber: which  pinGet_CRLH_Position number according @ref
 * 				 GPIO PINS_define to get bit
 * @retval		-Starting bit
 * Note			-none
======================================================================================*/
uint8_t Get_CRLH_Position(uint16_t PinNumber){
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	4603      	mov	r3, r0
 80002f6:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80002f8:	88fb      	ldrh	r3, [r7, #6]
 80002fa:	2b80      	cmp	r3, #128	; 0x80
 80002fc:	d042      	beq.n	8000384 <Get_CRLH_Position+0x96>
 80002fe:	2b80      	cmp	r3, #128	; 0x80
 8000300:	dc11      	bgt.n	8000326 <Get_CRLH_Position+0x38>
 8000302:	2b08      	cmp	r3, #8
 8000304:	d036      	beq.n	8000374 <Get_CRLH_Position+0x86>
 8000306:	2b08      	cmp	r3, #8
 8000308:	dc06      	bgt.n	8000318 <Get_CRLH_Position+0x2a>
 800030a:	2b02      	cmp	r3, #2
 800030c:	d02e      	beq.n	800036c <Get_CRLH_Position+0x7e>
 800030e:	2b04      	cmp	r3, #4
 8000310:	d02e      	beq.n	8000370 <Get_CRLH_Position+0x82>
 8000312:	2b01      	cmp	r3, #1
 8000314:	d028      	beq.n	8000368 <Get_CRLH_Position+0x7a>
 8000316:	e047      	b.n	80003a8 <Get_CRLH_Position+0xba>
 8000318:	2b20      	cmp	r3, #32
 800031a:	d02f      	beq.n	800037c <Get_CRLH_Position+0x8e>
 800031c:	2b40      	cmp	r3, #64	; 0x40
 800031e:	d02f      	beq.n	8000380 <Get_CRLH_Position+0x92>
 8000320:	2b10      	cmp	r3, #16
 8000322:	d029      	beq.n	8000378 <Get_CRLH_Position+0x8a>
 8000324:	e040      	b.n	80003a8 <Get_CRLH_Position+0xba>
 8000326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800032a:	d033      	beq.n	8000394 <Get_CRLH_Position+0xa6>
 800032c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000330:	dc09      	bgt.n	8000346 <Get_CRLH_Position+0x58>
 8000332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000336:	d029      	beq.n	800038c <Get_CRLH_Position+0x9e>
 8000338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800033c:	d028      	beq.n	8000390 <Get_CRLH_Position+0xa2>
 800033e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000342:	d021      	beq.n	8000388 <Get_CRLH_Position+0x9a>
 8000344:	e030      	b.n	80003a8 <Get_CRLH_Position+0xba>
 8000346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800034a:	d027      	beq.n	800039c <Get_CRLH_Position+0xae>
 800034c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000350:	dc03      	bgt.n	800035a <Get_CRLH_Position+0x6c>
 8000352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000356:	d01f      	beq.n	8000398 <Get_CRLH_Position+0xaa>
 8000358:	e026      	b.n	80003a8 <Get_CRLH_Position+0xba>
 800035a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800035e:	d01f      	beq.n	80003a0 <Get_CRLH_Position+0xb2>
 8000360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000364:	d01e      	beq.n	80003a4 <Get_CRLH_Position+0xb6>
 8000366:	e01f      	b.n	80003a8 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000368:	2300      	movs	r3, #0
 800036a:	e01e      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800036c:	2304      	movs	r3, #4
 800036e:	e01c      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000370:	2308      	movs	r3, #8
 8000372:	e01a      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000374:	230c      	movs	r3, #12
 8000376:	e018      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000378:	2310      	movs	r3, #16
 800037a:	e016      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800037c:	2314      	movs	r3, #20
 800037e:	e014      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000380:	2318      	movs	r3, #24
 8000382:	e012      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000384:	231c      	movs	r3, #28
 8000386:	e010      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000388:	2300      	movs	r3, #0
 800038a:	e00e      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800038c:	2304      	movs	r3, #4
 800038e:	e00c      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000390:	2308      	movs	r3, #8
 8000392:	e00a      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000394:	230c      	movs	r3, #12
 8000396:	e008      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000398:	2310      	movs	r3, #16
 800039a:	e006      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800039c:	2314      	movs	r3, #20
 800039e:	e004      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80003a0:	2318      	movs	r3, #24
 80003a2:	e002      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80003a4:	231c      	movs	r3, #28
 80003a6:	e000      	b.n	80003aa <Get_CRLH_Position+0xbc>
		break;


	}
	return 0;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <Get_IDR_Position>:
 * @param[in]	-PinNumber: which  Get_IDR_Position number
 * 				 GPIO PINS_define to get bit
 * @retval		- bit value
 * Note			-none
======================================================================================*/
uint8_t Get_IDR_Position(uint16_t PinNumber){
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	2b80      	cmp	r3, #128	; 0x80
 80003c2:	d042      	beq.n	800044a <Get_IDR_Position+0x96>
 80003c4:	2b80      	cmp	r3, #128	; 0x80
 80003c6:	dc11      	bgt.n	80003ec <Get_IDR_Position+0x38>
 80003c8:	2b08      	cmp	r3, #8
 80003ca:	d036      	beq.n	800043a <Get_IDR_Position+0x86>
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	dc06      	bgt.n	80003de <Get_IDR_Position+0x2a>
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	d02e      	beq.n	8000432 <Get_IDR_Position+0x7e>
 80003d4:	2b04      	cmp	r3, #4
 80003d6:	d02e      	beq.n	8000436 <Get_IDR_Position+0x82>
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d028      	beq.n	800042e <Get_IDR_Position+0x7a>
 80003dc:	e047      	b.n	800046e <Get_IDR_Position+0xba>
 80003de:	2b20      	cmp	r3, #32
 80003e0:	d02f      	beq.n	8000442 <Get_IDR_Position+0x8e>
 80003e2:	2b40      	cmp	r3, #64	; 0x40
 80003e4:	d02f      	beq.n	8000446 <Get_IDR_Position+0x92>
 80003e6:	2b10      	cmp	r3, #16
 80003e8:	d029      	beq.n	800043e <Get_IDR_Position+0x8a>
 80003ea:	e040      	b.n	800046e <Get_IDR_Position+0xba>
 80003ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003f0:	d033      	beq.n	800045a <Get_IDR_Position+0xa6>
 80003f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003f6:	dc09      	bgt.n	800040c <Get_IDR_Position+0x58>
 80003f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003fc:	d029      	beq.n	8000452 <Get_IDR_Position+0x9e>
 80003fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000402:	d028      	beq.n	8000456 <Get_IDR_Position+0xa2>
 8000404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000408:	d021      	beq.n	800044e <Get_IDR_Position+0x9a>
 800040a:	e030      	b.n	800046e <Get_IDR_Position+0xba>
 800040c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000410:	d027      	beq.n	8000462 <Get_IDR_Position+0xae>
 8000412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000416:	dc03      	bgt.n	8000420 <Get_IDR_Position+0x6c>
 8000418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800041c:	d01f      	beq.n	800045e <Get_IDR_Position+0xaa>
 800041e:	e026      	b.n	800046e <Get_IDR_Position+0xba>
 8000420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000424:	d01f      	beq.n	8000466 <Get_IDR_Position+0xb2>
 8000426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800042a:	d01e      	beq.n	800046a <Get_IDR_Position+0xb6>
 800042c:	e01f      	b.n	800046e <Get_IDR_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 800042e:	2300      	movs	r3, #0
 8000430:	e01e      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 1;
 8000432:	2301      	movs	r3, #1
 8000434:	e01c      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 2;
 8000436:	2302      	movs	r3, #2
 8000438:	e01a      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 3;
 800043a:	2303      	movs	r3, #3
 800043c:	e018      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 4;
 800043e:	2304      	movs	r3, #4
 8000440:	e016      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 5;
 8000442:	2305      	movs	r3, #5
 8000444:	e014      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 6;
 8000446:	2306      	movs	r3, #6
 8000448:	e012      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 7;
 800044a:	2307      	movs	r3, #7
 800044c:	e010      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 8;
 800044e:	2308      	movs	r3, #8
 8000450:	e00e      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 9;
 8000452:	2309      	movs	r3, #9
 8000454:	e00c      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 10;
 8000456:	230a      	movs	r3, #10
 8000458:	e00a      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 11;
 800045a:	230b      	movs	r3, #11
 800045c:	e008      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 12;
 800045e:	230c      	movs	r3, #12
 8000460:	e006      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 13;
 8000462:	230d      	movs	r3, #13
 8000464:	e004      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 14;
 8000466:	230e      	movs	r3, #14
 8000468:	e002      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 15;
 800046a:	230f      	movs	r3, #15
 800046c:	e000      	b.n	8000470 <Get_IDR_Position+0xbc>
		break;


	}
	return 0;
 800046e:	2300      	movs	r3, #0
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <MCAL_GPIO_INIT>:
 *				 the configuration information for the specified GPIO PIN.
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,but LQFP48 Package
 * 				 has only GPIO A,B,PART of C/D exported as external PINS from the M
======================================================================================*/
void MCAL_GPIO_INIT(GPIO_Typedef *GPIOX, GPIO_PIN_CONFIG_T *PinConfig){
 800047a:	b590      	push	{r4, r7, lr}
 800047c:	b085      	sub	sp, #20
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) (x=A..G) >> Configure pin0>>pin7
	//Port configuration register High (GPIOx_CRL) (x=A..G) >> Configure pin8>>pin15

	volatile uint32_t* ConfigRegister=NULL; //4 bytes because CRL OR CRH Are 4 Bytes REGISTER
 8000484:	2300      	movs	r3, #0
 8000486:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config=0;//1 Byte >>Need ONLY 4 Bits for MODE&CNY
 8000488:	2300      	movs	r3, #0
 800048a:	73fb      	strb	r3, [r7, #15]
	ConfigRegister=(PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;//if GPIO's pin less than 8 so ConfigRegister will have address of CRL else will have CRH
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	2bff      	cmp	r3, #255	; 0xff
 8000492:	d801      	bhi.n	8000498 <MCAL_GPIO_INIT+0x1e>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	e001      	b.n	800049c <MCAL_GPIO_INIT+0x22>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3304      	adds	r3, #4
 800049c:	60bb      	str	r3, [r7, #8]

	//Clear MODEy[1:0]: & CNFy[1:0]:
	(*ConfigRegister) &=~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));// 1111 will be shifter to Bit's Number of Pin Number and will be cleared
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	881b      	ldrh	r3, [r3, #0]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff23 	bl	80002ee <Get_CRLH_Position>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	230f      	movs	r3, #15
 80004ae:	4093      	lsls	r3, r2
 80004b0:	43da      	mvns	r2, r3
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	401a      	ands	r2, r3
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	601a      	str	r2, [r3, #0]

	//Want to know if the mode OUT OR IN and whats its CNY
	//01: Floating input (reset state)

	if((PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_PP) ||
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	789b      	ldrb	r3, [r3, #2]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	d00b      	beq.n	80004dc <MCAL_GPIO_INIT+0x62>
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	789b      	ldrb	r3, [r3, #2]
 80004c8:	2b06      	cmp	r3, #6
 80004ca:	d007      	beq.n	80004dc <MCAL_GPIO_INIT+0x62>
			(PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_PP)){
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_PP) ||
 80004d0:	2b05      	cmp	r3, #5
 80004d2:	d003      	beq.n	80004dc <MCAL_GPIO_INIT+0x62>
			(PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_PP)){
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	789b      	ldrb	r3, [r3, #2]
 80004d8:	2b04      	cmp	r3, #4
 80004da:	d10e      	bne.n	80004fa <MCAL_GPIO_INIT+0x80>
		Pin_Config =( (((PinConfig->GPIO_PinMode -4)<<2) | (PinConfig->GPIO_output_speed)) &0x0f);//&0x0f to ensure that the first 4 bits are only set.
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	789b      	ldrb	r3, [r3, #2]
 80004e0:	3b04      	subs	r3, #4
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	b25a      	sxtb	r2, r3
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	78db      	ldrb	r3, [r3, #3]
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b25b      	sxtb	r3, r3
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	73fb      	strb	r3, [r7, #15]
 80004f8:	e02a      	b.n	8000550 <MCAL_GPIO_INIT+0xd6>
	}

	else{ //MODE = 00: Input mode (reset state)
		if((PinConfig ->GPIO_PinMode == GPIO_MODE_INPUT_FLO) ||(PinConfig ->GPIO_PinMode == GPIO_MODE_ANALOG) ){
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d003      	beq.n	800050a <MCAL_GPIO_INIT+0x90>
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d107      	bne.n	800051a <MCAL_GPIO_INIT+0xa0>
			//Set alwasy MODE [1:0]00
			Pin_Config =( (((PinConfig->GPIO_PinMode )<<2) | 0x0) &0x0f);//&0x0f to ensure that the first 4 bits are only set.
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	789b      	ldrb	r3, [r3, #2]
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f003 030f 	and.w	r3, r3, #15
 8000516:	73fb      	strb	r3, [r7, #15]
 8000518:	e01a      	b.n	8000550 <MCAL_GPIO_INIT+0xd6>
		}

		else if((PinConfig ->GPIO_PinMode == GPIO_MODE_AF_INPUT)){ //Will BE input floating
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	2b08      	cmp	r3, #8
 8000520:	d102      	bne.n	8000528 <MCAL_GPIO_INIT+0xae>
			Pin_Config =( (((GPIO_MODE_INPUT_FLO)<<2) | 0x0) &0x0f);
 8000522:	2304      	movs	r3, #4
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	e013      	b.n	8000550 <MCAL_GPIO_INIT+0xd6>
		}
		else{//PU OR PD Input
			Pin_Config =( (((GPIO_MODE_INPUT_PU)<<2) | 0x0) &0x0f);
 8000528:	2308      	movs	r3, #8
 800052a:	73fb      	strb	r3, [r7, #15]
			if(PinConfig ->GPIO_PinMode == GPIO_MODE_INPUT_PU){
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	789b      	ldrb	r3, [r3, #2]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d105      	bne.n	8000540 <MCAL_GPIO_INIT+0xc6>
				//Table 20 >> ODR -->1
				GPIOX->ODR = PinConfig->GPIO_PinNumber; //GPIO_PinNumber Already 1<<NO
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	e007      	b.n	8000550 <MCAL_GPIO_INIT+0xd6>
			}
			else{
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber); //GPIO_PinNumber Already 0<<NO
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	8812      	ldrh	r2, [r2, #0]
 8000548:	43d2      	mvns	r2, r2
 800054a:	401a      	ands	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*ConfigRegister) |= ((Pin_Config)<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));//Shift Left the Pin_Config which have 4 Bits of MODE&CY to Pin Number.
 8000550:	7bfc      	ldrb	r4, [r7, #15]
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fec9 	bl	80002ee <Get_CRLH_Position>
 800055c:	4603      	mov	r3, r0
 800055e:	fa04 f203 	lsl.w	r2, r4, r3
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	431a      	orrs	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	601a      	str	r2, [r3, #0]

}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	bd90      	pop	{r4, r7, pc}

08000574 <MCAL_GPIO_ReadPin>:
 * 				 the GPIO peripheral
 * @param[in]	-PinNumber: Set Pin Number according @ref GPIO_PINS_Define
 * @retval		-The input pin value (two values based on @ref GPIO_PIN_state)
 * Note			-none
======================================================================================*/
uint8_t MCAL_GPIO_ReadPin(GPIO_Typedef *GPIOX,uint16_t PinNumber){
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	807b      	strh	r3, [r7, #2]

	uint8_t Bit_Status;
	if(((GPIOX->IDR & PinNumber)>>Get_IDR_Position(PinNumber)) != ((uint32_t)GPIO_PIN_RESET)){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	ea02 0403 	and.w	r4, r2, r3
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff11 	bl	80003b4 <Get_IDR_Position>
 8000592:	4603      	mov	r3, r0
 8000594:	fa24 f303 	lsr.w	r3, r4, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <MCAL_GPIO_ReadPin+0x2e>
	//if(((GPIOX->IDR & PinNumber)) != ((uint32_t)GPIO_PIN_RESET)){
		Bit_Status =GPIO_PIN_SET;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e001      	b.n	80005a6 <MCAL_GPIO_ReadPin+0x32>
	}
	else{
		Bit_Status =GPIO_PIN_RESET;
 80005a2:	2300      	movs	r3, #0
 80005a4:	73fb      	strb	r3, [r7, #15]
	}
	return Bit_Status;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd90      	pop	{r4, r7, pc}

080005b0 <MCAL_GPIO_TogglePin>:
 * 				 the GPIO peripheral
 * @param[in]	-PinNumber: toggle pin number according @ref GPIO_PINS_define
 * @retval		-none
 * Note			-none
======================================================================================*/
void MCAL_GPIO_TogglePin(GPIO_Typedef *GPIOX,uint16_t PinNumber){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR ^=(PinNumber);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	68da      	ldr	r2, [r3, #12]
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	405a      	eors	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
	...

080005d4 <__libc_init_array>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	2500      	movs	r5, #0
 80005d8:	4e0c      	ldr	r6, [pc, #48]	; (800060c <__libc_init_array+0x38>)
 80005da:	4c0d      	ldr	r4, [pc, #52]	; (8000610 <__libc_init_array+0x3c>)
 80005dc:	1ba4      	subs	r4, r4, r6
 80005de:	10a4      	asrs	r4, r4, #2
 80005e0:	42a5      	cmp	r5, r4
 80005e2:	d109      	bne.n	80005f8 <__libc_init_array+0x24>
 80005e4:	f000 f81a 	bl	800061c <_init>
 80005e8:	2500      	movs	r5, #0
 80005ea:	4e0a      	ldr	r6, [pc, #40]	; (8000614 <__libc_init_array+0x40>)
 80005ec:	4c0a      	ldr	r4, [pc, #40]	; (8000618 <__libc_init_array+0x44>)
 80005ee:	1ba4      	subs	r4, r4, r6
 80005f0:	10a4      	asrs	r4, r4, #2
 80005f2:	42a5      	cmp	r5, r4
 80005f4:	d105      	bne.n	8000602 <__libc_init_array+0x2e>
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005fc:	4798      	blx	r3
 80005fe:	3501      	adds	r5, #1
 8000600:	e7ee      	b.n	80005e0 <__libc_init_array+0xc>
 8000602:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000606:	4798      	blx	r3
 8000608:	3501      	adds	r5, #1
 800060a:	e7f2      	b.n	80005f2 <__libc_init_array+0x1e>
 800060c:	08000634 	.word	0x08000634
 8000610:	08000634 	.word	0x08000634
 8000614:	08000634 	.word	0x08000634
 8000618:	08000638 	.word	0x08000638

0800061c <_init>:
 800061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061e:	bf00      	nop
 8000620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000622:	bc08      	pop	{r3}
 8000624:	469e      	mov	lr, r3
 8000626:	4770      	bx	lr

08000628 <_fini>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr
