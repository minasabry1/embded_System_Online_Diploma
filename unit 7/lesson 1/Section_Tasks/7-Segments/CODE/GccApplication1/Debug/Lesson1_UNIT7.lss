
Lesson1_UNIT7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000668  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  00000e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000108  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000154d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
};

int main(void)
{
	int i,j;
	for(i=0;i<=7;i++){
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	0d c0       	rjmp	.+26     	; 0x8c <main+0x20>
		Set_Bit(DDRA,i);
  72:	4a b3       	in	r20, 0x1a	; 26
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 2e       	mov	r0, r18
  7a:	02 c0       	rjmp	.+4      	; 0x80 <main+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <main+0x10>
  84:	84 2b       	or	r24, r20
  86:	8a bb       	out	0x1a, r24	; 26
};

int main(void)
{
	int i,j;
	for(i=0;i<=7;i++){
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
  8c:	28 30       	cpi	r18, 0x08	; 8
  8e:	31 05       	cpc	r19, r1
  90:	84 f3       	brlt	.-32     	; 0x72 <main+0x6>
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	0d c0       	rjmp	.+26     	; 0xb2 <main+0x46>
		Set_Bit(DDRA,i);
	}
	for(i=0;i<=7;i++){
		Set_Bit(DDRC,i);
  98:	44 b3       	in	r20, 0x14	; 20
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 2e       	mov	r0, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x3a>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <main+0x36>
  aa:	84 2b       	or	r24, r20
  ac:	84 bb       	out	0x14, r24	; 20
{
	int i,j;
	for(i=0;i<=7;i++){
		Set_Bit(DDRA,i);
	}
	for(i=0;i<=7;i++){
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	28 30       	cpi	r18, 0x08	; 8
  b4:	31 05       	cpc	r19, r1
  b6:	84 f3       	brlt	.-32     	; 0x98 <main+0x2c>
		Set_Bit(DDRC,i);
	}
	Clear_Bit(DDRD,0);//Pin 0>>PortD>>Input
  b8:	81 b3       	in	r24, 0x11	; 17
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	81 bb       	out	0x11, r24	; 17
	Set_Bit(PORTD,0);//PullUP
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	82 bb       	out	0x12, r24	; 18
	
    /* Replace with your application code */
    while (1) 
    {
	    for(i=0;i<=9;i++){
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	2d c0       	rjmp	.+90     	; 0x124 <main+0xb8>
			for(j=0;j<=9;j++){
				PORTC = (0b10<<2)| (i<<4);//ON 1st 7-Segments
  ca:	9a 01       	movw	r18, r20
  cc:	22 95       	swap	r18
  ce:	32 95       	swap	r19
  d0:	30 7f       	andi	r19, 0xF0	; 240
  d2:	32 27       	eor	r19, r18
  d4:	20 7f       	andi	r18, 0xF0	; 240
  d6:	32 27       	eor	r19, r18
  d8:	28 60       	ori	r18, 0x08	; 8
  da:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	32 e5       	ldi	r19, 0x52	; 82
  e0:	67 e0       	ldi	r22, 0x07	; 7
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	60 40       	sbci	r22, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x76>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x80>
  ec:	00 00       	nop
				_delay_ms(300);
				PORTC = (0b01<<2)| (j<<4);//ON 2nd 7-Segments
  ee:	9c 01       	movw	r18, r24
  f0:	22 95       	swap	r18
  f2:	32 95       	swap	r19
  f4:	30 7f       	andi	r19, 0xF0	; 240
  f6:	32 27       	eor	r19, r18
  f8:	20 7f       	andi	r18, 0xF0	; 240
  fa:	32 27       	eor	r19, r18
  fc:	24 60       	ori	r18, 0x04	; 4
  fe:	25 bb       	out	0x15, r18	; 21
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	32 e5       	ldi	r19, 0x52	; 82
 104:	67 e0       	ldi	r22, 0x07	; 7
 106:	21 50       	subi	r18, 0x01	; 1
 108:	30 40       	sbci	r19, 0x00	; 0
 10a:	60 40       	sbci	r22, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x9a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0xa4>
 110:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {
	    for(i=0;i<=9;i++){
			for(j=0;j<=9;j++){
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0xae>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	8a 30       	cpi	r24, 0x0A	; 10
 11c:	91 05       	cpc	r25, r1
 11e:	ac f2       	brlt	.-86     	; 0xca <main+0x5e>
	Set_Bit(PORTD,0);//PullUP
	
    /* Replace with your application code */
    while (1) 
    {
	    for(i=0;i<=9;i++){
 120:	4f 5f       	subi	r20, 0xFF	; 255
 122:	5f 4f       	sbci	r21, 0xFF	; 255
 124:	4a 30       	cpi	r20, 0x0A	; 10
 126:	51 05       	cpc	r21, r1
 128:	b4 f3       	brlt	.-20     	; 0x116 <main+0xaa>
 12a:	cc cf       	rjmp	.-104    	; 0xc4 <main+0x58>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
