
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000600  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  0000133d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
	int i;
	int flag = 0;

	for (i = 0; i <= 7; i++) {
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	0d c0       	rjmp	.+26     	; 0x8c <main+0x20>
		Set_Bit(DDRA, i);
  72:	4a b3       	in	r20, 0x1a	; 26
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 2e       	mov	r0, r18
  7a:	02 c0       	rjmp	.+4      	; 0x80 <main+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <main+0x10>
  84:	84 2b       	or	r24, r20
  86:	8a bb       	out	0x1a, r24	; 26
int main(void)
{
	int i;
	int flag = 0;

	for (i = 0; i <= 7; i++) {
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
  8c:	28 30       	cpi	r18, 0x08	; 8
  8e:	31 05       	cpc	r19, r1
  90:	84 f3       	brlt	.-32     	; 0x72 <main+0x6>
		Set_Bit(DDRA, i);
	}
	Clear_Bit(DDRD, 0); // Pin 0>>PortD>>Input
  92:	81 b3       	in	r24, 0x11	; 17
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	81 bb       	out	0x11, r24	; 17
	Set_Bit(PORTD, 0); // PullUP
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	82 bb       	out	0x12, r24	; 18

#include <util/delay.h>
int main(void)
{
	int i;
	int flag = 0;
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x3c>
				Set_Bit(PORTA, i);
				_delay_ms(250);
			}
			flag += 1;
			if (flag == 8) {
				flag = 0;
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
	Clear_Bit(DDRD, 0); // Pin 0>>PortD>>Input
	Set_Bit(PORTD, 0); // PullUP

	/* Replace with your application code */
	while (1) {
		if (Read_Bit(PIND, 0) == 0) {
  a8:	80 b3       	in	r24, 0x10	; 16
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	28 2f       	mov	r18, r24
  ae:	21 70       	andi	r18, 0x01	; 1
  b0:	80 fd       	sbrc	r24, 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 bb       	out	0x10, r25	; 16
  b6:	21 11       	cpse	r18, r1
  b8:	f7 cf       	rjmp	.-18     	; 0xa8 <main+0x3c>
  ba:	17 c0       	rjmp	.+46     	; 0xea <main+0x7e>
			for (i = 0; i <= flag; i++) {
				Set_Bit(PORTA, i);
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x5e>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x5a>
  ce:	84 2b       	or	r24, r20
  d0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	4f e7       	ldi	r20, 0x7F	; 127
  d4:	8a e1       	ldi	r24, 0x1A	; 26
  d6:	96 e0       	ldi	r25, 0x06	; 6
  d8:	41 50       	subi	r20, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
	Set_Bit(PORTD, 0); // PullUP

	/* Replace with your application code */
	while (1) {
		if (Read_Bit(PIND, 0) == 0) {
			for (i = 0; i <= flag; i++) {
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x82>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	62 17       	cp	r22, r18
  f0:	73 07       	cpc	r23, r19
  f2:	24 f7       	brge	.-56     	; 0xbc <main+0x50>
				Set_Bit(PORTA, i);
				_delay_ms(250);
			}
			flag += 1;
  f4:	6f 5f       	subi	r22, 0xFF	; 255
  f6:	7f 4f       	sbci	r23, 0xFF	; 255
			if (flag == 8) {
  f8:	68 30       	cpi	r22, 0x08	; 8
  fa:	71 05       	cpc	r23, r1
  fc:	a9 f6       	brne	.-86     	; 0xa8 <main+0x3c>
  fe:	d2 cf       	rjmp	.-92     	; 0xa4 <main+0x38>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
