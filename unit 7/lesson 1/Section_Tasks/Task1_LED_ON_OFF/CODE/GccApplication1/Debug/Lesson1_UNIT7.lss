
Lesson1_UNIT7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000637  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  00000803  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Utiltes.h"
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	int i=0;
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	1a c0       	rjmp	.+52     	; 0xa6 <main+0x3a>
	int j=7;
    /* Replace with your application code */
    while (1) 
    {
		for(i;i<8;i++){
		Set_Bit(DDRA,i);
  72:	2a b3       	in	r18, 0x1a	; 26
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	06 2e       	mov	r0, r22
  7a:	02 c0       	rjmp	.+4      	; 0x80 <main+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <main+0x10>
  84:	92 2f       	mov	r25, r18
  86:	98 2b       	or	r25, r24
  88:	9a bb       	out	0x1a, r25	; 26
		Set_Bit(PORTA,i);
  8a:	9b b3       	in	r25, 0x1b	; 27
  8c:	89 2b       	or	r24, r25
  8e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	44 e3       	ldi	r20, 0x34	; 52
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	21 50       	subi	r18, 0x01	; 1
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
	int i=0;
	int j=7;
    /* Replace with your application code */
    while (1) 
    {
		for(i;i<8;i++){
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	7f 4f       	sbci	r23, 0xFF	; 255
  a6:	68 30       	cpi	r22, 0x08	; 8
  a8:	71 05       	cpc	r23, r1
  aa:	1c f3       	brlt	.-58     	; 0x72 <main+0x6>
  ac:	27 e0       	ldi	r18, 0x07	; 7
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	17 c0       	rjmp	.+46     	; 0xe0 <main+0x74>
		Set_Bit(PORTA,i);
		_delay_ms(500);
    }
	    for (j = 7; j >= 0; j--)
	    {
		    Clear_Bit(PORTA, j);
  b2:	4b b3       	in	r20, 0x1b	; 27
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 2e       	mov	r0, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x50>
  c4:	80 95       	com	r24
  c6:	84 23       	and	r24, r20
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	44 e3       	ldi	r20, 0x34	; 52
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	91 50       	subi	r25, 0x01	; 1
  d2:	40 40       	sbci	r20, 0x00	; 0
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
		for(i;i<8;i++){
		Set_Bit(DDRA,i);
		Set_Bit(PORTA,i);
		_delay_ms(500);
    }
	    for (j = 7; j >= 0; j--)
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	31 09       	sbc	r19, r1
  e0:	33 23       	and	r19, r19
  e2:	3c f7       	brge	.-50     	; 0xb2 <main+0x46>
  e4:	e0 cf       	rjmp	.-64     	; 0xa6 <main+0x3a>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
